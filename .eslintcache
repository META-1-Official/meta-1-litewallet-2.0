[{"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/index.js":"1","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/App.js":"2","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/SendWithPassword.js":"3","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js":"4","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js":"5","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/Portfolio.js":"6","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/CheckPassword.js":"7","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/API/API.js":"8","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/utils/localstorage.js":"9","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js":"10","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js":"11","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js":"12","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Settings/Settings.js":"13","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js":"14","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js":"15","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Footer/Footer.js":"16","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/UI/loader/Loader.js":"17","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/index.js":"18","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SignUpForm/index.js":"19","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/DepositForm/index.js":"20","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/WithdrawForm/index.js":"21","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SendForm/index.js":"22","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js":"23","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js":"24","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js":"25","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/fetchHistory.js":"26","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/utils/commonFunction.js":"27","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js":"28","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/useDebounce.js":"29","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js":"30","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx":"31","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js":"32","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js":"33","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js":"34","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js":"35","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js":"36","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/config/help.js":"37","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js":"38","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js":"39","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/helpers/string.js":"40","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js":"41","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/AccountApi.js":"42","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/index.js":"43","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/selector.js":"44","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/actions.js":"45","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/reducer.js":"46","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/saga.js":"47","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/types.js":"48","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/reducer.js":"49","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/saga.js":"50","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/reducer.js":"51","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/types.js":"52","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/saga.js":"53","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/actions.js":"54","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/selector.js":"55"},{"size":662,"mtime":1654090145969,"results":"56","hashOfConfig":"57"},{"size":30807,"mtime":1654508434982,"results":"58","hashOfConfig":"57"},{"size":709,"mtime":1654059508820,"results":"59","hashOfConfig":"57"},{"size":896,"mtime":1654059508820,"results":"60","hashOfConfig":"57"},{"size":590,"mtime":1654059508820,"results":"61","hashOfConfig":"57"},{"size":2386,"mtime":1654059508820,"results":"62","hashOfConfig":"57"},{"size":787,"mtime":1654059508820,"results":"63","hashOfConfig":"57"},{"size":5106,"mtime":1654260871211,"results":"64","hashOfConfig":"57"},{"size":888,"mtime":1654059508820,"results":"65","hashOfConfig":"57"},{"size":6848,"mtime":1654259460448,"results":"66","hashOfConfig":"57"},{"size":8318,"mtime":1654259561191,"results":"67","hashOfConfig":"57"},{"size":5001,"mtime":1654059508812,"results":"68","hashOfConfig":"57"},{"size":13923,"mtime":1654263622686,"results":"69","hashOfConfig":"57"},{"size":3485,"mtime":1654059508808,"results":"70","hashOfConfig":"57"},{"size":4556,"mtime":1654059508812,"results":"71","hashOfConfig":"57"},{"size":33777,"mtime":1654090145969,"results":"72","hashOfConfig":"57"},{"size":1348,"mtime":1654059508808,"results":"73","hashOfConfig":"57"},{"size":10676,"mtime":1654059508812,"results":"74","hashOfConfig":"57"},{"size":3522,"mtime":1654059508812,"results":"75","hashOfConfig":"57"},{"size":4086,"mtime":1654059508808,"results":"76","hashOfConfig":"57"},{"size":15642,"mtime":1654059508812,"results":"77","hashOfConfig":"57"},{"size":22658,"mtime":1654059508812,"results":"78","hashOfConfig":"57"},{"size":34526,"mtime":1654059508808,"results":"79","hashOfConfig":"57"},{"size":546,"mtime":1654059508808,"results":"80","hashOfConfig":"57"},{"size":2226,"mtime":1654059508812,"results":"81","hashOfConfig":"57"},{"size":2445,"mtime":1654059508820,"results":"82","hashOfConfig":"57"},{"size":72,"mtime":1654059508820,"results":"83","hashOfConfig":"57"},{"size":4341,"mtime":1654059508820,"results":"84","hashOfConfig":"57"},{"size":2141,"mtime":1654059508820,"results":"85","hashOfConfig":"57"},{"size":3776,"mtime":1654059508808,"results":"86","hashOfConfig":"57"},{"size":11598,"mtime":1654103974655,"results":"87","hashOfConfig":"57"},{"size":6627,"mtime":1654259443104,"results":"88","hashOfConfig":"57"},{"size":2698,"mtime":1654059508812,"results":"89","hashOfConfig":"57"},{"size":9603,"mtime":1654059508812,"results":"90","hashOfConfig":"57"},{"size":2111,"mtime":1654059508808,"results":"91","hashOfConfig":"57"},{"size":3654,"mtime":1654059508812,"results":"92","hashOfConfig":"57"},{"size":1402,"mtime":1654059508812,"results":"93","hashOfConfig":"57"},{"size":3308,"mtime":1654059508812,"results":"94","hashOfConfig":"57"},{"size":10535,"mtime":1654059508812,"results":"95","hashOfConfig":"57"},{"size":250,"mtime":1654059508812,"results":"96","hashOfConfig":"57"},{"size":432,"mtime":1654059508812,"results":"97","hashOfConfig":"57"},{"size":531,"mtime":1654059508820,"results":"98","hashOfConfig":"57"},{"size":887,"mtime":1654090145969,"results":"99","hashOfConfig":"57"},{"size":926,"mtime":1654258962952,"results":"100","hashOfConfig":"57"},{"size":1478,"mtime":1654262670196,"results":"101","hashOfConfig":"57"},{"size":191,"mtime":1654253714395,"results":"102","hashOfConfig":"57"},{"size":263,"mtime":1654253730410,"results":"103","hashOfConfig":"57"},{"size":586,"mtime":1654262606551,"results":"104","hashOfConfig":"57"},{"size":2510,"mtime":1654262924352,"results":"105","hashOfConfig":"57"},{"size":2551,"mtime":1654262991394,"results":"106","hashOfConfig":"57"},{"size":1070,"mtime":1654494152866,"results":"107","hashOfConfig":"57"},{"size":274,"mtime":1654493565527,"results":"108","hashOfConfig":"57"},{"size":660,"mtime":1654490536916,"results":"109","hashOfConfig":"57"},{"size":532,"mtime":1654493569559,"results":"110","hashOfConfig":"57"},{"size":174,"mtime":1654255541151,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"zk1ul2",{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"114"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"114"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"114"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"114"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"114"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"114"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"114"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"114"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"114"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"114"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"114"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"114"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/index.js",[],["244","245"],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/App.js",["246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/SendWithPassword.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/Portfolio.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/CheckPassword.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/API/API.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/utils/localstorage.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js",["268","269"],"import React from \"react\";\nimport styles from \"./Navbar.module.scss\";\nimport \"./styles.css\";\nimport logo from \"../../images/Logo.png\";\nimport LeftPanelAdapt from \"../LeftPanelAdapt/LeftPanelAdapt\";\nimport WidgetOnRamper from \"./WidgetOnRamper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logoutRequest } from \"../../store/account/actions\";\nimport { navbarProfileImageSelector } from \"../../store/account/selector\";\n\nconst Navbar = (props) => {\n  const dispatch = useDispatch();\n  const navbarProfileImageState = useSelector(navbarProfileImageSelector)\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name\n  } = props;\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  return (\n    <>\n      <div\n        className=\"modal fade\"\n        id=\"fund\"\n        tabIndex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n          <div className=\"modal-content\">\n            <div className={\"modal-body onramper-wallet\"}>\n              <button\n                style={{ margin: \"0 0 0 97%\" }}\n                type=\"button\"\n                className=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              />\n              <iframe\n                src=\"https://widget.onramper.com/?color=ffc000&amp;defaultAmount=1000&amp;defaultFiat=USD&amp;defaultCrypto=BTC&amp;apiKey=pk_prod_k6LKERIMdGDE8geCxOApKSCy6mnfF5CuhI4TLZj55Wc0\"\n                title=\"myFrame\"\n                style={{ border: \"0\" }}\n                allowFullScreen=\"\"\n                aria-hidden=\"false\"\n                tabIndex=\"0\"\n                width=\"100%\"\n                height=\"600\"\n                frameBorder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <nav\n        className={\n          styles.navbar + \" navbar navbar-expand-lg navbar-dark bg-dark\"\n        }\n      >\n        <div className=\"container-fluid\">\n          <img\n            className={styles.img}\n            onClick={() => {\n              window.open(process.env.REACT_APP_WALLET_LOGO_HREF);\n            }}\n            style={{ cursor: \"pointer\" }}\n            src={logo}\n            alt=\"logo\"\n          />\n          {isMobile && portfolio ? (\n            <div className={styles.mobileName}>\n              <p>\n                <strong>Hello, {name}</strong>\n              </p>\n            </div>\n          ) : null}\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <div className={\"navbar-nav me-auto\"} />\n            <div className=\"d-flex\">\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <div className={styles.blockhelp}>\n                  <i\n                    className=\"far fa-question-circle\"\n                    style={{ marginRight: \".2rem\" }}\n                  />\n                  <span\n                    onClick={() => {\n                      window.open(process.env.REACT_APP_WALLET_FOOTER_SUPPORT_HREF);\n                    }}\n                  >\n                    Get help\n                  </span>\n                </div>\n                <button\n                  className={\n                    name && portfolio ? styles.btn : styles.btnDisabled\n                  }\n                  disabled={!name && !portfolio}\n                  data-bs-toggle=\"modal\"\n                  data-bs-target=\"#fund\"\n                >\n                  Fund Account\n                </button>\n                <div className={styles.line + styles.adaptNeed} />\n                <div\n                  className={styles.adaptNeed}\n                  style={{\n                    marginRight: \"1rem\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <div className=\"nav-item dropdown\">\n                    <a\n                      className=\"nav-link dropdown-toggle\"\n                      href=\"#\"\n                      id=\"navbarScrollingDropdown\"\n                      role=\"button\"\n                      data-bs-toggle=\"dropdown\"\n                      aria-expanded=\"false\"\n                    >\n                      <div\n                        className={\"imgUser\"}\n                        style={{ marginLeft: \".3rem\" }}\n                      >\n                        <img\n                          className={styles.userImg}\n                          id=\"avatarNavbar\"\n                          src={navbarProfileImageState}\n                          alt=\"user\"\n                        />\n                      </div>\n                    </a>\n                    {name && portfolio ? (\n                      <ul\n                        className=\"dropdown-menu\"\n                        aria-labelledby=\"navbarScrollingDropdown\"\n                        style={{ marginLeft: \"-4rem\", width: \"8rem\" }}\n                      >\n                        <li>\n                          <p\n                            className=\"dropdown-item\"\n                            style={{ textAlign: \"center\" }}\n                            onClick={() => {\n                              dispatch(logoutRequest());\n                            }}\n                          >\n                            Log Out\n                          </p>\n                        </li>\n                      </ul>\n                    ) : null}\n                  </div>\n                </div>\n              </div>\n            </div>\n            {isMobile ? (\n              <LeftPanelAdapt\n                onClickHomeHandler={onClickHomeHandler}\n                onClickPortfolioHandler={onClickPortfolioHandler}\n                onClickExchangeHandler={onClickExchangeHandler}\n                onClickPaperWalletHandler={onClickPaperWalletHandler}\n                onClickOrderTableHandler={onClickOrderTableHandler}\n                onClickSettingsHandler={onClickSettingsHandler}\n                onClickHistoryHandler={onClickHistoryHandler}\n                portfolio={portfolio}\n                name={name}\n              />\n            ) : null}\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js",["270","271"],"import * as React from \"react\";\nimport styles from \"./LeftPanel.module.scss\";\nimport { useEffect } from \"react\";\nimport user from \"../../images/default-pic1.png\";\nimport firstPart from \"../../images/assetsForSidebar/Shape 2.png\";\nimport secondPart from \"../../images/assetsForSidebar/Shape 2 copy.png\";\nimport homeIcon from \"../../images/assetsForSidebar/Shape 5.png\";\nimport { useSelector } from \"react-redux\";\nimport { profileImageSelector } from \"../../store/account/selector\";\n\nconst LeftPanel = (props) => {\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name,\n    activeScreen\n  } = props;\n  const profileImageState =  useSelector(profileImageSelector);\n  const portfolioScrollPositionHoverEvent = (e) => {\n    if (e.clientY <= 70) {\n      if (document.querySelector('#modalBlock')) {\n        document.querySelector('#modalBlock').style.top = '2%'\n      }\n    } else if (e.clientY < 100 && e.clientY > 70) {\n      document.querySelector('#modalBlock').style.top = '3%'\n    } else if (e.clientY < 200 && e.clientY >= 100) {\n      if (document.querySelector('#modalBlock')) {\n        document.querySelector('#modalBlock').style.top = '7%'\n      }\n    } else {\n      if (document.querySelector('#modalBlock')) {\n        document.querySelector('#modalBlock').style.top = '20%'\n      }\n    }\n  }\n\n  useEffect(() => {\n    document.querySelector('.portforlio-class').addEventListener('mouseenter', portfolioScrollPositionHoverEvent);\n  }, [])\n  useEffect(() => {\n    if (name && portfolio) {\n      setTimeout(() => {\n        let allEvents = document.getElementsByClassName(\"event\");\n        for (let i = 0; i < allEvents.length; i++) {\n          allEvents[i].addEventListener(\"mouseover\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"block\";\n          });\n          allEvents[i].addEventListener(\"mouseout\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"none\";\n          });\n        }\n      }, 25);\n    }\n  }, [name, portfolio]);\n\n  return (\n    <ul id={\"mainBlock\"} className={styles.mainBlock + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              src={profileImageState}\n              id=\"leftAvatar\"\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <img style={{ padding: \".47rem .5rem\" }} src={homeIcon} alt=\"\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"login\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <div\n        id={\"modalBlock\"}\n        style={{ display: \"none\" }}\n        className={styles.modalBlock + \" event\"}\n      >\n        <div className={styles.modalContent + \" event\"}>\n          <h1 className={\"event\"}>Portfolio</h1>\n          <ul className={\"event\"}>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPortfolioHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Show All Balance\n            </li>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickOrderTableHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Open Orders\n            </li>\n            {/* <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPaperWalletHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Paper Wallet\n            </li> */}\n          </ul>\n        </div>\n      </div>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item event portforlio-class\"\n            : styles.LiDisabled + \" nav-item event portforlio-class\"\n        }\n        onClick={portfolio ? onClickPortfolioHandler : null}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div\n              className={styles.textSpan + \" event\"}\n              style={\n                activeScreen === \"portfolio\" ||\n                activeScreen === \"sendFunds\" ||\n                activeScreen === \"deposit\" ||\n                activeScreen === \"wallet\" ||\n                activeScreen === \"paperWallet\"\n                ? { color: \"#FFC000\" }\n                : null\n              }\n            >\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickExchangeHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <div\n              style={{ position: \"relative\", width: \"30px\", height: \"30px\" }}\n            >\n              <img\n                src={firstPart}\n                style={{ position: \"absolute\", top: \"10px\", left: \"6.5px\" }}\n                alt=\"\"\n              />\n              <img\n                src={secondPart}\n                style={{ position: \"absolute\", top: \"14px\", left: \"14.5px\" }}\n                alt=\"\"\n              />\n            </div>\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"exchange\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickHistoryHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"orderTable\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickSettingsHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"settings\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanel;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Settings/Settings.js",["272","273","274","275","276"],"import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./Settings.module.scss\";\nimport axios from \"axios\";\nimport RightSideHelpMenuThirdType from \"../RightSideHelpMenuThirdType/RightSideHelpMenuThirdType\";\nimport {\n  Image,\n  Modal,\n  Button,\n  Grid,\n  Icon,\n  Label,\n  Popup,\n} from \"semantic-ui-react\";\nimport { saveUserCurrency } from \"../../API/API\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cryptoDataSelector } from \"../../store/meta1/selector\";\nimport { accountsSelector, profileImageSelector } from \"../../store/account/selector\";\nimport { deleteAvatarRequest, uploadAvatarRequest } from \"../../store/account/actions\";\n\nconst Settings = (props) => {\n  const {\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    getAvatarFromBack,\n    userCurrency,\n    setUserCurrency,\n    checkPaswordObj,\n    setTokenModalMsg,\n    setTokenModalOpen\n  } = props;\n\n  const [currency, setCurrency] = useState(userCurrency);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [openPasswordSection, setOpenPasswordSection] = useState(false);\n  const [isRemoveBtn, setIsRemoveBtn] = useState(false);\n  const [isPasswordTouch, setIsPasswordTouch] = useState(false);\n  const imageRef = useRef();\n  const dispatch = useDispatch();\n  const cryptoDataState = useSelector(cryptoDataSelector);\n  const accountNameState = useSelector(accountsSelector);\n  const profileImageState =  useSelector(profileImageSelector);\n  useEffect(() => {\n    setTimeout(() => {\n      document.getElementById(\"mainBlock\").style.height = \"auto\";\n    }, 50);\n  }, []);\n\n  const changeCurrencyHandler = async (e) => {\n    e.preventDefault();\n    const response = await saveUserCurrency(\n      localStorage.getItem(\"login\"),\n      currency.split(\" \")[1]\n    );\n    if (response.tokenExpired) {\n      setTokenModalOpen(true);\n      setTokenModalMsg(response.responseMsg);\n      return;\n    }\n    setUserCurrency(currency);\n    setModalOpened(true);\n  };\n\n  const uploadImageValidation = async () => {\n    if (!password) {\n      setIsPasswordTouch(true);\n      return;\n    }\n    const result = await checkPaswordObj.checkPasword(password)\n    if (result.error !== null) {\n      setPasswordError(result.error);\n      return;\n    }\n    imageRef.current.click();\n    closePasswordSectionHandler(false);\n  }\n\n  const removeImageValidation = async () => {\n    if (!password) {\n      setIsPasswordTouch(true);\n      return;\n    }\n    const result = await checkPaswordObj.checkPasword(password)\n    if (result.error !== null) {\n      setPasswordError(result.error);\n      return;\n    }\n    dispatch(deleteAvatarRequest(accountNameState))\n    closePasswordSectionHandler(false);\n  }\n\n  async function uploadFile(e) {\n    e.preventDefault();\n\n    if (e.target?.files[0]?.name) {\n      let type = e.target?.files[0]?.name.split(\".\")[1];\n      if (type === \"png\" || type === \"jpeg\" || type === \"jpg\") {\n        if (\n          e.target?.files[0]?.size > 70000 &&\n          e.target?.files[0]?.size < 1000000\n        ) {\n          const formData = new FormData();\n          formData.append(\"login\", accountNameState);\n          formData.append(\n            \"file\",\n            document.getElementById(\"file_upload\")?.files[0]\n          );\n          dispatch(uploadAvatarRequest(formData));\n        } else {\n          alert(\"Invalid file size\");\n        }\n      } else {\n        alert(\"Invalid file format\");\n      }\n    } else {\n      alert(\"Please select a file\");\n    }\n    document.getElementById(\"file_upload\").value = \"\";\n  }\n\n  const openPasswordSectionHandler = (isRemove = false) => {\n    setPassword('');\n    setOpenPasswordSection(true);\n    setPasswordError('');\n    if (isRemove) setIsRemoveBtn(true);\n  }\n  const closePasswordSectionHandler = () => {\n    setOpenPasswordSection(false);\n    setPasswordError('');\n    setIsRemoveBtn(false);\n    setIsPasswordTouch(false);\n  }\n  return (\n    <>\n      <Modal\n        size=\"mini\"\n        open={modalOpened}\n        onClose={() => {\n          setModalOpened(false);\n        }}\n        id={\"modalExch\"}\n      >\n        <Modal.Header>Currency change</Modal.Header>\n        <Modal.Content style={{ height: \"55%\" }}>\n          <div\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <h3 style={{ textAlign: \"center\" }}>\n              You have successfully changed the currency to{\" \"}\n              {currency.split(\" \")[0]}\n            </h3>\n          </div>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n            onClick={() => {\n              setModalOpened(false);\n            }}\n          >\n            OK\n          </Button>\n        </Modal.Actions>\n      </Modal>\n      <div>\n        <div style={{ background: \"#fff\", padding: \"1.05rem 2rem\" }}>\n          <h3 style={{ fontWeight: \"600\" }}>\n            <strong>Account Settings</strong>\n          </h3>\n        </div>\n        <div className={styles.adaptNeed}>\n          <div className={styles.mainBlockAdapt} style={{ width: \"70%\" }}>\n            <div className={styles.mainBlock}>\n              <div className={styles.mainHeader}>\n                <h3 style={{ fontWeight: \"700\" }}>Edit Profile</h3>\n              </div>\n              <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n              <div className={styles.changeDataBlock}>\n                <div className={styles.imgChangeBlock}>\n                  <div className={styles.userNewImgBlock}>\n                    <img\n                      src={profileImageState}\n                      id=\"imageUser\"\n                      style={{\n                        width: \"140px\",\n                        height: \"140px\",\n                        borderRadius: \"100px\",\n                      }}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className={styles.extraInfoBlock}>\n\n                    {<div style={openPasswordSection ? { display: 'none', fontFamily: \"Poppins, sans-serif\" } : { display: 'block', fontFamily: \"Poppins, sans-serif\" }}>\n                      <h4 style={{ margin: \"0\" }}>Upload a Photo</h4>\n                      <div className={styles.buttonAdapt}>\n                        <div\n                          className={styles.blockForUpload}\n                          style={{ position: \"relative\" }}\n                          onClick={() => openPasswordSectionHandler()}\n                        >\n                          <p className={styles.pUpload}>Choose a File</p>\n\n                        </div>\n                        <div style={{ display: 'none' }} >\n                          <input\n                            type=\"file\"\n                            id=\"file_upload\"\n                            onChange={(e) => {\n                              uploadFile(e);\n                            }}\n                            ref={imageRef}\n                            className={styles.uploadButton}\n                          />\n                        </div>\n                        <button\n                          className={styles.Button}\n                          style={{ marginLeft: \"1rem\" }}\n                          onClick={() => openPasswordSectionHandler(true)}\n                        >\n                          Remove the Photo\n                        </button>\n                      </div>\n                    </div>}\n                    {!!openPasswordSection && <div>\n                      <label>Enter Password</label>\n                      <input\n                        type='password'\n                        value={password}\n                        onChange={(e) => {\n                          setPassword(e.target.value)\n                          setIsPasswordTouch(true)\n                        }}\n                        onBlur={() => setIsPasswordTouch(true)}\n                        className={styles.input_password}\n                      />\n                      {!password && isPasswordTouch && <span style={{ color: 'red', display: 'block' }}>Password field can't be empty</span>}\n                      <button onClick={!isRemoveBtn ? uploadImageValidation : removeImageValidation} className={styles.Button_Password} >Submit</button>\n                      <button onClick={closePasswordSectionHandler} className={styles.Button_Password}>Cancel</button>\n                    </div>}\n                    <div className={styles.extraText}>\n                      <span>Acceptable formats: jpg, png only</span>\n                      <span>\n                        Maximum file size is 1mb and minimum size 70kb\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n                <div className={styles.extraInfoChangeBlock}>\n                  <h3 style={{ fontWeight: \"400\", margin: \"0 0 .3rem 0\" }}>\n                    Account Profile\n                  </h3>\n                  <span>\n                    You can update an login wallet associated with your account\n                    using the form below.\n                  </span>\n                </div>\n                <form className={styles.changeDataForm}>\n                  <div className={styles.changeDataInput}>\n                    <label\n                      style={{\n                        color: \"rgb(90, 103, 118)!important\",\n                        margin: \".5rem 0\",\n                      }}\n                      htmlFor=\"email\"\n                    >\n                      Login<span style={{ color: \"red\" }}>*</span>\n                    </label>\n                    <input\n                      type={\"text\"}\n                      className={styles.input}\n                      placeholder={accountNameState}\n                      name={\"login\"}\n                      disabled\n                    />\n                  </div>\n                  <div className={styles.blockButton}>\n                    <button\n                      type={\"submit\"}\n                      style={{ width: \"10rem\", marginBottom: \"2rem\" }}\n                      className={styles.Button + \" \" + styles.disabled}\n                      disabled\n                    >\n                      Update\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <div className={styles.changeCurrencyBlock}>\n              <div className={styles.changeCurrencyHeader}>\n                <h3>Currency Preference</h3>\n              </div>\n              <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n              <form\n                onSubmit={changeCurrencyHandler}\n                className={styles.changeCurrencyForm}\n              >\n                <div\n                  style={{ margin: \"0 0 1rem 0\", color: \"rgb(90, 103, 118)\" }}\n                >\n                  <span>\n                    Select your preferred display currency for all markets.\n                  </span>\n                </div>\n                <div className={styles.changeDataInput}>\n                  <select\n                    className={styles.currencySelect}\n                    onChange={(e) => setCurrency(e.target.value)}\n                    name=\"currencies\"\n                    id=\"currenciesChoose\"\n                    value={currency}\n                  >\n                    <option value=\"$ USD 1\">$ (USD)</option>\n                    <option value={`€ EUR ${cryptoDataState.ExchangeRate[0].rate}`}>\n                      € (EUR)\n                    </option>\n                    <option value={`£ GBP ${cryptoDataState.ExchangeRate[1].rate}`}>\n                      £ (GBP)\n                    </option>\n                    <option value={`₽ RUB ${cryptoDataState.ExchangeRate[2].rate}`}>\n                      ₽ (RUB)\n                    </option>\n                    <option\n                      value={`CA$ CAD ${cryptoDataState.ExchangeRate[3].rate}`}\n                    >\n                      CA$ (CAD)\n                    </option>\n                  </select>\n                </div>\n                <div className={styles.blockButton}>\n                  <button\n                    type={\"submit\"}\n                    style={{ width: \"10rem\" }}\n                    className={styles.Button}\n                  >\n                    Update\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n          <div className={styles.helpBlockAdapt} style={{ width: \"30%\" }}>\n            <RightSideHelpMenuThirdType\n              onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n              onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Modal\n        size=\"mini\"\n        open={passwordError !== ''}\n        onClose={() => setPasswordError('')}\n        id={\"modalExch\"}\n      >\n        <Modal.Header>Error occured</Modal.Header>\n        <Modal.Content>\n          <Grid verticalAlign=\"middle\" centered>\n            <Grid.Row centered columns={2}>\n              <Grid.Column width={4}>\n                <Icon disabled name=\"warning sign\" size=\"huge\" />\n              </Grid.Column>\n\n              <Grid.Column width={10}>\n                <div className=\"trade-error\">{passwordError}</div>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button positive onClick={() => setPasswordError('')}>\n            OK\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nexport default Settings;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js",["277","278","279","280","281"],"/* eslint-disable array-callback-return */\nimport React, { useEffect, useState } from \"react\";\nimport { generateKeyFromPassword } from \"../../lib/createAccountWithPassword\";\nimport { Button, Form, FormField } from \"semantic-ui-react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { PrivateKey } from \"meta1-vision-js\";\nimport { createPaperWalletAsPDF } from \"./CreatePdfWallet\";\nimport Meta1 from \"meta1-vision-dex\";\nimport \"./style.css\";\n\nexport default function PaperWalletLogin({ portfolioReceiver, accountName }) {\n  const [account, setAccount] = useState(localStorage.getItem(\"login\") || accountName);\n  const [password, setPassword] = useState(\"\");\n  const [readyToCreate, setReadyToCreate] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(true);\n  const [check, setCheck] = useState(false);\n  const debouncedAccount = useDebounce(account, 500);\n  useEffect(() => {\n    if (account?.length > 0) {\n      async function fetchAccount(debouncedAccount) {\n        // Сделать запрос к АП\n        try {\n          await portfolioReceiver.fetch(debouncedAccount);\n          setAccountChecked(true);\n        } catch (e) {\n          setAccountChecked(false);\n        }\n      }\n\n      if (debouncedAccount) {\n        fetchAccount(debouncedAccount);\n      } else {\n        setAccountChecked(false);\n      }\n    }\n  }, [debouncedAccount, account]);\n\n  // getting the privateKey\n  const getPrivateKey = (password) => PrivateKey.fromSeed(password).toWif();\n\n  const handleSubmit = () => {\n    setReadyToCreate(true);\n  };\n\n  // Generate owner, memo and active Key\n  let { privKey: owner_private } = generateKeyFromPassword(\n    account,\n    \"owner\",\n    password\n  );\n  let { privKey: active_private } = generateKeyFromPassword(\n    account,\n    \"active\",\n    password\n  );\n  let { privKey: memo_private } = generateKeyFromPassword(\n    account,\n    \"memo\",\n    password\n  );\n\n  const handleCreatePaperWallet = async () => {\n    try {\n      await Meta1.login(localStorage.getItem(\"login\"), password);\n      createPaperWalletAsPDF(\n        localStorage.getItem(\"login\"),\n        owner_private,\n        active_private,\n        memo_private\n      );\n    } catch (e) {\n      setCheck(true);\n    }\n  };\n\n  return (\n    <div className=\"login-width\">\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Login With\n          </label>\n          <input disabled value={\"Account Name (Cloud Wallet)\"} />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Account Name\n          </label>\n          <input\n            value={localStorage.getItem(\"login\") || accountName}\n            disabled\n            placeholder={\"Account Name\"}\n          />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          {check !== false && <p style={{ color: \"red\" }}>Invalid Password</p>}\n        </FormField>\n        <Button\n          color=\"yellow\"\n          type=\"submit\"\n          fluid\n          onClick={handleCreatePaperWallet}\n          disabled={!password}\n        >\n          {\" \"}\n          Create Paper Wallet\n        </Button>\n      </Form>\n    </div>\n  );\n}\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js",["282","283","284","285"],"import { useQuery } from \"react-query\";\nimport Meta1 from \"meta1-vision-dex\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport Paper from \"@mui/material/Paper\";\nimport { getAsset, getFullName } from \"./cryptoChooser\";\nimport getHistory from \"../../lib/fetchHistory\";\nimport { removeExponent } from \"../../utils/commonFunction\";\n\nexport const OrdersTable = (props) => {\n  const { column, direction, assets, account } = props;\n\n  const { data, isLoading, error } = useQuery(\"history\", getHistory, {\n    refetchInterval: 1500,\n  });\n\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.common.black,\n      fontWeight: 600,\n      fontSize: 15,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n      padding: 8,\n      color: \"#240000\",\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    \"&:last-child td, &:last-child th\": {\n      border: 0,\n    },\n  }));\n\n  if (isLoading) return <MetaLoader size={\"small\"} />;\n\n  return (\n    <>\n      <TableContainer style={{ overflow: \"auto\" }} component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow style={{ display: \"table-row\" }}>\n              <StyledTableCell\n                sorted={column === \"id\" ? direction : null}\n                onClick={() => {}}\n                align=\"left\"\n              >\n                Assets\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">Type</StyledTableCell>\n              <StyledTableCell align=\"center\">\n                Sender / Receiver\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">Volume</StyledTableCell>\n              <StyledTableCell align=\"left\">Status</StyledTableCell>\n              <StyledTableCell align=\"left\">Time</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.map((el, index) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell\n                  component=\"th\"\n                  style={{ width: \"20%\" }}\n                  scope=\"row\"\n                >\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                    }}\n                  >\n                    {getAsset(el.asset.abbr)}\n                    <div style={{ marginLeft: \".5rem\" }}>\n                      <p style={{ margin: 0, fontSize: \"1rem\" }}>\n                        {el.asset.abbr}\n                      </p>\n                      <p style={{ margin: 0, fontSize: \".7rem\" }}>\n                        {getFullName(el.asset.abbr)}\n                      </p>\n                    </div>\n                  </div>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.type}</h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <h6 style={{ margin: \"0\" }}>{el.usersData}</h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <h6 style={{ margin: \"0\" }}>\n                    <strong>{removeExponent(Number(el.volume))}</strong>\n                  </h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6\n                    style={\n                      el.status === \"Done\"\n                        ? { margin: \"0\", color: \"#00aa08\" }\n                        : { margin: \"0\", color: \"rgb(248, 0, 0)\" }\n                    }\n                  >\n                    {el.status}\n                  </h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.time}</h6>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Footer/Footer.js",["286"],"import * as React from \"react\";\nimport styles from \"./Footer.module.scss\";\n\nconst Footer = (props) => {\n  return (\n    <>\n      <div\n        className=\"modal fade\"\n        id=\"terms\"\n        tabIndex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <h3\n                  style={{ marginBottom: \".4rem\" }}\n                  className=\"modal-title\"\n                  id=\"exampleModalLabel\"\n                >\n                  META Wallet <span style={{ color: \"#fdc000\" }}>Creation</span>\n                </h3>\n                <span>\n                  The META1 Coin Digital Wallet can be created and accessed from\n                  your meta1.io Dashboard account OR on meta-exchange.io.\n                </span>\n              </div>\n              <button\n                style={{ marginBottom: \"3rem\" }}\n                type=\"button\"\n                className=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              />\n            </div>\n            <div className={styles.modalBody + \" modal-body\"}>\n              <h4 style={{ marginLeft: \"1.2rem\", marginBottom: \"1rem\" }}>\n                GET STARTED: Create a META Lite Wallet on meta1.io Dashboard\n              </h4>\n              <ol>\n                <li>\n                  <strong>Click</strong> the{\" \"}\n                  <strong>White ‘Create META Wallet’</strong> button to start\n                  the process.\n                </li>\n                <li>\n                  <strong>Fill in your information.</strong> Some fields may\n                  already be auto-filled. Make sure the fields are filled in\n                  properly. You may need to clear the fields and re-enter\n                  correctly.\n                </li>\n                <li>\n                  <strong>Account Box</strong> – Create your{\" \"}\n                  <strong>wallet name</strong>\n                  Note: the ‘Wallet Account Name’ you choose{\" \"}\n                  <strong>is visible</strong> on the meta-exchange.io platform.\n                  <strong>For optimum security</strong>, avoid using your name\n                  or personal information as a part of your META Wallet Account\n                  name (do not use an email address or your personal name. Your\n                  META Wallet Account Name must contain from 4 to 63 characters\n                  and must consist of a combination of lowercase Latin letters,\n                  dashes, or numbers. (No capital letters, blank spaces, @, +,\n                  !, nor any other non- number/letter characters except a dash)\n                </li>\n                <li>\n                  <strong>\n                    Copy the Generated Password / Passphrase (52 characters)\n                  </strong>\n                  <strong>Do NOT create your own password.</strong> You must use\n                  the auto generated password and properly paste it into the\n                  confirm password field; You can click the small clipboard\n                  under the ‘generated’ password field (lower right side). Be\n                  sure to properly record and secure both the password ‘KEY’ and\n                  account name in a safe location.\n                </li>\n                <li>\n                  <strong>\n                    PASTE password phrase into the confirmation box below.\n                  </strong>\n                </li>\n                <li>\n                  <strong>Click Submit</strong>\n                </li>\n                <li>\n                  <strong>Confirm and check off ALL 4 Boxes</strong> to\n                  acknowledge you understand about ‘SAVING the Key in a safe\n                  place\n                </li>\n                <li>\n                  <strong>Click Submit</strong>\n                </li>\n                <li>\n                  Your wallet will now be created, and it will say it is{\" \"}\n                  <strong>‘LINKED’</strong> at the top of the page.\n                </li>\n              </ol>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                Once you have set up your wallet correctly, and if you have{\" \"}\n                <strong>Ready to Claim</strong> certificates under the{\" \"}\n                <strong>‘Coin Certificate Tab’</strong> they will change to{\" \"}\n                <strong>Receive and Accept.</strong>\n              </div>\n              <h4 style={{ margin: \"1rem 1.2rem\" }}>\n                LOADING META 1 COINS INTO YOUR WALLET\n              </h4>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                When you are ready to receive your coins, click on the{\" \"}\n                <strong>Receive and Accept</strong> button and confirm you want\n                to accept them into your wallet. Look on the META Lite wallet\n                tab to see the newly loaded coins.\n              </div>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                The META Lite Wallet has the basic essential functionality of\n                the META Wallet (accessible on meta-exchange.io). The two\n                versions access the same account data on the META Blockchain.\n                Nothing is compromised including speed and transactional\n                integrity. Many Coin holders will find it easier to work from\n                the meta1.io Dashboard. But keep in mind that META Exchange is a\n                powerful leading edge tool with many features and advanced\n                functionality.\n              </div>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                Your META Wallet can be used for several crypto currencies\n                (select “Show All balances” in the META Lite Wallet section for\n                a complete list).\n              </div>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                <strong>CREATE MULTIPLE WALLETS</strong> - You can create more\n                than one META Wallet.\n              </div>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                First ‘unlink’ your active META Wallet before creating a new\n                one. - Click the word ‘here’ in the phrase, “To unlink your\n                account, click here”, to unlink your wallet. Click the{\" \"}\n                <strong>‘Create META Wallet’</strong> button to create an\n                additional wallet.\n              </div>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                You can switch from one wallet to another by using the{\" \"}\n                <strong>‘unlink’</strong> feature and then entering your\n                additional wallet name and clicking the ‘Link META Wallet’\n                button.\n              </div>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                And as a general security measure, always double check that you\n                are on an official META 1 website.\n              </div>\n              <div style={{ margin: \"1rem 1.2rem\" }}>\n                <strong>\n                  And as a general security measure, always double check that\n                  you are on an official META 1 website.\n                </strong>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"modal fade\"\n        id=\"video\"\n        tabIndex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <div>\n                <h3\n                  style={{ marginLeft: \"1rem\" }}\n                  className=\"modal-title\"\n                  id=\"exampleModalLabel\"\n                >\n                  META Wallet{\" \"}\n                  <span style={{ color: \"#fdc000\" }}>Tutorial Video</span>\n                </h3>\n              </div>\n              <button\n                style={{ marginBottom: \"3rem\" }}\n                type=\"button\"\n                className=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              />\n            </div>\n            <div className={\"modal-body\"} style={{ margin: \"0 auto\" }}>\n              <iframe\n                title=\"vimeo-player\"\n                src=\"https://player.vimeo.com/video/693848928?h=31b02d1eee\"\n                width=\"750\"\n                height=\"450\"\n                frameBorder=\"0\"\n                allowFullScreen\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"modal fade\"\n        id=\"termsCond\"\n        tabIndex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n          <div className=\"modal-content\">\n            <div\n              className=\"modal-header\"\n              style={{ display: \"block\", textAlign: \"center\" }}\n            >\n              <button\n                type=\"button\"\n                style={{ margin: \"0 0 0 97%\" }}\n                className=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              />\n              <h2 style={{ margin: \"0\", fontSize: \"2.5rem\", color: \"#000\" }}>\n                WELCOME TO <span style={{ color: \"#FFC000\" }}>META1COIN.VISION</span>\n              </h2>\n              <h3 style={{ fontSize: \"1.7rem\", fontWeight: \"500\" }}>\n                By Using The <span style={{ color: \"#FFC000\" }}>META1COIN.Vision</span>{\" \"}\n                Website You Are Agreeing To The{\" \"}\n                <strong style={{ fontWeight: \"700\" }}>Privacy Policy</strong>{\" \"}\n                And Website Use <strong>Terms Below.</strong>\n              </h3>\n            </div>\n            <div className={\"modal-body\"} style={{ textAlign: \"center\" }}>\n              <h4 style={{ fontSize: \"1.5rem\" }}>\n                <span style={{ color: \"#FFC000\" }}>Meta 1 Coin</span> Trust\n                Privacy Statements\n              </h4>\n              <p style={{ fontSize: \"1rem\" }}>\n                This website (META1Coin.vision, META1Coin.Com) and all META 1 COIN TRUST\n                business are private, protected by the privacy act of 1974.\n                Title 5 U.S.C. 552(a), the fourth and fifth Amendments of the\n                Constitution for the united States of America, the common law\n                privacy rights available in the united States of America and\n                every other applicable jurisdiction.\n              </p>\n              <p style={{ fontSize: \"1rem\" }}>\n                The only participants of META 1 Coin Trust and the named\n                websites are for Live Natural Man and Women, flesh-and-blood\n                Almighty God-created private Humans sui juris sentient being;\n                and an Ambassador of God Almighty Domiciled in the ARIZONA\n                Republic and on religious sojourn through the UNITED STATES;\n                One, who is as a \"Non-resident alien\" as defined within 26\n                U.S.C. 7701(b)(1)(B)], []sic, in regards the UNITED STATES [28\n                U.S.C. (A); U.C.C. 9-307(h)] with express, explicit, irrevocable\n                reservation of all natural God-given &amp; unalienable Rights;\n                including but not limited by F.S.I.A. without prejudice U.C.C.\n                1-207;1-308, U.C.C. 1-103.6 (Anderson's UCC) reserved ab initio,\n                nunc pro tunc:\n              </p>\n              <p style={{ fontSize: \"1rem\" }}>\n                By accepting to the following terms, you agree to a\n                Non-Disclosure Agreement with META 1 Coin TRUST to operate this\n                commercial transaction in the Private.\n              </p>\n              <p style={{ fontSize: \"1rem\" }}>\n                * If you need clarification regarding Private transactions and\n                status, please contact private@meta1.io\n              </p>\n              <h3\n                style={{\n                  background: \"#FFC000\",\n                  padding: \"1rem 0\",\n                  color: \"#fff\",\n                  fontSize: \"1.5rem\",\n                }}\n                className=\"notice-heading\"\n              >\n                Notice\n              </h3>\n              <p style={{ fontSize: \"1rem\" }}>\n                BE WARNED, NOTICED, AND ADVISED that in addition to the\n                constitutional limits on governmental authority included in the\n                “Constitution for the united States of America”, the Honorable\n                “Bill of Rights”, and/or the “Constitution of the State of\n                ARIZONA”, the Undersigned relies upon the rights and defenses\n                guaranteed under Uniform Commercial Code(s), common equity law,\n                laws of admiralty, and commercial liens and levies pursuant, but\n                not limited to, Title 42 U.S.C.A.(Civil Rights), Title 18\n                U.S.C.A. (Criminal Codes), Title 28 U.S.C.A. (Civil Codes), to\n                which you are bound by office and oath, the “Constitution of the\n                State of ARIZONA”, and ARIZONA penal codes, in as much as they\n                are in compliance with the “Constitution for the united States\n                of America”, Bill of Rights, and/or the “Constitution of the\n                State of ARIZONA”, as applicable. There can be no violation of\n                any of these laws unless there is a victim consisting of a\n                natural flesh and blood man or woman who has been injured. When\n                there is no victim, there is no crime committed or law broken.\n              </p>\n              <p style={{ fontSize: \"1rem\" }}>\n                Remember in taking a solemn binding oath(s) to protect and\n                defend the original Constitution for the united States of\n                America circa and/or the Constitution of the State of ARIZONA\n                against all enemies, foreign and domestic. Violation(s) of said\n                oath(s) is perjury, being a bad-faith doctrine by constructive\n                treason and immoral dishonor. The Undersigned accepts said\n                Oath(s) of Office that you have sworn to uphold.\n              </p>\n              <p style={{ fontSize: \"1rem\" }}>\n                This legal and timely notice, declaration, and demand is prima\n                facie evidence of sufficient Notice of Grace. The terms and\n                conditions of this presentment agreement are a quasi-contract\n                under the Uniform Commercial Code and Fair Debt Collections Act.\n                These terms and conditions are not subject to any or all\n                immunities that you may claim, should you in any way violate The\n                Undersigned’s rights or allow violations by others. Your\n                corporate commercial acts against The Undersigned or The\n                Undersigned’s own and your failures to act on behalf of same,\n                where an obligation to act or not to act exists, is ultra vires\n                and injurious by willful and gross negligence.\n              </p>\n              <p style={{ fontSize: \"1rem\" }}>\n                The liability is upon you, and/or your superior, and upon,\n                including any and all local, state, regional, federal,\n                multijurisdictional, international, and/or corporate agencies,\n                and/or persons representing or attached to the foregoing,\n                involved directly or indirectly with you via any nexus acting\n                with you; and said liability shall be satisfied jointly and/or\n                severally at The Undersigned’s discretion.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className={styles.container}>\n        <div className={styles.mainDiv}>\n          <ul>\n            <li\n              onClick={() => {\n                window.open(process.env.REACT_APP_WALLET_FOOTER_HREF);\n              }}\n            >\n              <span>Home</span>\n            </li>\n            <li\n              onClick={() => {\n                window.open(`${process.env.REACT_APP_WALLET_FOOTER_HREF}/meta1-contact`);\n              }}\n            >\n              <span>Contact Us</span>\n            </li>\n            <li\n              onClick={() => {\n                window.open(`${process.env.REACT_APP_WALLET_FOOTER_SUPPORT_HREF}`);\n              }}\n            >\n              <span>Support</span>\n            </li>\n            <li\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#termsCond\"\n              style={{\n                width: \"26rem\",\n                textAlign: \"left\",\n                paddingLeft: \".7rem\",\n              }}\n            >\n              <span>Terms & Conditions & Privacy</span>\n            </li>\n          </ul>\n        </div>\n        <div style={{ padding: \".9rem 0 .9rem 3rem\", width: \"13rem\" }}>\n          <span style={{ fontSize: \".7rem\" }}>Copyright © 2022 META 1</span>\n        </div>\n      </div>\n    </>\n  );\n\n\n    return (\n        <>\n            <div className=\"modal fade\" id=\"terms\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <div style={{ display: 'flex', flexDirection: 'column' }}>\n                                <h3 style={{ marginBottom: '.4rem' }} className=\"modal-title\" id=\"exampleModalLabel\">META Wallet <span style={{ color: '#fdc000' }}>Creation</span></h3>\n                                <span>The META1 Coin Digital Wallet can be created and accessed from your meta1.vision Dashboard account OR on meta-exchange.io.</span>\n                            </div>\n                            <button style={{ marginBottom: '3rem' }} type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\"\n                                aria-label=\"Close\" />\n                        </div>\n                        <div className={styles.modalBody + \" modal-body\"}>\n                            <h4 style={{ marginLeft: '1.2rem', marginBottom: '1rem' }}>GET STARTED: Create a META Lite Wallet on meta1.vision Dashboard</h4>\n                            <ol>\n                                <li><strong>Click</strong> the <strong>White ‘Create META Wallet’</strong> button to start the process.</li>\n                                <li><strong>Fill in your information.</strong> Some fields may already be auto-filled. Make sure the fields are filled in properly. You may need to clear the fields and re-enter correctly.</li>\n                                <li><strong>Account Box</strong> – Create your <strong>wallet name</strong>\n                                    Note: the ‘Wallet Account Name’ you choose <strong>is visible</strong> on the meta-exchange.io platform.\n                                    <strong>For optimum security</strong>, avoid using your name or personal information as a part of your META Wallet Account name (do not use an email address or your personal name. Your META Wallet Account Name must contain from 4 to 63 characters and must consist of a combination of lowercase Latin letters, dashes, or numbers. (No capital letters, blank spaces, @, +, !, nor any other non- number/letter characters except a dash)</li>\n                                <li><strong>Copy the Generated Password / Passphrase (52 characters)</strong>\n                                    <strong>Do NOT create your own password.</strong> You must use the auto generated password and properly paste it into the confirm password field; You can click the small clipboard under the ‘generated’ password field (lower right side). Be sure to properly record and secure both the password ‘KEY’ and account name in a safe location.</li>\n                                <li><strong>PASTE password phrase into the confirmation box below.</strong></li>\n                                <li><strong>Click Submit</strong></li>\n                                <li><strong>Confirm and check off ALL 4 Boxes</strong> to acknowledge you understand about ‘SAVING the Key in a safe place</li>\n                                <li><strong>Click Submit</strong></li>\n                                <li>Your wallet will now be created, and it will say it is <strong>‘LINKED’</strong> at the top of the page.</li>\n                            </ol>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                Once you have set up your wallet correctly, and if you have <strong>Ready to Claim</strong> certificates under the <strong>‘Coin Certificate Tab’</strong> they will change to <strong>Receive and Accept.</strong>\n                            </div>\n                            <h4 style={{ margin: '1rem 1.2rem' }}>LOADING META 1 COINS INTO YOUR WALLET</h4>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                When you are ready to receive your coins, click on the <strong>Receive and Accept</strong> button and confirm you want to accept them into your wallet. Look on the META Lite wallet tab to see the newly loaded coins.\n                            </div>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                The META Lite Wallet has the basic essential functionality of the META Wallet (accessible on meta-exchange.io). The two versions access the same account data on the META Blockchain. Nothing is compromised including speed and transactional integrity. Many Coin holders will find it easier to work from the meta1.vision Dashboard. But keep in mind that META Exchange is a powerful leading edge tool with many features and advanced functionality.\n                            </div>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                Your META Wallet can be used for several crypto currencies (select “Show All balances” in the META Lite Wallet section for a complete list).\n                            </div>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                <strong>CREATE MULTIPLE WALLETS</strong> - You can create more than one META Wallet.\n                            </div>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                First ‘unlink’ your active META Wallet before creating a new one.\n                                - Click the word ‘here’ in the phrase, “To unlink your wallet, click here”, to unlink your wallet.\n                                Click the <strong>‘Create META Wallet’</strong> button to create an additional wallet.\n                            </div>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                You can switch from one wallet to another by using the <strong>‘unlink’</strong> feature and then entering your additional wallet name and clicking the ‘Link META Wallet’ button.\n                            </div>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                And as a general security measure, always double check that you are on an official META 1 website.\n                            </div>\n                            <div style={{ margin: '1rem 1.2rem' }}>\n                                <strong>And as a general security measure, always double check that you are on an official META 1 website.</strong>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"modal fade\" id=\"video\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <div>\n                                <h3 style={{ marginLeft: '1rem' }} className=\"modal-title\" id=\"exampleModalLabel\">META Wallet <span style={{ color: '#fdc000' }}>Tutorial Video</span></h3>\n                            </div>\n                            <button style={{ marginBottom: '3rem' }} type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\"\n                                aria-label=\"Close\" />\n                        </div>\n                        <div className={\"modal-body\"} style={{ margin: '0 auto' }}>\n                            <iframe title=\"vimeo-player\" src=\"https://player.vimeo.com/video/541858758?h=68f297ab7f\"\n                                width=\"750\" height=\"450\" frameBorder=\"0\" allowFullScreen />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"modal fade\" id=\"termsCond\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\" style={{ display: 'block', textAlign: 'center' }}>\n                            <button type=\"button\" style={{ margin: '0 0 0 97%' }} className=\"btn-close\" data-bs-dismiss=\"modal\"\n                                aria-label=\"Close\" />\n                            <h2 style={{ margin: '0', fontSize: '2.5rem', color: '#000' }}>WELCOME TO <span style={{ color: '#FFC000' }}>META1.VISION</span></h2>\n                            <h3 style={{ fontSize: '1.7rem', fontWeight: '500' }}>By Using The <span style={{ color: '#FFC000' }}>META1.Vision</span> Website You Are Agreeing To The <strong style={{ fontWeight: '700' }}>Privacy\n                                Policy</strong> And Website Use <strong>Terms Below.</strong></h3>\n                        </div>\n                        <div className={\"modal-body\"} style={{ textAlign: 'center' }}>\n                            <h4 style={{ fontSize: '1.5rem' }}><span style={{ color: '#FFC000' }}>Meta 1 Coin</span> Trust Privacy Statements</h4>\n                            <p style={{ fontSize: '1rem' }}>This website (META1.vision, META1Coin.Com) and all META 1 COIN TRUST business are\n                                private, protected by the privacy act of 1974. Title 5 U.S.C. 552(a), the fourth\n                                and fifth Amendments of the Constitution for the united States of America, the\n                                common law privacy rights available in the united States of America and every\n                                other applicable jurisdiction.</p>\n                            <p style={{ fontSize: '1rem' }}>The only participants of META 1 Coin Trust and the named websites are for Live\n                                Natural Man and Women, flesh-and-blood Almighty God-created private Humans sui\n                                juris sentient being; and an Ambassador of God Almighty Domiciled in the ARIZONA\n                                Republic and on religious sojourn through the UNITED STATES; One, who is as a\n                                \"Non-resident alien\" as defined within 26 U.S.C. 7701(b)(1)(B)], []sic, in\n                                regards the UNITED STATES [28 U.S.C. (A); U.C.C. 9-307(h)] with express,\n                                explicit, irrevocable reservation of all natural God-given &amp; unalienable\n                                Rights; including but not limited by F.S.I.A. without prejudice U.C.C.\n                                1-207;1-308, U.C.C. 1-103.6 (Anderson's UCC) reserved ab initio, nunc pro\n                                tunc:</p>\n                            <p style={{ fontSize: '1rem' }}>By accepting to the following terms, you agree to a Non-Disclosure Agreement with\n                                META 1 Coin TRUST to operate this commercial transaction in the Private.</p>\n                            <p style={{ fontSize: '1rem' }}>* If you need clarification regarding Private transactions and status, please\n                                contact private@meta1.vision</p>\n                            <h3 style={{ background: '#FFC000', padding: '1rem 0', color: '#fff', fontSize: '1.5rem' }} className=\"notice-heading\">Notice</h3>\n                            <p style={{ fontSize: '1rem' }}>BE WARNED, NOTICED, AND ADVISED that in addition to the constitutional limits on\n                                governmental authority included in the “Constitution for the united States of\n                                America”, the Honorable “Bill of Rights”, and/or the “Constitution of the State\n                                of ARIZONA”, the Undersigned relies upon the rights and defenses guaranteed\n                                under Uniform Commercial Code(s), common equity law, laws of admiralty, and\n                                commercial liens and levies pursuant, but not limited to, Title 42\n                                U.S.C.A.(Civil Rights), Title 18 U.S.C.A. (Criminal Codes), Title 28 U.S.C.A.\n                                (Civil Codes), to which you are bound by office and oath, the “Constitution of\n                                the State of ARIZONA”, and ARIZONA penal codes, in as much as they are in\n                                compliance with the “Constitution for the united States of America”, Bill of\n                                Rights, and/or the “Constitution of the State of ARIZONA”, as applicable. There\n                                can be no violation of any of these laws unless there is a victim consisting of\n                                a natural flesh and blood man or woman who has been injured. When there is no\n                                victim, there is no crime committed or law broken.</p>\n                            <p style={{ fontSize: '1rem' }}>Remember in taking a solemn binding oath(s) to protect and defend the original\n                                Constitution for the united States of America circa and/or the Constitution of\n                                the State of ARIZONA against all enemies, foreign and domestic. Violation(s) of\n                                said oath(s) is perjury, being a bad-faith doctrine by constructive treason and\n                                immoral dishonor. The Undersigned accepts said Oath(s) of Office that you have\n                                sworn to uphold.</p>\n                            <p style={{ fontSize: '1rem' }}>This legal and timely notice, declaration, and demand is prima facie evidence of\n                                sufficient Notice of Grace. The terms and conditions of this presentment\n                                agreement are a quasi-contract under the Uniform Commercial Code and Fair Debt\n                                Collections Act. These terms and conditions are not subject to any or all\n                                immunities that you may claim, should you in any way violate The Undersigned’s\n                                rights or allow violations by others. Your corporate commercial acts against The\n                                Undersigned or The Undersigned’s own and your failures to act on behalf of same,\n                                where an obligation to act or not to act exists, is ultra vires and injurious by\n                                willful and gross negligence.</p>\n                            <p style={{ fontSize: '1rem' }}>The liability is upon you, and/or your superior, and upon, including any and all\n                                local, state, regional, federal, multijurisdictional, international, and/or\n                                corporate agencies, and/or persons representing or attached to the foregoing,\n                                involved directly or indirectly with you via any nexus acting with you; and said\n                                liability shall be satisfied jointly and/or severally at The Undersigned’s\n                                discretion.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={styles.container}>\n                <div className={styles.mainDiv}>\n                    <ul>\n                        <li onClick={() => { window.open('https://meta1.vision') }}><span>Home</span></li>\n                        <li onClick={() => { window.open('https://meta1.vision/META1Contact') }}><span>Contact Us</span></li>\n                        <li onClick={() => { window.open('https://support.meta1.vision') }}><span>Support</span></li>\n                        <li data-bs-toggle=\"modal\" data-bs-target=\"#termsCond\" style={{ width: '26rem', textAlign: 'left', paddingLeft: '.7rem' }}><span>Terms & Conditions & Privacy</span></li>\n                    </ul>\n                </div>\n                <div style={{ padding: '.9rem 0 .9rem 3rem', width: '13rem' }}>\n                    <span style={{ fontSize: '.7rem' }}>Copyright © 2022 META 1</span>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Footer\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/UI/loader/Loader.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/index.js",["287","288","289","290","291","292","293","294","295","296"],"import MetaLoader from \"../../UI/loader/Loader\";\n// import ReactTooltip from 'react-tooltip'\nimport React, { useState, useEffect } from \"react\";\nimport getAllByOne from \"../requests/compareCrypto\";\nimport Switch from \"@mui/material/Switch\";\nimport fiatIcon from \"../../images/4292332.png\";\nimport { Loader } from \"semantic-ui-react\";\nimport \"./Wallet.css\";\nimport Meta1 from \"meta1-vision-dex\";\nimport { useQuery } from \"react-query\";\n\nimport PortfolioTable from \"./PortfolioTable\";\n\n// Трансферы между мета1 аккаунтами\n// вместо BitShares ставь Meta1\n// https://gist.github.com/bogdyak/e0172e95\"large\"db21f41ccd98c67dfaa7\n\n// Вывод на внешний аккаунт\n// вместо BitShares ставь Meta1\n// https://gist.github.com/bogdyak/087bf94c61fffc947d94e4dbbd24d692\n// обрати внимание что для EOS и XLM нужен мемо это типо доп айдишника\n\n// сначала надо залогиниться в сдк\n\nfunction Wallet(props) {\n  const {\n    portfolio,\n    onDepositClick,\n    onWithdrawClick,\n    onAssetSelect,\n    onSendClick,\n    assets,\n    accountName,\n    portfolioReceiver,\n    setFullPorfolio,\n    userCurrency,\n  } = props;\n  const [currentCurrency, setCurrentCurrency] = useState(0);\n  const [orders, setOrders] = useState(null);\n  const [hideZero, setHideZero] = useState(true);\n  const [totalChange, setTotalChange] = useState(\"0\");\n  const [totalSum, setTotalSum] = useState(0);\n  const [loader, setLoader] = useState(true);\n  const [check, setCheck] = useState(false);\n  const [isCurrencySelected, setIsCurrencySelected] = useState('')\n  const { data, isLoading, error } = useQuery(\"cryptos\", getDatas);\n\n  async function getDatas() {\n    const cryptoArray = [\"META1\", \"ETH\", \"BTC\", \"BNB\", \"EOS\", \"XLM\", \"LTC\"];\n    let fetchedCryptos = {};\n    for (let i = 0; i < cryptoArray.length; i++) {\n      fetchedCryptos[cryptoArray[i]] = await Meta1.ticker(\n        \"USDT\",\n        cryptoArray[i]\n      );\n    }\n    fetchedCryptos[\"USDT\"] = { latest: 1, percent_change: 0 };\n    return fetchedCryptos;\n  }\n\n  useEffect(() => {\n    function check() {\n      if (!check) {\n        setCheck(true);\n      }\n    }\n    check();\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoader(false);\n    }, 1500);\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      document.getElementById(\"mainBlock\").style.height = \"92vh\";\n    }, 50);\n  }, []);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const openDrop = () => {\n    document.getElementById(\"switchContainer\").style.display === \"none\"\n      ? (document.getElementById(\"switchContainer\").style.display = \"block\")\n      : (document.getElementById(\"switchContainer\").style.display = \"none\");\n  };\n\n  function currencyValue(datas) {\n    let assetValue = data[datas.name].latest;\n    if (datas.name === \"META1\") {\n      return (data[\"META1\"].latest * datas?.qty).toFixed(datas.pre);\n    } else if (assetValue * datas?.qty === 0) {\n      return \"0.00\";\n    } else {\n      return (assetValue * datas?.qty).toFixed(datas.pre);\n    }\n  }\n\n  useEffect(() => {\n    if (data && portfolio) {\n      let summTik = 0,\n        percentage = 0,\n        totSum = 0,\n        lastChange = 0;\n      for (let i of portfolio) {\n        if (Number(i.qty) > 0) {\n          percentage = Number(data[i.name].percent_change);\n          summTik = Number(currencyValue(i));\n          lastChange += ((100 - percentage) * summTik) / 100;\n          totSum += summTik;\n        }\n      }\n      let ch = Number(100 - (lastChange * 100) / totSum);\n      setTotalSum(totSum.toFixed(2));\n      if (totalSum == 0) {\n        setTotalChange(\"0.00\");\n      } else {\n        setTotalChange(ch.toFixed(2).toString());\n      }\n    }\n  }, [portfolio, data]);\n  const changeCurrencyToFiat = async () => {\n    document.getElementById(\"switchContainer\").style.display = \"none\";\n    setCurrentCurrency(currentCurrency + 1);\n    document.getElementById(\"forCheck\").innerText = userCurrency.split(\" \")[1];\n  };\n\n  const changeCryptoCurrency = async (e) => {\n    let chosen = document.getElementById(\"forCheck\").innerText;\n    document.getElementById(\"switchContainer\").style.display = \"none\";\n    let crypto = null;\n    switch (e.target.nodeName) {\n      case \"LI\":\n        crypto = e.target.outerText;\n        break;\n      case \"SPAN\":\n        crypto = e.target.outerText;\n        break;\n      case \"IMG\":\n        crypto = e.target.nextSibling.outerText;\n        break;\n      default:\n        break;\n    }\n    if (crypto !== \"META1\") {\n      if (document.getElementById(\"forCheck\").innerText === \"META1\") {\n        chosen = userCurrency.split(\" \")[1];\n        let data = await getAllByOne('USDT', crypto);\n        sessionStorage.setItem('currencyResult', JSON.stringify(data))\n        setCurrentCurrency(currentCurrency + 1);\n      } else {\n        let data = await getAllByOne('USDT', crypto);\n        sessionStorage.setItem('currencyResult', JSON.stringify(data))\n      }\n    } else {\n      setCurrentCurrency(currentCurrency + 1);\n      let crypto = \"META1\";\n    }\n    setIsCurrencySelected(crypto)\n  };\n\n  function Portfolio(props) {\n    if (portfolio == null || portfolio.length === 0)\n      return <MetaLoader size={\"small\"} />;\n    const filteredPortfolio = hideZero\n      ? portfolio.filter((p) => p.qty > 0)\n      : portfolio;\n\n    return (\n      <PortfolioTable\n        assets={assets}\n        history={orders}\n        filteredPortfolio={filteredPortfolio}\n        onSendClick={onSendClick}\n        onDepositClick={onDepositClick}\n        onWithdrawClick={onWithdrawClick}\n        onAssetSelect={props.onAssetSelect}\n        onSetHideZero={setHideZero}\n        hideZero={hideZero}\n        data={data}\n        isLoading={isLoading}\n        userCurrency={props.userCurrency}\n        isCurrencySelected={isCurrencySelected}\n      />\n    );\n  }\n  return (\n    <>\n      <div style={{ marginLeft: \"3rem\" }} className={\"totalSumBlock\"}>\n        <h4\n          style={{ color: \"#505361\", fontSize: \".9rem\", marginBottom: \".3rem\" }}\n        >\n          Portfolio Balance\n        </h4>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div\n            className={\"blockSumAndPercentage\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <h2 style={{ color: \"#FFC000\", fontSize: \"2rem\", margin: \"0\" }}>\n              <strong className={\"adaptAmountMain\"} style={!isMobile ? { fontSize: '25px' } : { fontSize: '16px !important' }}>\n                {loader && isLoading ? (\n                  <Loader size=\"mini\" active inline=\"centered\" />\n                ) : (\n                  userCurrency.split(\" \")[0] +\n                  \" \" +\n                  (totalSum * userCurrency.split(\" \")[2]).toFixed(2)\n                )}\n              </strong>\n            </h2>\n            <h5\n              style={{\n                margin: \".3rem 0 .5rem 1rem\",\n                fontSize: \".8rem\",\n                height: \"55%\",\n                padding: \".3rem\",\n                borderRadius: \"3px\",\n                boxShadow: \"0 4px 9px 5px rgba(0,0,0,.11)\",\n              }}\n              className={Number(totalChange) > 0 ? \"plusFirst\" : \"minusFirst\"}\n            >\n              {Number(totalChange) > 0 ? (\n                <i\n                  className=\"far fa-arrow-up fa-xs\"\n                  style={{ color: \"#fff\", marginRight: \".2rem\" }}\n                />\n              ) : (\n                <i\n                  className=\"far fa-arrow-down fa-xs \"\n                  style={{ color: \"#fff\", marginRight: \".2rem\" }}\n                />\n              )}\n              {loader && isLoading ? null : totalChange.replace(\"-\", \"\")} %\n            </h5>\n          </div>\n          <div className=\"rightSideBlock\">\n            <div className={\"blockChoose\"}>\n              <noscript id={\"forCheck\"}>{userCurrency.split(\" \")[1]}</noscript>\n              <div className={\"blockChoosen\"} onClick={openDrop}>\n                <span style={{ textAlign: \"center\", paddingRight: '2px' }}>\n                  Select currency to display\n                </span>\n                <i\n                  className=\"fas fa-chevron-down\"\n                  style={{ marginTop: \".2rem\" }}\n                />\n              </div>\n              <div\n                id={\"switchContainer\"}\n                style={{ position: \"relative\", display: \"none\" }}\n              >\n                <ul className={\"chooseContainer\"}>\n                  <li\n                    className={\"choosenContainerItem\"}\n                    onClick={changeCurrencyToFiat}\n                  >\n                    <img\n                      src={fiatIcon}\n                      alt=\"cryptoImage\"\n                      className=\"imgContainer\"\n                    />\n                    <span className=\"spanDrop\">\n                      Fiat ({userCurrency.split(\" \")[0]})\n                    </span>\n                  </li>\n                  {assets.map((el, index) => (\n                    <li\n                      onClick={changeCryptoCurrency}\n                      className={\"choosenContainerItem\"}\n                      key={index}\n                    >\n                      <img\n                        src={el.image}\n                        style={{ width: \"35px\" }}\n                        alt=\"cryptoImage\"\n                        className=\"imgContainer\"\n                      />\n                      <span className=\"spanDrop\">{el.symbol}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n            <hr\n              style={\n                isMobile\n                  ? { display: \"block\", width: \"100%\" }\n                  : { display: \"none\", width: \"100%\" }\n              }\n            />\n            <div className={\"switcher\"} style={{ paddingTop: \"1.4rem\" }}>\n              <span>Hide Zero Balances</span>\n              <Switch\n                className={\"switch\"}\n                checked={hideZero}\n                onChange={() => {\n                  setHideZero(!hideZero);\n                }}\n                inputProps={{ \"aria-label\": \"controlled\" }}\n                color={\"warning\"}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"portfolio-table\">\n        <div className=\"portfolio-table\">\n          <Portfolio\n            onAssetSelect={onAssetSelect}\n            userCurrency={userCurrency}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Wallet;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SignUpForm/index.js",["297","298"],"import React, { useState } from \"react\";\nimport { UserInformationForm } from \"./UserInformationForm.js\";\nimport SubmitForm from \"./SubmitForm.js\";\nimport createAccountWithPassword from \"../../lib/createAccountWithPassword.js\";\nimport { Button, Grid, Icon } from \"semantic-ui-react\";\nimport RightSideHelpMenuFirstType from \"../RightSideHelpMenuFirstType/RightSideHelpMenuFirstType\";\n\nimport \"./SignUpForm.css\";\n\nexport default function SignUpForm(props) {\n  const {\n    onRegistration,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    portfolio,\n  } = props;\n  const [accountName, setAccountName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [step, setStep] = useState(1);\n\n  const stepFirstSubmit = (\n    accName,\n    pass,\n    newEmail,\n    newPhone,\n    newLastName,\n    newFirstName\n  ) => {\n    setAccountName(accName);\n    setFirstName(newFirstName);\n    setPassword(pass);\n    setEmail(newEmail);\n    setLastName(newLastName);\n    setPhone(newPhone);\n    setStep(2);\n  };\n\n  const stepSecondSubmit = async () => {\n    try {\n      await createAccountWithPassword(\n        accountName,\n        password,\n        false,\n        \"\",\n        1,\n        \"\",\n        phone,\n        email,\n        lastName,\n        firstName\n      );\n      localStorage.setItem(\"login\", accountName);\n      onRegistration(accountName, password, email);\n    } catch (e) {}\n  };\n\n  const stepForm =\n    step === 1 ? (\n      <UserInformationForm\n        {...props}\n        onSubmit={stepFirstSubmit}\n        accountName={accountName}\n        lastName={lastName}\n        firstName={firstName}\n        password={password}\n        email={email}\n        phone={phone}\n      />\n    ) : (\n      <SubmitForm onSubmit={stepSecondSubmit} password={password} />\n    );\n\n  return (\n    <>\n      <div>\n        <div\n          style={{\n            background: \"#fff\",\n            width: \"100%\",\n            height: \"3.7rem\",\n            padding: \"1.1rem 2rem\",\n            boxShadow: \"0 9px 10px 0 rgba(0,0,0,0.11)\",\n            fontSize: \"1.3rem\",\n            fontWeight: \"bold\",\n          }}\n        >\n          <span style={{ color: \"#240000\" }}>META Lite Wallet</span>\n        </div>\n        <div className={\"createWalletForm\"}>\n          <div className={\"justFlexAndDirect\"}>\n            <div className={\"regForm\"}>\n              <Button\n                onClick={step === 1 ? props.onBackClick : () => setStep(1)}\n                style={{ color: \"#fdc000\", fontSize: \".9rem\" }}\n                labelPosition=\"left\"\n              >\n                <i\n                  className=\"fal fa-arrow-left\"\n                  style={{ marginRight: \".5rem\" }}\n                />\n                <span\n                  style={{\n                    borderBottom: \"1px solid #fdc000\",\n                    color: \"#fdc000\",\n                  }}\n                >\n                  Back\n                </span>\n              </Button>\n              {stepForm}\n            </div>\n            <div className={\"adaptThing\"}>\n              <RightSideHelpMenuFirstType\n                onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n                onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n                portfolio={portfolio}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/DepositForm/index.js",["299","300","301","302","303","304","305"],"import { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Message,\n  Modal,\n  Icon,\n  Button,\n  Grid,\n  Header,\n  Input,\n} from \"semantic-ui-react\";\nimport QRCode from \"react-qr-code\";\n\nimport \"./style.css\";\n\nexport default function DepositForm(props) {\n  const { fetcher, account, onBackClick, asset } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [address, setAddress] = useState(props.address);\n  const canDeposit = address.length > 0;\n  useEffect(() => {\n    async function fetchAddress(asset) {\n      try {\n        setIsLoading(true);\n        const fetchedAsset = asset === \"USDT\" ? \"eth\" : asset;\n        const resp = await fetcher(fetchedAsset);\n        const body = await resp.body.getReader().read();\n        if (resp.status === 200) {\n          const addr = JSON.parse(\n            new TextDecoder(\"utf-8\").decode(body.value)\n          ).address;\n          setAddress(addr);\n        }\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n      }\n    }\n\n    if (asset !== undefined) fetchAddress(asset);\n  }, [asset]);\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Deposit</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n\n        <div className=\"qr-section\">\n          <div\n            style={{\n              background: \"#F0F1F4\",\n              padding: \"1rem\",\n              width: \"96%\",\n              margin: \"0 auto\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <span\n              style={{\n                color: \"#000\",\n                fontWeight: \"bold\",\n                fontSize: \".8rem\",\n                margin: \"1rem\",\n              }}\n            >\n              DEPOSIT <span style={{ color: \"#FFC000\" }}>{asset}</span>\n            </span>\n            <div className={\"needAdaptToQR\"}>\n              {!isLoading && !canDeposit && <p> Cannot deposit </p>}\n              {!isLoading && canDeposit && (\n                <QRCode value={address} size={200} />\n              )}\n            </div>\n          </div>\n          <p\n            style={{\n              margin: \"1rem\",\n              color: \"#505361\",\n              fontWeight: \"600\",\n              fontSize: \".8rem\",\n            }}\n          >\n            Minimum deposit: 0.001 {asset} {asset.toLowerCase()==='usdt'?'(ERC20)':''}\n          </p>\n          <div>\n            {!isLoading && canDeposit && (\n              <CopyToClipboard text={address} onCopy={() => {}}>\n                <div style={{ width: \"100%\" }}>\n                  <Input\n                    style={{ width: \"100%\" }}\n                    action={{\n                      color: \"yellow\",\n                      labelPosition: \"right\",\n                      icon: \"copy\",\n                      content: \"Copy\",\n                    }}\n                    value={address}\n                  />\n                </div>\n              </CopyToClipboard>\n            )}\n          </div>\n\n          <Message\n            className={\"messageRed\"}\n            icon=\"attention\"\n            header=\"Important information\"\n            content={`Send only ${asset} ${asset.toLowerCase()==='usdt'?'ERC20':''} to this address. Sending less than 0.001 ${asset} or any other currency to this address may result in the loss of your deposit`}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/WithdrawForm/index.js",["306","307","308","309","310","311","312","313","314","315","316","317","318","319"],"\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport React, { useState, useEffect } from \"react\";\nimport Meta1 from \"meta1-vision-dex\";\nimport { PrivateKey } from \"meta1-vision-js\";\nimport {\n  Image, Modal, Button, Grid, Icon, Label, Popup\n} from \"semantic-ui-react\";\nimport Input from \"@mui/material/Input\";\nimport TextField from \"@mui/material/TextField\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport CAValidator from \"multicoin-address-validator\";\n\nimport \"./style.css\";\nimport ExchangeSelect from \"../ExchangeForm/ExchangeSelect.js\";\nimport styles from \"../ExchangeForm/ExchangeForm.module.scss\";\nimport { helpWithdrawInput, helpMax1 } from \"../../config/help\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { trim } from \"../../helpers/string\";\n\nconst WITHDRAW_ASSETS = ['ETH', 'USDT']\n\nconst MIN_WITHDRAW_AMOUNT = {\n  \"BTC\": 0.0005,\n  \"ETH\": 0.01,\n  \"LTC\": 0.001,\n  \"EOS\": 0.1,\n  \"XLM\": 0.01,\n  \"META1\": 0.02,\n  \"USDT\": 50,\n};\n\nconst WithdrawForm = (props) => {\n  const { sendEmail, account, onBackClick, userCurrency, asset } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedFrom, setSelectedFrom] = useState(props.selectedFrom);\n  const [selectedFromAmount, setSelectedFromAmount] = useState(\"\");\n  const [amountError, setAmountError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [isValidName, setIsValidName] = useState(false);\n  const [emailAddress, setEmailAddress] = useState(\"\");\n  const [isValidEmailAddress, setIsValidEmailAddress] = useState(false);\n  const [blockPrice, setBlockPrice] = useState();\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [assets, setAssets] = useState(props.assets);\n  const [options, setOptions] = useState([]);\n  const [invalidEx, setInvalidEx] = useState(false);\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [toAddress, setToAddress] = useState(\"\");\n  const [isValidAddress, setIsValidAddress] = useState(false);\n  const [isValidCurrency, setIsValidCurrency] = useState(false);\n\n  const ariaLabel = { \"aria-label\": \"description\" };\n  useEffect(() => {\n    const currentPortfolio = props.portfolio || [];\n    setAssets(props.assets);\n\n    const getBalance = (symbol) => {\n      const assetInWallet = currentPortfolio.find((el) => el.name === symbol);\n\n      return assetInWallet ? assetInWallet.qty : 0;\n    };\n\n    const newOptions = assets.map((asset) => {\n      return {\n        image: asset.image,\n        value: asset.symbol,\n        label: asset.symbol,\n        pre: asset.precision,\n        balance: getBalance(asset.symbol) || 0,\n      };\n    });\n\n    setOptions(newOptions);\n\n    if (options !== []) {\n      const from = asset\n        ? newOptions.find((el) => el.value === asset)\n        : newOptions[0];\n\n      setSelectedFrom(from);\n    } else {\n      setSelectedFrom(newOptions.find((o) => o.value === selectedFrom.value));\n    }\n  }, [props.assets, props.portfolio]);\n  useEffect(() => {\n    if (selectedFrom) {\n      changeAssetHandler(selectedFrom.value);\n    }\n  }, [selectedFrom]);\n\n  useEffect(() => {\n    if (selectedFrom && selectedFromAmount) {\n      console.log(\"@1 - \", selectedFromAmount === 0)\n      if (parseFloat(selectedFrom.balance) < parseFloat(selectedFromAmount)) {\n        setAmountError('Amount exceeded the balance.');\n      } else if (parseFloat(MIN_WITHDRAW_AMOUNT['USDT']) > parseFloat(blockPrice)) {\n        setAmountError('Amount is too small.');\n      } else {\n        setAmountError('');\n      }\n    } else {\n      setAmountError('');\n    }\n  }, [selectedFromAmount, blockPrice]);\n\n  useEffect(() => {\n    if (!name) {\n      setIsValidName(true);\n    } else if (trim(name) === '') {\n      setIsValidName(false);\n    } else {\n      setIsValidName(true);\n    }\n  }, [name]);\n\n  useEffect(() => {\n    if (emailAddress) {\n      setIsValidEmailAddress(\n        String(emailAddress).toLowerCase().match(\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        )\n      );\n    } else {\n      setIsValidEmailAddress(false);\n    }\n  }, [emailAddress]);\n\n  useEffect(() => {\n    if (selectedFrom && toAddress) {\n      if (process.env.REACT_APP_ENV === 'prod') {\n        setIsValidAddress(CAValidator.validate(toAddress, selectedFrom.value));\n      } else {\n        setIsValidAddress(\n          CAValidator.validate(toAddress, selectedFrom.value, \"testnet\")\n        );\n      }\n    }\n  }, [toAddress, selectedFrom]);\n  const changeAssetHandler = async (val) => {\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1\n        .ticker(\"USDT\", \"META1\")\n        .then((res) => setPriceForAsset(Number(res.latest).toFixed(2)));\n    }\n  };\n\n  const setAssetMax = (e) => {\n    e.preventDefault();\n    setSelectedFromAmount(selectedFrom.balance);\n    setTimeout(() => {\n      let priceForOne = (\n        Number(document.getElementById(\"inputAmount\").value) * priceForAsset\n      ).toFixed(3);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    }, 25);\n  };\n\n  const calculateUsdPriceHandler = (e) => {\n    if (e.target.value.length != 0) {\n      const priceForOne = (Number(e.target.value) * priceForAsset).toFixed(2);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    } else {\n      setBlockPrice(NaN);\n    }\n  };\n\n  const calculateCryptoPriceHandler = (e) => {\n    setBlockPrice(e.target.value);\n\n    if (e.target.value) {\n      let priceForOne = (\n        Number(e.target.value) /\n        priceForAsset /\n        Number(userCurrency.split(\" \")[2])\n      ).toFixed(selectedFrom.label === \"USDT\" ? 3 : selectedFrom.pre);\n      setSelectedFromAmount(priceForOne);\n    } else {\n      setSelectedFromAmount(e.target.value);\n    }\n  };\n\n  const onClickWithdraw = (e) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n    const emailType = \"withdraw\";\n    const emailData = {\n      accountName: props.accountName,\n      name: trim(name),\n      emailAddress: trim(emailAddress),\n      asset: selectedFrom.value,\n      amount: selectedFromAmount,\n      toAddress: trim(toAddress)\n    };\n    sendEmail(emailType, emailData)\n      .then((res) => {\n        if (res.success === 'success') {\n          setIsLoading(false);\n          alert(\"Email sent, awesome!\");\n          // Reset form inputs\n          setName('');\n          setEmailAddress('');\n          setSelectedFromAmount(NaN);\n          setBlockPrice(NaN);\n          setToAddress('');\n        } else {\n          if (res.tokenExpired) {\n            props.setTokenModalMsg(res.responseMsg);\n            props.setTokenModalOpen(true);\n            return;\n          }\n          setIsLoading(false);\n          alert(\"Oops, something went wrong. Try again\");\n        }\n      })\n  }\n\n  if (selectedFrom == null) return null;\n\n  const getAssets = (except) => options\n    .filter((asset) => WITHDRAW_ASSETS.indexOf(asset.value) > -1)\n    .filter((el) => el.value !== except);\n\n  const canWithdraw = name && isValidName &&\n    isValidEmailAddress &&\n    isValidAddress &&\n    !amountError &&\n    selectedFromAmount;\n\n  return (\n    <>\n      <div className=\"withdraw\">\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Withdraw</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n\n        {isLoading ?\n          <MetaLoader size={\"small\"} />\n          :\n          <form>\n            <label>\n              <span>Name:</span><br />\n              <TextField\n                InputProps={{ disableUnderline: true, className: 'custom-input-bg' }}\n                value={name}\n                onChange={(e) => { setName(e.target.value) }}\n                className={styles.input}\n                id=\"name-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n              {name && !isValidName &&\n                <span className=\"c-danger\">Invalid first name</span>\n              }\n            </label><br />\n            <label>\n              <span>Email Address:</span><br />\n              <TextField\n                InputProps={{ disableUnderline: true, className: 'custom-input-bg' }}\n                value={emailAddress}\n                onChange={(e) => { setEmailAddress(e.target.value) }}\n                className={styles.input}\n                id=\"emailaddress-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n              {emailAddress && !isValidEmailAddress &&\n                <span className=\"c-danger\">Invalid email address</span>\n              }\n            </label><br />\n            <label>\n              <span>META1 Wallet Name:</span>\n              <TextField\n                InputProps={{ disableUnderline: true }}\n                value={props.accountName}\n                disabled={true}\n                className={styles.input}\n                id=\"wallet-name-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n            </label><br />\n            <label>\n              <span>From Currency:</span>\n              <ExchangeSelect\n                onChange={(val) => {\n                  setSelectedFrom(val);\n                  changeAssetHandler(val.value);\n                  setSelectedFromAmount(NaN);\n                  setBlockPrice(NaN);\n                  setInvalidEx(false);\n                }}\n                options={getAssets(selectedFrom.value)}\n                selectedValue={selectedFrom}\n              />\n            </label><br />\n            <label>\n              <span>From Amount:</span>\n              <div className=\"wallet-input\">\n                <Popup\n                  content={helpWithdrawInput(selectedFrom?.value)}\n                  position=\"bottom center\"\n                  trigger={\n                    <div className={styles.inputForAmount}>\n                      <Input\n                        placeholder=\"Amount crypto\"\n                        value={selectedFromAmount}\n                        type={\"number\"}\n                        onChange={(e) => {\n                          if (\n                            e.target.value.length < 11 &&\n                            /[-+]?[0-9]*\\.?[0-9]*/.test(\n                              e.target.value\n                            ) &&\n                            Number(e.target.value) >= 0\n                          ) {\n                            setSelectedFromAmount(e.target.value);\n                            calculateUsdPriceHandler(e);\n                            setClickedInputs(true);\n                          }\n                        }}\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            {selectedFrom.label}\n                          </InputAdornment>\n                        }\n                        inputProps={ariaLabel}\n                        id={\"inputAmount\"}\n                        disabled={invalidEx}\n                        min=\"0\"\n                        inputMode=\"numeric\"\n                        pattern=\"\\d*\"\n                      />\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"space-between\",\n                          marginTop: \".1rem\",\n                          fontSize: \"1rem\",\n                          color: \"#505361\",\n                        }}\n                      >\n                        <input\n                          className={styles.inputDollars}\n                          onChange={(e) => {\n                            if (\n                              e.target.value.length < 11 &&\n                              /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                e.target.value\n                              ) &&\n                              Number(e.target.value) >= 0\n                            ) {\n                              calculateCryptoPriceHandler(e);\n                              setClickedInputs(true);\n                            }\n                          }}\n                          min=\"0\"\n                          inputMode=\"numeric\"\n                          pattern=\"\\d*\"\n                          type={\"number\"}\n                          placeholder={`Amount ${userCurrency.split(\" \")[1]\n                            }`}\n                          disabled={invalidEx}\n                          style={\n                            invalidEx ? { opacity: \"0.5\" } : null\n                          }\n                          value={blockPrice}\n                        />\n                        <span>{userCurrency.split(\" \")[0]}</span>\n                      </div>\n                    </div>\n                  }\n                />\n                <div className=\"max-button\">\n                  <Popup\n                    content={helpMax1(selectedFrom?.value)}\n                    position=\"bottom center\"\n                    trigger={\n                      <Button\n                        secondary\n                        className={\"btn\"}\n                        onClick={setAssetMax}\n                        floated=\"right\"\n                        size=\"mini\"\n                      >\n                        MAX\n                      </Button>\n                    }\n                  />\n                </div>\n              </div>\n              {(selectedFromAmount && amountError) ?\n                <span className=\"c-danger\">{amountError}</span> : null\n              }\n            </label><br />\n            <label>\n              <span>Destination Address:</span>\n              <TextField\n                InputProps={{ disableUnderline: true, className: 'custom-input-bg' }}\n                value={toAddress}\n                onChange={(e) => { setToAddress(e.target.value) }}\n                className={styles.input}\n                id=\"destination-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n              {toAddress && !isValidAddress &&\n                <span className=\"c-danger\">Invalid {selectedFrom?.value} address</span>\n              }\n            </label><br /><br />\n            <Button\n              primary\n              type=\"submit\"\n              className=\"btn-primary withdraw\"\n              onClick={(e) => onClickWithdraw(e)}\n              floated=\"left\"\n              disabled={canWithdraw ? '' : 'disabled'}\n            >\n              Withdraw\n            </Button>\n          </form>\n        }\n      </div>\n    </>\n  );\n}\n\nexport default WithdrawForm\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SendForm/index.js",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import MetaLoader from \"../../UI/loader/Loader\";\nimport React, { useState, useEffect } from \"react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport styles from \"./SendForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport { Modal, Icon, Button, Grid, Header, Popup } from \"semantic-ui-react\";\nimport Input from \"@mui/material/Input\";\nimport { helpSendTo, helpAmount, helpMax1, helpSwap } from \"../../config/help\";\nimport \"./style.css\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport Meta1 from \"meta1-vision-dex\";\n\nconst FEE = 0.0035;\n\nconst SendForm = React.memo((props) => {\n  const {\n    portfolio,\n    onBackClick,\n    sender,\n    sendApi,\n    asset,\n    onSuccessTransfer,\n    portfolioReceiver,\n    assets,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    userCurrency,\n  } = props;\n  const feeAsset = portfolio.find((asset) => asset.name === \"META1\");\n  const amountHold =\n    portfolio.find((cur) => cur.name === asset).qty == undefined\n      ? 0\n      : portfolio.find((cur) => cur.name === asset).qty;\n  const pre = assets.find((el) => el.symbol === asset).precision;\n  const [chosenCrypt, setChosenCrypt] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [assetCh, setAssetCh] = useState(asset);\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [repeat, setRepeat] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [askForPassword, setAskForPassword] = useState(false);\n  const [inProgress, setInProgress] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(false);\n  const [accountIsLoading, setAccountIsLoading] = useState(false);\n  const debouncedAccount = useDebounce(receiver, 500);\n  const [assetData, setAssetData] = useState({});\n  const [balance, setBalance] = useState(amountHold);\n  const [options, setOptions] = useState([]);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState(0);\n  const [precisionAssets, setPrecisionAssets] = useState();\n  const [password, setPassword] = useState(\"\");\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [feeAlert, setFeeAlert] = useState(false);\n\n  useEffect(() => {\n    async function getData() {\n      if (asset !== \"USDT\" && asset !== \"META1\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        await setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"META1\") {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      } else {\n        setPriceForAsset(1);\n      }\n    }\n    getData();\n  }, [asset]);\n\n  useEffect(() => {\n    function filterPrec() {\n      let preObj = {};\n      for (let i = 0; i < assets.length; i++) {\n        preObj[assets[i].symbol] = assets[i].precision;\n      }\n      setPrecisionAssets(preObj);\n    }\n    filterPrec();\n  }, [assets]);\n\n  useEffect(() => {\n    if (parseFloat(feeAsset?.qty) < FEE && feeAsset) {\n      setError(\"Not enough FEE\");\n    }\n  }, [feeAsset]);\n\n  useEffect(() => {\n    if (receiver.length > 0) {\n      setError(\"\");\n      setAccountIsLoading(true);\n      setAccountChecked(false);\n    }\n    setOptions(newOptions.sort((a, b) => (a.name > b.name ? 1 : -1)));\n  }, [receiver]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      let allInputs = document.getElementsByClassName(\n        \"css-1pw81iq-MuiInputBase-root-MuiFilledInput-root\"\n      );\n      for (let i = 0; i < allInputs.length; i++) {\n        allInputs[i].style.borderRadius = \"8px\";\n      }\n    }, 50);\n  }, []);\n\n  useEffect(() => {\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [amount, receiver]);\n\n  const RedditTextField = React.memo(\n    styled((props) => (\n      <TextField InputProps={{ disableUnderline: true }} {...props} />\n    ))(({ theme }) => ({\n      \"& .MuiFilledInput-root\": {\n        border: \"1px solid #e2e2e1\",\n        overflow: \"hidden\",\n        backgroundColor: theme.palette.mode === \"light\" ? \"#fcfcfb\" : \"#2b2b2b\",\n        borderRadius: \"8px !important\",\n        transition: theme.transitions.create([\n          \"border-color\",\n          \"background-color\",\n          \"box-shadow\",\n        ]),\n        \"&:hover\": {\n          backgroundColor: \"transparent\",\n        },\n        \"&.Mui-focused\": {\n          backgroundColor: \"transparent\",\n          boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n          borderColor: theme.palette.primary.main,\n        },\n      },\n    }))\n  );\n\n  const setSelected = (value) => {\n    setAssetCh(value.value);\n    portfolio.map((el) =>\n      el.name === value.value\n        ? setAssetData({\n          balance: el.qty,\n          image: el.image,\n          label: el.name,\n          value: el.name,\n        })\n        : null\n    );\n  };\n  const calculateUsdPriceHandler = (e) => {\n    let priceForOne = Number(e.target.value) * priceForAsset;\n    setBlockPrice(\n      Number(priceForOne).toFixed(precisionAssets[asset]) *\n      Number(userCurrency.split(\" \")[2])\n    );\n  };\n\n  const newOptions = portfolio.map((asset) => {\n    return {\n      image: asset.image,\n      value: asset.name,\n      label: asset.name,\n      balance: asset.qty || 0,\n    };\n  });\n\n  const calculateCryptoPriceHandler = (e) => {\n    let priceForOne = (\n      Number(e.target.value.split(\"$\")[0]) /\n      priceForAsset /\n      Number(userCurrency.split(\" \")[2])\n    ).toFixed(precisionAssets[asset]);\n    setAmount(priceForOne);\n    setBlockPrice(e.target.value);\n  };\n\n  useEffect(() => {\n    async function fetchAccount(debouncedAccount) {\n      // Сделать запрос к АП\n      try {\n        await portfolioReceiver.fetch(debouncedAccount);\n        setAccountChecked(true);\n        setAccountIsLoading(false);\n        if (receiver === sender) {\n          setError(\"Can't transfer to self\");\n        }\n      } catch (e) {\n        setAccountChecked(false);\n        setAccountIsLoading(false);\n        setError(\"Invalid receiver\");\n      }\n    }\n\n    if (debouncedAccount) {\n      fetchAccount(debouncedAccount);\n    } else {\n      setAccountChecked(false);\n      setAccountIsLoading(false);\n    }\n\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [debouncedAccount, amount]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const performTransfer = async (params) => {\n    let asset = assetCh;\n    setError(null);\n    setInProgress(true);\n    const { password, to, amount, message } = params;\n    const result = await sendApi.perform({\n      password,\n      to,\n      amount,\n      message,\n      asset,\n    });\n    if (result.error) {\n      if (result.error === \"Invalid credentials\") {\n        setError(result.error);\n      } else if ((asset === \"META1\" && feeAsset.qty === amount) || !feeAsset) {\n        setError(\"You don't have enough cryptocurrency to pay FEE\");\n      } else {\n        setError(\"Invalid Receiver\");\n      }\n      setRepeat(true);\n    } else {\n      setModalOpened(true);\n    }\n    setInProgress(false);\n  };\n\n  const setAssetMax = () => {\n    setAmount(assetData.balance);\n    setBlockPrice(\n      Number(assetData.balance * priceForAsset).toFixed(\n        precisionAssets[asset]\n      ) * Number(userCurrency.split(\" \")[2])\n    );\n  };\n\n  useEffect(() => {\n    if (repeat) {\n      setTimeout(() => {\n        setError(null);\n        setRepeat(false);\n      }, 2000);\n    }\n  }, [repeat]);\n\n  useEffect(() => {\n    portfolio.map((el) =>\n      el.name === assetCh\n        ? setAssetData({\n          balance: el.qty,\n          image: el.image,\n          label: el.name,\n          value: el.name,\n        })\n        : null\n    );\n  }, [assetCh, assets]);\n  const PasswordForm = (props) => {\n    const [password, setPassword] = useState(\"\");\n    return (\n      <div class=\"ui large fluid labeled input action\">\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value.trim())}\n        />\n        <Button color=\"yellow\" onClick={(e) => props.onSubmit(password)}>\n          {\" \"}\n          Send{\" \"}\n        </Button>\n      </div>\n    );\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  return (\n    <>\n      <div>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the send of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Send</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"tiny\"\n          id={\"modal\"}\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n            onSuccessTransfer();\n          }}\n        >\n          <Modal.Header>Transfer Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={1}>\n                <Grid.Column>\n                  <h3>\n                    {amount} of {assetCh} sent to {receiver}\n                  </h3>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              positive\n              onClick={() => {\n                setModalOpened(false);\n                onSuccessTransfer();\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"justFlexAndDirect\"}>\n          <div className={\"widthh100\"}>\n            <div className={styles.containerMain}>\n              <div className={styles.mainBlock}>\n                <div className={styles.leftBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Send</h2>\n                  <RedditTextField\n                    label=\"From\"\n                    defaultValue={sender}\n                    className={styles.input}\n                    disabled\n                    id=\"reddit-input\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div\n                    className={styles.inputForAmount}\n                    style={{ marginBottom: \"1rem\" }}\n                  >\n                    <span\n                      style={{\n                        fontSize: \".8rem\",\n                        color: \"#505361\",\n                        marginBottom: \".3rem\",\n                      }}\n                    >\n                      Amount {assetData.label}\n                    </span>\n                    <Input\n                      id={\"inputForAmount\"}\n                      type=\"number\"\n                      value={amount ? amount : \"\"}\n                      min=\"0\"\n                      endAdornment={\n                        <InputAdornment position=\"end\" className=\"currency-color-change\" >\n                          <span style={{ fontSize: '16px' }}>{assetData.label}</span>\n                        </InputAdornment>\n                      }\n                      onChange={(e) => {\n                        const amountOut = e.target.value;\n                        if (\n                          e.target.value.length < 11 &&\n                          /[-+]?[0-9]*\\.?[0-9]*/.test(e.target.value) &&\n                          Number(e.target.value) >= 0\n                        ) {\n                          setClickedInputs(true);\n                          setAmount(amountOut);\n                          calculateUsdPriceHandler(e);\n                        }\n                      }}\n                      placeholder={balance}\n                    />\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        marginTop: \".1rem\",\n                        fontSize: \"1rem\",\n                        color: \"#505361\",\n                        position:'relative'\n                      }}\n                    >\n                      <input\n                        type=\"number\"\n                        className={styles.inputDollars}\n                        min=\"0\"\n                        inputmode=\"numeric\"\n                        pattern=\"\\d*\"\n                        onChange={(e) => {\n                          if (Number(e.target.value) >= 0) {\n                            setClickedInputs(true);\n                            calculateCryptoPriceHandler(e);\n                          }\n                        }}\n                        placeholder={`Amount ${userCurrency.split(\" \")[1]}`}\n                        value={amount ? blockPrice : \"\"}\n                      />\n                      <span style={{ fontSize: '16px' }} className={styles['abs-sp']} >{userCurrency.split(\" \")[0]}</span>\n                    </div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        position: \"relative\",\n                      }}\n                    >\n                      <span style={{ color: \"#505361\", paddingTop: \"2rem\" }}>\n                        FEE: 0.00035 META1\n                      </span>\n                      <div\n                        className=\"max-button-new\"\n                        style={{\n                          position: \"absolute\",\n                          right: \"0\",\n                          bottom: \"-3px\",\n                        }}\n                      >\n                        <Popup\n                          content={`Click this button to sell all your ${assetData.label}`}\n                          position={isMobile ? \"bottom left\" : \"bottom center\"}\n                          trigger={\n                            <Button\n                              className={\"btn\"}\n                              secondary\n                              onClick={setAssetMax}\n                              floated=\"right\"\n                              size=\"mini\"\n                            >\n                              MAX\n                            </Button>\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <Grid.Column>\n                    <TextField\n                      InputProps={{ disableUnderline: true }}\n                      label=\"Password\"\n                      className={styles.input}\n                      type={\"password\"}\n                      id=\"reddit-input pass\"\n                      variant=\"filled\"\n                      style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                      value={password}\n                      onChange={({ target }) => setPassword(target.value)}\n                    />\n                  </Grid.Column>\n                </div>\n                <div\n                  style={{\n                    marginTop: \"4rem\",\n                    marginLeft: \".3rem\",\n                    width: \"40px\",\n                    height: \"40px\",\n                    background: \"#fdc000\",\n                    borderRadius: \"40px\",\n                    padding: \".7rem .85rem\",\n                  }}\n                  className=\"text-center-s\"\n                >\n                  <i\n                    style={{ color: \"#fff\" }}\n                    className={\n                      isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                    }\n                  />\n                </div>\n                <div className={styles.rightBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                  <TextField\n                    InputProps={{ disableUnderline: true }}\n                    label=\"To\"\n                    value={receiver}\n                    onChange={(e) => {\n                      setReceiver(e.target.value);\n                    }}\n                    className={styles.input}\n                    id=\"reddit-input receiver\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div className={styles.blockInfoCrypto}>\n                    <img\n                      style={{ width: \"60px\", height: \"60px\" }}\n                      src={assetData.image}\n                      alt=\"cryptImg\"\n                    />\n                    <div className={styles.blockInfoText}>\n                      <span>You will Send {assetData.label} Coin</span>\n                      <h3>\n                        {Number(amount) ? amount : 0} {assetData.label}\n                      </h3>\n                      <span>\n                        {blockPrice || 0} {userCurrency.split(\" \")[1]}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {!askForPassword && !inProgress && (\n                <Grid.Row className={\"buttonSend\"} columns={1}>\n                  <Popup\n                    disabled\n                    trigger={\n                      <button\n                        className={\"btnSend ui button yellow buttSend\"}\n                        style={{\n                          marginLeft: \"2rem\",\n                          marginTop: \"1rem\",\n                          boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, .11)\",\n                        }}\n                        disabled={\n                          !accountChecked ||\n                          amount === \"\" ||\n                          password === \"\" ||\n                          error\n                        }\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (Number(amount) > Number(amountHold)) {\n                            setAskForPassword(false);\n                            setError(`your balance is not enough `);\n                            setRepeat(true);\n                          } else {\n                            let password =\n                              document.getElementById(\n                                \"reddit-input pass\"\n                              ).value;\n                            if (receiver !== \"\" && password !== \"\" && amount) {\n                              if (parseFloat(feeAsset?.qty) < FEE) {\n                                setError(\"Not enough FEE\");\n                              } else {\n                                if (\n                                  assetCh === \"META1\" &&\n                                  Number(amount) === Number(feeAsset.qty)\n                                ) {\n                                  setFeeAlert(true);\n                                } else {\n                                  performTransfer({\n                                    ...{ to: receiver },\n                                    ...{\n                                      password,\n                                      amount,\n                                      assetCh,\n                                      message,\n                                    },\n                                  });\n                                }\n                              }\n                            } else {\n                              setError(\n                                \"You have entered incorrect data, please check it.\"\n                              );\n                            }\n                          }\n                        }}\n                      >\n                        Confirm\n                      </button>\n                    }\n                  />\n                </Grid.Row>\n              )}\n\n              {inProgress && <MetaLoader size={\"small\"} />}\n\n              {error && (\n                <Grid>\n                  <Grid.Row centered>\n                    <h5 style={{ color: \"red\" }}>{error}</h5>\n                  </Grid.Row>\n                </Grid>\n              )}\n            </div>\n          </div>\n          <div className={\"bottomBlockAdapt\"}>\n            <RightSideHelpMenuSecondType\n              onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n              onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default SendForm;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js",["341","342","343","344","345","346","347","348","349","350","351","352","353"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"./ExchangeForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport ExchangeSelect from \"./ExchangeSelect.js\";\nimport {\n  Image,\n  Modal,\n  Button,\n  Grid,\n  Icon,\n  Label,\n  Popup,\n} from \"semantic-ui-react\";\nimport { helpInput, helpMax1, helpSwap } from \"../../config/help\";\nimport Input from \"@mui/material/Input\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport \"./ExchangeForm.css\";\nimport Meta1 from \"meta1-vision-dex\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport leftArrow from \"../../images/exchangeAssets/Shape Left.png\";\nimport rightArrow from \"../../images/exchangeAssets/Shape 2 copy 2.png\";\n\nexport default function ExchangeForm(props) {\n  const {\n    onSuccessModal,\n    trader,\n    asset,\n    onBackClick,\n    metaUrl,\n    portfolioReceiver,\n    onSuccessTrade,\n    userCurrency,\n  } = props;\n  const [portfolio, setPortfolio] = useState(props.portfolio);\n  const [passwordShouldBeProvided, setPasswordShouldBeProvided] =\n    useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [assets, setAssets] = useState(props.assets);\n  const [options, setOptions] = useState([]);\n  const [selectedFrom, setSelectedFrom] = useState(props.selectedFrom);\n  const [selectedTo, setSelectedTo] = useState(props.selectedTo);\n  const [selectedFromAmount, setSelectedFromAmount] = useState(\"\");\n  const [selectedToAmount, setSelectedToAmount] = useState(0);\n  const [pair, setPair] = useState(null);\n  const [invalidEx, setInvalidEx] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [tradeError, setTradeError] = useState(null);\n  const [tradeInProgress, setTradeInProgress] = useState(false);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState();\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [error, setError] = useState();\n  const [feeAlert, setFeeAlert] = useState(false);\n\n  useEffect(() => {\n    console.log(pair);\n  }, [pair]);\n\n  useEffect(() => {\n    async function getPriceForAsset() {\n      if (asset !== \"META1\" && asset !== \"USDT\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"USDT\") {\n        setPriceForAsset(1);\n      } else {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      }\n    }\n    getPriceForAsset();\n  }, [asset, portfolio]);\n\n  useEffect(() => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    if (Number(selectedFromAmount) <= 0 && clickedInputs) {\n      setError(\n        `The amount must be greater than ${(\n          0.003 * Number(userCurrency.split(\" \")[2])\n        ).toFixed(4)} ${userCurrency.split(\" \")[1]}`\n      );\n    } else {\n      setError(\"\");\n    }\n    if (Number(blockPrice) <= 0.003 * Number(userCurrency.split(\" \")[2])){\n        setError(\n          `The amount must be greater than ${Number(\n            (0.003 * Number(userCurrency.split(\" \")[2])).toFixed(4)\n          )} ${userCurrency.split(\" \")[1]}`\n        );\n\n      } else if (feeAsset == undefined) {\n      setError(\"Not enough FEE\");\n    } else {\n      setError(\"\");\n    }\n  }, [selectedFromAmount, blockPrice]);\n\n  useEffect(() => {\n    const currentPortfolio = props.portfolio || [];\n    setAssets(props.assets);\n    const getBalance = (symbol) => {\n      const assetInWallet = currentPortfolio.find((el) => el.name === symbol);\n      if (assetInWallet) {\n        return assetInWallet.qty;\n      } else {\n        return 0;\n      }\n    };\n    const newOptions = assets.map((asset) => {\n      return {\n        image: asset.image,\n        value: asset.symbol,\n        label: asset.symbol,\n        pre: asset.precision,\n        balance: getBalance(asset.symbol) || 0,\n      };\n    });\n\n    setOptions(newOptions);\n    if (selectedTo == null && options !== []) {\n      const from = asset\n        ? newOptions.find((el) => el.value === asset)\n        : newOptions[0];\n      let to = asset\n        ? newOptions.find((el) => el.value === \"META1\")\n        : newOptions[1];\n      if (asset === \"META1\") {\n        to = newOptions.find((el) => el.value === \"USDT\");\n      }\n      setSelectedTo(to);\n      setSelectedFrom(from);\n    } else {\n      setSelectedTo(newOptions.find((o) => o.value === selectedTo.value));\n      setSelectedFrom(newOptions.find((o) => o.value === selectedFrom.value));\n    }\n  }, [props.assets, props.portfolio]);\n\n  useEffect(() => {\n    if (!isMobile) {\n      setTimeout(() => {\n        document.getElementById(\"mainBlock\").style.height = \"92vh\";\n      }, 25);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n  }, [pair]);\n\n  const calculateUsdPriceHandler = (e,lastPrice='') => {\n    if (e.target.value.length != 0) {\n      let priceAsset = priceForAsset\n      if(lastPrice!=''){\n        priceAsset=lastPrice\n      }\n      let priceForOne = (Number(e.target.value) * priceAsset).toFixed(10);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    } else {\n      setBlockPrice(NaN);\n    }\n  };\n\n  const calculateCryptoPriceHandler = (e) => {\n    setBlockPrice(e.target.value);\n    let priceForOne = (\n      Number(e.target.value) /\n      priceForAsset /\n      Number(userCurrency.split(\" \")[2])\n    ).toFixed(selectedFrom.label === \"USDT\" ? 3 : selectedFrom.pre);\n    setSelectedFromAmount(priceForOne);\n  };\n\n  const handleCalculateSelectedTo = (currentValue='') => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedToAmount(NaN);\n      setSelectedFromAmount(NaN);\n      setBlockPrice(NaN);\n      return;\n    }\n    setInvalidEx(false);\n    const selectedAmount=currentValue?currentValue:selectedFromAmount\n    if (selectedAmount !== \"\" && selectedAmount) {\n      const amount =\n        (selectedAmount / pair.lowest_ask).toString().substr(0, 11) * 1;\n      setSelectedToAmount(amount);\n    } else {\n      setSelectedToAmount(0);\n    }\n  };\n  const handleCalculateSelectedFrom = () => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n    const amount = selectedToAmount * pair.lowest_ask;\n    setSelectedFromAmount(amount);\n  };\n\n  useEffect(() => {\n    if (selectedFromAmount > 0) {\n      setSelectedToAmount(0);\n    }\n    if (selectedFromAmount?.length) {\n      handleCalculateSelectedTo();\n    }\n    if (selectedToAmount?.length) {\n      handleCalculateSelectedFrom();\n    }\n    if (selectedToAmount === \"\") {\n      setSelectedFromAmount(\"\");\n    }\n  }, [selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    setPasswordShouldBeProvided(false);\n  }, [selectedFrom, selectedTo, selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    async function fetchPair(selectedTo, selectedFrom) {\n      if (\n        selectedTo != null &&\n        selectedFrom != null &&\n        selectedFrom.value !== undefined\n      ) {\n        const newPair = await Meta1.ticker(\n          selectedFrom.value,\n          selectedTo.value\n        );\n        setPair(newPair);\n      }\n    }\n    fetchPair(selectedTo, selectedFrom);\n  }, [selectedFrom, selectedTo]);\n\n  const changeAssetHandler = async (val) => {\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      const data = await response.json()\n      await setPriceForAsset(data.lastPrice);\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>{\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      }\n      );\n    }\n  };\n\n  const changeAssetHandlerSwap = async (val) => {\n    if (val.label !== \"META1\" && val.label !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val.label}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val.label === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      );\n    }\n  };\n\n  const swapAssets = (e) => {\n    e.preventDefault();\n    const oldFrom = selectedFrom;\n    setSelectedFrom(selectedTo);\n    setSelectedTo(oldFrom);\n  };\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const prepareTrade = () => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    localStorage.setItem(\"selectFrom\", selectedFromAmount);\n    localStorage.setItem(\"selectTo\", selectedToAmount);\n    if (\n      selectedFrom.label === \"META1\" &&\n      Number(selectedFromAmount) === Number(feeAsset.qty)\n    ) {\n      setFeeAlert(true);\n    } else {\n      setPasswordShouldBeProvided(true);\n    }\n  };\n\n  const performTrade = async () => {\n    try {\n      setTradeInProgress(true);\n      setPasswordShouldBeProvided(false);\n\n      const buyResult = await trader.perform({\n        from: selectedFrom.value,\n        to: selectedTo.value.trim(),\n        amount: selectedToAmount,\n        password: password,\n      });\n      if (buyResult.error) {\n        setTradeError(buyResult.error);\n      } else {\n        setModalOpened(true);\n      }\n      setPassword(\"\");\n      setTradeInProgress(false);\n    } catch (e) {\n      setTradeInProgress(false);\n    }\n  };\n\n  const setAssetMax = (e) => {\n    e.preventDefault();\n    setSelectedFromAmount(selectedFrom.balance);\n    handleCalculateSelectedTo();\n    setTimeout(() => {\n      let priceForOne = (\n        Number(document.getElementById(\"inputAmount\").value) * priceForAsset\n      ).toFixed(3);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    }, 25);\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  // const getAssets = (except) => options.filter((el) => el.value !== except);\n  if (selectedFrom == null && selectedTo == null) return null;\n\n  const getAssets = (except) => options.filter((el) => el.value !== except);\n\n  const inputChangeValuesHandler =(e,currentInput,lastPrice)=>{\n    handleCalculateSelectedTo(e.target.value);\n    calculateUsdPriceHandler(e,lastPrice);\n    setClickedInputs(true);\n  }\n\n  const inputChangeHandler = async (val,e)=>{\n    const currentInput = e.target.value\n    setSelectedFromAmount(prev=>{\n      return currentInput\n    });\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      const data = await response.json()\n      setPriceForAsset(prev=>{\n        return prev=data.lastPrice\n      });\n      inputChangeValuesHandler(e,currentInput,data.lastPrice)\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n      inputChangeValuesHandler(e,currentInput,'')\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>{\n        setPriceForAsset(prev=>{\n          return Number(res.latest).toFixed(2)\n        })\n        inputChangeValuesHandler(e,currentInput,Number(res.latest).toFixed(2))\n      }\n      );\n    }\n  }\n\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Exchange</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"mini\"\n          open={tradeError !== null}\n          onClose={() => setTradeError(null)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Error occured</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={2}>\n                <Grid.Column width={4}>\n                  <Icon disabled name=\"warning sign\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column width={10}>\n                  <div className=\"trade-error\">{tradeError}</div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button positive onClick={() => setTradeError(null)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the swap of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n            onSuccessModal();\n            onSuccessTrade();\n          }}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Trade Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={3}>\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedFrom.image} />\n                    <p>\n                      {\" \"}\n                      {(localStorage.getItem(\"selectFrom\") * 1).toFixed(\n                        selectedFrom.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n                <Grid.Column width={3} style={{ marginRight: '2.2rem', marginTop: '-2rem' }} >\n                  <Icon disabled name=\"arrow right\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedTo.image} />\n                    <p>\n                      {(localStorage.getItem(\"selectTo\") * 1).toFixed(\n                        selectedTo.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n              onClick={() => {\n                onSuccessModal();\n                setModalOpened(false);\n                // setRefreshData(prev => !prev)\n                onSuccessTrade()\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"adaptForMainExchange\"}>\n          <div className={styles.mainBlock}>\n            <div className={styles.mainBlockExchange}>\n              <div className={styles.leftBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Exchange</h2>\n                <div id=\"from\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedFrom(val);\n                            changeAssetHandler(val.value);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedTo.value)}\n                          selectedValue={selectedFrom}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            content={helpInput(\n                              selectedFrom?.value,\n                              selectedTo?.value\n                            )}\n                            position=\"bottom center\"\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  placeholder=\"Amount crypto\"\n                                  value={selectedFromAmount}\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    if (\n                                      e.target.value.length < 11 &&\n                                      /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                        e.target.value\n                                      ) &&\n                                      Number(e.target.value) >= 0\n                                    ) {\n                                      inputChangeHandler(selectedFrom.label,e)\n                                    }\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedFrom.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  id={\"inputAmount\"}\n                                  disabled={invalidEx}\n                                  min=\"0\"\n                                  inputmode=\"numeric\"\n                                  pattern=\"\\d*\"\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                    position:'relative'\n                                  }}\n                                >\n                                  <input\n                                    className={styles.inputDollars}\n                                    onChange={(e) => {\n                                      if (\n                                        e.target.value.length < 11 &&\n                                        /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                          e.target.value\n                                        ) &&\n                                        Number(e.target.value) >= 0\n                                      ) {\n                                        calculateCryptoPriceHandler(e);\n                                        setClickedInputs(true);\n                                      }\n                                    }}\n                                    min=\"0\"\n                                    inputmode=\"numeric\"\n                                    pattern=\"\\d*\"\n                                    type={\"number\"}\n                                    placeholder={`Amount ${userCurrency.split(\" \")[1]\n                                      }`}\n                                    disabled={invalidEx}\n                                    style={\n                                      invalidEx ? { opacity: \"0.5\" } : null\n                                    }\n                                    value={blockPrice}\n                                  />\n                                  <span className={styles['abs-sp']} >{userCurrency.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                          <div className=\"max-button\">\n                            <Popup\n                              content={helpMax1(selectedFrom?.value)}\n                              position=\"bottom center\"\n                              trigger={\n                                <Button\n                                  secondary\n                                  className={\"btn\"}\n                                  onClick={setAssetMax}\n                                  floated=\"right\"\n                                  size=\"mini\"\n                                >\n                                  MAX\n                                </Button>\n                              }\n                            />\n                          </div>\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n              <div\n                style={{ marginTop: \"2.3rem\", marginLeft: \".3rem\" }}\n                className=\"padding-y-large text-center-s\"\n              >\n                <Popup\n                  content={helpSwap(selectedFrom?.value, selectedTo?.value)}\n                  position=\"top center\"\n                  trigger={\n                    <Button\n                      className={styles.button}\n                      style={{ width: \"3rem\", height: \"3rem\" }}\n                      onClick={(e) => {\n                        changeAssetHandlerSwap(selectedTo);\n                        setSelectedToAmount(NaN);\n                        setSelectedFromAmount(NaN);\n                        setBlockPrice(NaN);\n                        swapAssets(e);\n                      }}\n                    >\n                      <div className={styles.blockArrows}>\n                        <img\n                          src={leftArrow}\n                          className={styles.leftArrow}\n                          alt=\"\"\n                        />\n                        <img\n                          src={rightArrow}\n                          className={styles.rightArrow}\n                          alt=\"\"\n                        />\n                      </div>\n                    </Button>\n                  }\n                />\n              </div>\n              <div className={styles.rightBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                <div id=\"to\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedTo(val);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedFrom.value)}\n                          selectedValue={selectedTo}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            wide\n                            content={helpInput(\n                              selectedTo?.value,\n                              selectedFrom?.value\n                            )}\n                            position=\"bottom center\"\n                            disabled\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  style={isMobile ? { width: \"100%\" } : null}\n                                  placeholder=\"Amount crypto\"\n                                  value={\n                                    selectedFromAmount ? selectedToAmount : 0\n                                  }\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    setSelectedToAmount(\n                                      Number(e.target.value).toFixed(\n                                        selectedTo.pre\n                                      )\n                                    );\n                                    handleCalculateSelectedFrom();\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedTo.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  disabled\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                    position:'relative'\n                                  }}\n                                >\n                                  <span>\n                                    {!invalidEx && selectedFromAmount\n                                      ? blockPrice\n                                      : 0}\n                                  </span>\n                                  <span className={styles['abs-sp']}>{userCurrency.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                        </div>\n                        <div style={{ marginTop: \"1px\" }}>\n                          {invalidEx && (\n                            <Label pointing color=\"red\">\n                              Trade is currently unavailable\n                            </Label>\n                          )}\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n            </div>\n            <div className={styles.absoluteBottomBlock}>\n              <div className={styles.centeredBlock}>\n                <div className={styles.leftBlockCrypt}>\n                  <div\n                    className={styles.textBlockLeft}\n                    style={{ marginRight: \"1rem\" }}\n                  >\n                    <span>You are exchanging</span>\n                    <h4>\n                      {selectedFromAmount || 0} {selectedFrom.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrency.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedFrom.image}\n                      alt=\"\"\n                    />\n                  </div>\n                </div>\n                <div className={styles.centeredBlockCrypt}>\n                  <div className={styles.iconBlock}>\n                    <i\n                      style={{ color: \"#fff\" }}\n                      className={\n                        isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                      }\n                    />\n                  </div>\n                </div>\n                <div className={styles.rightBlockCrypt}>\n                  <div className={\"imgToCenter\"} style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedTo.image}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className={styles.textBlockRight}>\n                    <span>You will Receive</span>\n                    <h4>\n                      {selectedFromAmount ? selectedToAmount : 0}{\" \"}\n                      {selectedTo.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrency.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {error && !invalidEx && selectedFromAmount ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>{error}</h5>\n              </Grid.Row>\n            ) : null}\n            {Number(selectedFrom.balance) < Number(selectedFromAmount) ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>\n                  You don't have enough crypto\n                </h5>\n              </Grid.Row>\n            ) : null}\n            <div className=\"hidden-pass ui input\">\n              {passwordShouldBeProvided && (\n                <>\n                  <Input\n                    size=\"medium\"\n                    type=\"password\"\n                    placeholder=\"password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                    value={password}\n                  />\n\n                  <Button\n                    disabled={password.length === 0}\n                    onClick={performTrade}\n                    size=\"medium\"\n                    color=\"yellow\"\n                    ui\n                  >\n                    Submit\n                  </Button>\n                </>\n              )}\n\n              {tradeInProgress && <MetaLoader size={\"small\"} />}\n\n              {!passwordShouldBeProvided && !tradeInProgress && (\n                <Button\n                  className={\"btnExch\"}\n                  disabled={\n                    tradeInProgress ||\n                    selectedToAmount == null ||\n                    selectedToAmount == 0 ||\n                    selectedToAmount === 0.0 ||\n                    selectedFrom.balance === 0 ||\n                    Number(selectedFrom.balance) < Number(selectedFromAmount) ||\n                    !selectedFromAmount ||\n                    !selectedToAmount ||\n                    // blockPrice == 0 ||\n                    error\n                  }\n                  onClick={prepareTrade}\n                  color=\"yellow\"\n                  size=\"large\"\n                >\n                  Exchange\n                </Button>\n              )}\n            </div>\n          </div>\n          <div className={\"flexNeed customFlexNeed\"} >\n            <RightSideHelpMenuSecondType\n              onClickExchangeEOSHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/EOS.fb40b8e0.svg\",\n                  value: \"EOS\",\n                  label: \"EOS\",\n                  pre: 4,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"EOS\") {\n                    setSelectedFrom({\n                      image: \"/static/media/EOS.fb40b8e0.svg\",\n                      value: \"EOS\",\n                      label: \"EOS\",\n                      pre: 4,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n              onClickExchangeUSDTHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/USDT.004b5e55.svg\",\n                  value: \"USDT\",\n                  label: \"USDT\",\n                  pre: 2,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"USDT\") {\n                    setSelectedFrom({\n                      image: \"/static/media/USDT.004b5e55.svg\",\n                      value: \"USDT\",\n                      label: \"USDT\",\n                      pre: 2,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/fetchHistory.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/utils/commonFunction.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/useDebounce.js",["354"],"import { useState, useEffect } from 'react'\n\n// Наш хук\nexport default function useDebounce(value, delay) {\n    // Состояние и сеттер для отложенного значения\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(\n        () => {\n            // Выставить debouncedValue равным value (переданное значение)\n            // после заданной задержки\n            const handler = setTimeout(() => {\n                setDebouncedValue(value)\n            }, delay)\n\n            // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n            // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n            // ... value будет изменено (смотри ниже массив зависимостей).\n            // Так мы избегаем изменений debouncedValue, если значение value ...\n            // ... поменялось в рамках интервала задержки.\n            // Таймаут очищается и стартует снова.\n            // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n            // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n            // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n            return () => {\n                clearTimeout(handler)\n            }\n        },\n        // Вызывается снова, только если значение изменится\n        // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n        // ... если вы собираетесь менять ее динамически.\n        [value]\n    )\n\n    return debouncedValue\n}\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js",["355","356","357","358","359"],"import jsPDF from 'jspdf'\nimport QRCode from 'qrcode'\n\nimport image from './img.png'\n\nconst isLocked = () => true\n\nconst _createPaperWalletAsPDF = function (\n    ownerkeys,\n    activeKeys,\n    memoKey,\n    accountName\n) {\n    const width = 1050,\n        height = 1150, //mm\n        lineMargin = 5,\n        qrSize = 50,\n        textMarginLeft = qrSize + 7,\n        qrMargin = 5,\n        qrRightPos = width - qrSize - qrMargin,\n        textWidth = width - qrSize * 2 - qrMargin * 2 - 3,\n        textHeight = 8,\n        logoWidth = (width * 3) / 4,\n        logoHeight = logoWidth / 2.8, //  logo original width/height=2.8\n        logoPositionX = (width - logoWidth) / 2;\n    let rowHeight = 110;\n    const keys = [activeKeys, ownerkeys, memoKey]\n    const keysName = ['Active Key', 'Owner Key', 'Memo Key']\n\n    let locked = isLocked()\n\n    const pdf = new jsPDF({\n        orientation: 'portrait',\n        format: [width, height],\n        compressPdf: true\n    })\n\n    const checkPageH = (pdfInstance, currentPageH, maxPageH) => {\n        if (currentPageH >= maxPageH) {\n            pdfInstance.addPage()\n            rowHeight = 10\n        }\n        return pdf.internal.getNumberOfPages()\n    }\n\n    const keyRow = (privateKey) => {\n        let currentPage = checkPageH(pdf, rowHeight, 400)\n        gQrcode(privateKey.toPublicKey().toPublicKeyString(), qrMargin, rowHeight + 10, currentPage)\n        if (locked && !!privateKey) {\n            gQrcode(privateKey.toWif(), 315, rowHeight + 10, currentPage)\n        }\n        pdf.text('PublicKey', textMarginLeft, rowHeight + 20)\n        pdf.text(privateKey.toPublicKey().toPublicKeyString(), textMarginLeft, rowHeight + 30)\n        pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n        pdf.rect(textMarginLeft - 1, rowHeight + 24, 258, textHeight)\n        if (locked) {\n            pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n            if (!!privateKey) {\n                pdf.text(privateKey.toWif(), textMarginLeft, rowHeight + 50)\n            } else {\n                pdf.text('Not found.', textMarginLeft, rowHeight + 50)\n            }\n            pdf.rect(textMarginLeft - 1, rowHeight + 44, 258, textHeight)\n        }\n        rowHeight += 50\n    }\n\n    const gQrcode = (qrcode, rowWidth, rowHeight, currentPage) => {\n        QRCode.toDataURL(qrcode)\n            .then((url) => {\n                pdf.setPage(currentPage)\n                pdf.addImage(url, 'JPEG', rowWidth, rowHeight, qrSize, qrSize)\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n    }\n\n    let img = new Image()\n    img.src = image\n    pdf.addImage(img, 'PNG', 115, 30, 150, 50, '', 'MEDIUM')\n    pdf.text('Account:', 18, rowHeight - 10)\n    pdf.text(accountName, 42, rowHeight - 10)\n\n    let content = keys.map((privateKeys, index) => {\n        if (index >= 1) {\n            rowHeight += 25 // add margin-top for block\n        }\n        checkPageH(pdf, rowHeight, 400)\n        pdf.text('Public', 22, rowHeight + 7)\n        pdf.text(keysName[index], 170, rowHeight + 7)\n        if (locked) {\n            pdf.text('Private', 327, rowHeight + 7)\n        }\n        pdf.line(lineMargin, rowHeight + 1, 365, rowHeight + 1)\n        pdf.line(lineMargin, rowHeight + 9, 365, rowHeight + 9)\n        keyRow(privateKeys)\n    })\n\n    Promise.all(content).then(() => {\n        pdf.save(\n            'meta' +\n                '-paper-wallet-' +\n                (locked ? 'public-' : 'private-') +\n                accountName +\n                '.pdf'\n        )\n    })\n}\n\nconst createPaperWalletAsPDF = function (\n    account,\n    owner_private,\n    active_private,\n    memo_private,\n) {\n    _createPaperWalletAsPDF(owner_private, active_private, memo_private, account)\n}\n\nexport { createPaperWalletAsPDF }\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx",["360","361","362","363","364","365","366","367","368","369","370"],"import React, { useState, useEffect } from \"react\";\nimport { Modal, Input, Button } from \"semantic-ui-react\";\nimport \"./login.css\";\nimport styles from \"./login.module.scss\";\nimport RightSideHelpMenuFirstType from \"../RightSideHelpMenuFirstType/RightSideHelpMenuFirstType\";\nimport { removeAccessToken, removeLoginDetail, setLocation } from \"../../utils/localstorage\";\nimport { useDispatch } from \"react-redux\";\nimport { logoutRequest } from \"../../store/account/actions\";\n\nexport default function LoginScreen(props) {\n  const {\n    error,\n    loginDataError,\n    onSubmit,\n    onSignUpClick,\n    portfolio,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    setLoginDataError\n  } = props;\n  const [login, setLogin] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [openModal, setOpenModal] = useState(false);\n  const [openVideoModal, setOpenVideoModal] = useState(false);\n  const [errorAttr, setErrorAttr] = useState({\n    login: false,\n    password: false\n  });\n  const dispatch = useDispatch();\n  const handleSignUpClick = (e) => {\n    e.preventDefault();\n    onSignUpClick();\n  };\n  const validationHandler = () => {\n    let isValid = true;\n    const data = { login: false, password: false };\n    if (login.trim().length === 0 && password.length === 0) {\n      data.login = true;\n      data.password = true;\n      isValid = false;\n    } else {\n      if (login.trim().length === 0) {\n        data.login = true;\n        isValid = false;\n      }\n      if (password.length === 0) {\n        data.password = true;\n        isValid = false;\n      }\n    }\n    setErrorAttr(prev => {\n      return { ...prev, ...data };\n    })\n    return isValid;\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!validationHandler()) {\n      setLoginDataError(false);\n      return;\n    }\n    if (login.length !== 0 && password.length !== 0) {\n      onSubmit(login, true, password);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      document.getElementById(\"mainBlock\").style.height = \"92vh\";\n    }, 5);\n  }, []);\n\n  return (\n    <div className={styles.body}>\n      <header className={styles.header}>\n        <div className={styles.headerM}>\n          <span>META Lite Wallet</span>\n        </div>\n      </header>\n      <div className={styles.mainBlockContent}>\n        <div className={styles.leftBlockContent}>\n          <div className={styles.createMeta}>\n            <h5>\n              <strong>\n                This section provides access to your META Lite Wallet.\n              </strong>\n            </h5>\n            <span>\n              If you have not yet created a META wallet, please click the Get\n              Started button to on the right hand side of the screen. Then click\n              the 'Create META Wallet' button below to create your wallet\n            </span>\n            <br />\n            <button\n              onClick={handleSignUpClick}\n              style={{ marginTop: \"1rem\" }}\n              className={styles.Button}\n            >\n              Create {portfolio != null ? \"new\" : null} META Wallet\n            </button>\n          </div>\n\n          {portfolio === null ? (\n            <div className={styles.linkMeta}>\n              <span>\n                For those already having a META Wallet, to enable functionality,\n                you must 'link' your wallet by typing in your wallet 'Wallet\n                Name' in the box below and clicking the 'Link META Wallet'\n                button.\n              </span>\n              <form className={styles.FormLink}>\n                <input\n                  className={styles.input}\n                  onChange={(e) => {\n                    e.preventDefault();\n                    if (e.target.value.trim()) {\n                      setErrorAttr(prev => {\n                        return { ...prev, login: false };\n                      })\n                    }\n                    setLogin(e.target.value);\n                  }}\n                  placeholder={\"Wallet Name\"}\n                  value={login}\n                  type=\"text\"\n                />\n                <input\n                  className={styles.input}\n                  onChange={(e) => {\n                    e.preventDefault();\n                    if (e.target.value.trim()) {\n                      setErrorAttr(prev => {\n                        return { ...prev, password: false };\n                      })\n                    }\n                    setPassword(e.target.value);\n                  }}\n                  placeholder={\"Passsword\"}\n                  value={password}\n                  type=\"password\"\n                />\n                <p\n                  className={styles.ErrorP}\n                  style={error ? null : { display: \"none\" }}\n                >\n                  Invalid Account Name\n                </p>\n                <p\n                  className={styles.ErrorP}\n                  style={loginDataError ? null : { display: \"none\" }}\n                >\n                  Wallet name or password is wrong\n                </p>\n                {errorAttr.login && errorAttr.password ?\n                  <p className={styles.ErrorP}>Wallet Name and Password can't be empty</p> :\n                  errorAttr.login ? <p className={styles.ErrorP}>Wallet Name can't be empty</p> :\n                    errorAttr.password ? <p className={styles.ErrorP}>Password can't be empty</p>\n                      : null\n                }\n                <button\n                  className={styles.Button}\n                  style={{ fontSize: \"100%\", marginTop: \"0\" }}\n                  onClick={handleSubmit}\n                  type={\"submit\"}\n                >\n                  Link META Wallet\n                </button>\n              </form>\n            </div>\n          ) : (\n            <div className={styles.linkMeta}>\n              <h5>\n                <strong>To unlink your wallet, click here</strong>\n              </h5>\n              <br />\n              <button\n                className={styles.Button}\n                onClick={() => {\n                  dispatch(logoutRequest());\n                }}\n                type={\"button\"}\n                style={{ marginTop: \"0\" }}\n              >\n                Unlink META Wallet\n              </button>\n            </div>\n          )}\n        </div>\n        <div className={styles.rightBlockContent}>\n          <RightSideHelpMenuFirstType\n            onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n            onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            portfolio={portfolio}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst ModalWalletInstructions = ({ setOpenModal, openModal }) => {\n  return (\n    <Modal\n      style={{ padding: 20 }}\n      open={openModal}\n      onClose={() => setOpenModal(false)}\n    >\n      <h3>META Wallet Creation</h3>\n      <p>\n        The META 1 Coin Digital Wallet can be created and accessed from your\n        meta1.vision Dashboard account OR on meta-exchange.io.\n      </p>\n      <br />\n      <h3>GET STARTED: Create a META Lite Wallet on meta1.vision Dashboard</h3>\n      <p>\n        1. Click the White ‘Create META Wallet’ button to start the process.\n        <br />\n        2. Fill in your information. Some fields may already be auto-filled.\n        Make sure the fields are filled in properly. You may need to clear the\n        fields and re-enter correctly.\n        <br />\n        3. Account Box – Create your wallet name <br />\n        Note: the ‘Wallet Account Name’ you choose is visible on the\n        meta-exchange.io platform. For optimum security, avoid using your name\n        or personal information as a part of your META Wallet Account name (do\n        not use an email address or your personal name. Your META Wallet Account\n        Name must contain from 4 to 63 characters and must consist of a\n        combination of lowercase Latin letters, dashes, or numbers. (No capital\n        letters, blank spaces, @, +, !, nor any other non- number/letter\n        characters except a dash)\n        <br />\n        4. Copy the Generated Password / Passphrase (52 characters) Do NOT\n        create your own password. You must use the auto generated password and\n        properly paste it into the confirm password field; You can click the\n        small clipboard under the ‘generated’ password field (lower right side).\n        Be sure to properly record and secure both the password ‘KEY’ and\n        account name in a safe location.\n        <br />\n        5. PASTE password phrase into the confirmation box below.\n        <br />\n        6. Click Submit\n        <br />\n        7. Confirm and check off ALL 4 Boxes to acknowledge you understand about\n        ‘SAVING the Key in a safe place\n        <br />\n        8. Click Submit\n        <br />\n        9. Your wallet will now be created, and it will say it is ‘LINKED’ at\n        the top of the page.\n      </p>\n      <br /> <br />\n      <p>\n        Once you have set up your wallet correctly, and if you have Ready to\n        Claim certificates under the ‘Coin Certificate Tab’ they will change to\n        Receive and Accept.\n      </p>\n      <h3>LOADING META 1 COINS INTO YOUR WALLET</h3>\n      <p>\n        When you are ready to receive your coins, click on the Receive and\n        Accept button and confirm you want to accept them into your wallet. Look\n        on the META Lite wallet tab to see the newly loaded coins.\n      </p>\n      <br /> <br />\n      <p>\n        The META Lite Wallet has the basic essential functionality of the META\n        Wallet (accessible on meta-exchange.io). The two versions access the\n        same account data on the META Blockchain. Nothing is compromised\n        including speed and transactional integrity. Many Coin holders will find\n        it easier to work from the meta1.vision Dashboard. But keep in mind that\n        META Exchange is a powerful leading edge tool with many features and\n        advanced functionality.\n      </p>\n      <p>\n        Your META Wallet can be used for several crypto currencies (select “Show\n        All balances” in the META Lite Wallet section for a complete list).{\" \"}\n        <br />\n        CREATE MULTIPLE WALLETS - You can create more than one META Wallet.{\" \"}\n        <br />\n        First ‘unlink’ your active META Wallet before creating a new one. <br />\n        - Click the word ‘here’ in the phrase, “To unlink your wallet, click\n        here”, to unlink your wallet. <br />\n        Click the ‘Create META Wallet’ button to create an additional wallet.{\" \"}\n        <br />\n        You can switch from one wallet to another by using the ‘unlink’ feature\n        and then entering your additional wallet name and clicking the ‘Link\n        META Wallet’ button. <br />\n        And as a general security measure, always double check that you are on\n        an official META 1 website. <br />\n        And as a general security measure, always double check that you are on\n        an official META 1 website. <br />\n      </p>\n    </Modal>\n  );\n};\n\nconst VideoModal = ({ openVideoModal, setOpenVideoModal }) => {\n  return (\n    <Modal\n      open={openVideoModal}\n      onClose={() => setOpenVideoModal(false)}\n      className={styles.modalDiv}\n      style={{ maxWidth: \"90%\" }}\n    >\n      <iframe\n        title=\"vimeo-player\"\n        src=\"https://player.vimeo.com/video/693848928?h=31b02d1eee\"\n        width=\"640\"\n        height=\"360\"\n        frameborder=\"0\"\n        allowfullscreen\n        style={{ width: \"100%\" }}\n      ></iframe>\n    </Modal>\n  );\n};\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js",["371","372"],"import * as React from \"react\";\nimport styles from \"./LeftPanelAdapt.module.scss\";\nimport \"./LeftPanelAdapt.css\";\nimport user from \"../../images/default-pic1.png\";\nimport { profileImageSelector } from \"../../store/account/selector\";\nimport { useSelector } from \"react-redux\";\n\nconst LeftPanelAdapt = (props) => {\n  const profileImageState =  useSelector(profileImageSelector);\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name\n  } = props;\n\n  return (\n    <ul className={styles.mainBlockAdapt + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              id=\"leftAvatarAdapt\"\n              src={profileImageState}\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i\n              style={{ margin: \".55rem .5rem\" }}\n              className=\"fas fa-home-lg-alt\"\n            />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <li className={styles.Li + \" nav-item dropdown\"}>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          id=\"navbarDropdown\"\n          role=\"button\"\n          data-bs-toggle=\"dropdown\"\n          aria-expanded=\"false\"\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div className={styles.textSpan + \" event\"}>\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n        <ul\n          className={\"event dropdown-menu needToBeYellow\"}\n          aria-labelledby=\"navbarDropdown\"\n        >\n          <h1\n            style={{\n              fontSize: \"1.5rem\",\n              fontWeight: \"300\",\n              color: \"#d59900\",\n              textAlign: \"center\",\n            }}\n          >\n            Portfolio\n          </h1>\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPortfolioHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Show All Balance\n          </li>\n          <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickOrderTableHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Open Orders\n          </li>\n          {/* <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPaperWalletHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Paper Wallet\n          </li> */}\n        </ul>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickExchangeHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fad fa-exchange\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickHistoryHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickSettingsHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={() => {\n          localStorage.removeItem(\"login\");\n          sessionStorage.setItem(\"location\", \"wallet\");\n          window.location.reload();\n        }}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .62rem\" }} className=\"fa fa-sign-out\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Log Out</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanelAdapt;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js",["373"],"import * as React from \"react\";\nimport styles from \"./RightSideHelpMenuThirdType.module.scss\";\n\nconst RightSideHelpMenuSecondType = (props) => {\n  const { onClickExchangeEOSHandler, onClickExchangeUSDTHandler, portfolio } =\n    props;\n\n  const DateOfStartEOS = 1645998629;\n  const DateOfStartUSDT = 1646085029;\n\n  const calculateDate = (date) => {\n    return Math.floor((new Date() / 1000 - date) / 86400);\n  };\n\n  return (\n    <>\n      <div className={styles.newCrypto}>\n        <h5 style={{ fontWeight: \"bold\", fontSize: \"1rem\" }}>\n          New Crypto on META1\n        </h5>\n        <hr />\n        <div className={styles.newCryptoBlock}>\n          <div className={styles.crypto} onClick={onClickExchangeUSDTHandler}>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/Tether-USDT-icon.png\"\n                alt=\"usdt\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>USDT</h6>\n                <span>Added {calculateDate(DateOfStartUSDT)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n          <hr />\n          <div className={styles.crypto} onClick={onClickExchangeEOSHandler}>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/EOS-icon.png\"\n                alt=\"EOS\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>EOS</h6>\n                <span>Added {calculateDate(DateOfStartEOS)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RightSideHelpMenuSecondType;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js",["374","375","376"],"import React, { useState, useEffect } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { Image } from \"semantic-ui-react\";\nimport Meta1 from \"meta1-vision-dex\";\n\nimport { useQuery } from \"react-query\";\nimport { removeExponent } from \"../../utils/commonFunction\";\n\nconst PortfolioTable = React.memo((props) => {\n  const [lists, setLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const {\n    filteredPortfolio,\n    onAssetSelect,\n    onSendClick,\n    onDepositClick,\n    onWithdrawClick,\n    assets,\n    userCurrency,\n    isCurrencySelected\n  } = props;\n\n  const { data, isLoading, error } = useQuery(\"cryptosTable\", getDatas);\n\n  async function getDatas() {\n    const cryptoArray = [\"META1\", \"ETH\", \"BTC\", \"BNB\", \"EOS\", \"XLM\", \"LTC\"];\n    let fetchedCryptos = {};\n    for (let i = 0; i < cryptoArray.length; i++) {\n      fetchedCryptos[cryptoArray[i]] = await Meta1.ticker(\n        \"USDT\",\n        cryptoArray[i]\n      );\n    }\n    fetchedCryptos[\"USDT\"] = { latest: 1, percent_change: 0 };\n    setLoading(false);\n    return fetchedCryptos;\n  }\n\n  useEffect(() => {\n    filteredPortfolio.forEach((d, i) => {\n      let precision = assets.filter((asset) => asset.symbol.includes(d.name));\n      Object.assign(filteredPortfolio[i], { pre: precision[0].precision });\n    });\n    setLists(filteredPortfolio);\n  }, [filteredPortfolio, assets, data]);\n\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    \"&:last-child td, &:last-child th\": {\n      border: 0,\n    },\n  }));\n\n  const currencyValue = (datas) => {\n    let assetValue = data[datas.name].latest;\n    if (datas.name === \"META1\") {\n      return (data[\"META1\"].latest * datas?.qty).toFixed(datas.pre);\n    } else if (assetValue * data?.qty === 0) {\n      return \"0.00\";\n    } else {\n      return (assetValue * datas?.qty).toFixed(datas.pre);\n    }\n  };\n\n  const currencyPrice = (datass) => {\n    return Number(data[datass.name].latest).toFixed(8);\n  };\n\n  const calculateCurrencyPrice = (value) => {\n    if (isCurrencySelected) {\n      if (isCurrencySelected === 'META1') {\n        return value / Number(data[\"META1\"].latest)\n      }\n      return JSON.parse(sessionStorage.getItem('currencyResult'))[isCurrencySelected] * value\n    } else {\n      return value\n    }\n  }\n\n  if (isLoading && loading) return <MetaLoader size={\"small\"} />;\n\n  return (\n    <TableContainer\n      component={Paper}\n      style={{\n        borderRadius: \"4px\",\n        boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, .11)\",\n      }}\n    >\n      <Table sx={{ minWidth: 700 }} aria-label=\"customized table\" className=\"custom_table_head\" >\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>\n              <div className=\"table_title\" style={{ width: \"6rem\", textAlign: 'center' }}>ASSET</div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"table_flex\">\n                <div className=\"table_title\">QTY</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"text-left\" style={{ width: \"6rem\" }}>\n                <div className=\"table_title\" id={\"valueTitle\"}>\n                  {`VALUE (${isCurrencySelected ? isCurrencySelected : userCurrency.split(\" \")[1]})`}\n                </div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"text-left\" style={{ width: \"6rem\" }}>\n                <div className=\"table_title\">24hr CHANGE</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"text-left\" style={{ width: \"6rem\" }}>\n                <div className=\"table_title\" id={\"priceTitle\"}>\n                  {`PRICE (${isCurrencySelected ? isCurrencySelected : userCurrency.split(\" \")[1]})`}\n                </div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">TRADE</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">SEND</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">DEPOSIT</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">WITHDRAW</div>\n              </div>\n            </StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data && lists?.map((datas) => (\n            <StyledTableRow key={datas?.name}>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {\n                  <div className=\"asset-image\">\n                    <Image size=\"mini\" src={datas?.image} />\n                    <div className=\"asset-name\">{datas?.name}</div>\n                  </div>\n                }\n              </StyledTableCell>\n              <StyledTableCell align=\"center\" className={\"bodyCell\"}>\n                {datas?.qty > 0 ? (datas?.qty * 1).toFixed(datas?.pre) : \"0.00\"}\n              </StyledTableCell>\n              <StyledTableCell align=\"center\" className={\"currencyValues\"}>\n                {datas?.qty > 0 ? removeExponent(Number((datas?.qty * 1)) * Number(\n                  (\n                    calculateCurrencyPrice(currencyPrice(datas, data[datas.name]) *\n                      Number(userCurrency.split(\" \")[2])\n                    ))\n                )) : removeExponent(0)}\n                {/* {removeExponent(Number(\n                  (\n                    currencyValue(datas) * Number(userCurrency.split(\" \")[2])\n                  ).toFixed(datas.pre)\n                ))} */}\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                {\n                  <div\n                    className={\n                      Number(data[datas.name].percent_change) >= 0\n                        ? \"plus\"\n                        : \"minus\"\n                    }\n                  >\n                    {data[datas.name].percent_change >= 0\n                      ? \"+\" + data[datas.name].percent_change\n                      : data[datas.name].percent_change}\n                    %\n                  </div>\n                }\n              </StyledTableCell>\n              <StyledTableCell align=\"right\" className={\"currencyPrices\"}>\n                {/* {datas?.qty > 0 ? removeExponent(Number((datas?.qty * 1).toFixed(datas?.pre)) * currencyValue(datas) * Number(userCurrency.split(\" \")[2])) : removeExponent(0)} */}\n                {removeExponent(Number(\n                  (\n                    calculateCurrencyPrice(currencyPrice(datas, data[datas.name]) *\n                      Number(userCurrency.split(\" \")[2]))\n                  )\n                ))}\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                <button\n                  onClick={() => {\n                    onAssetSelect(datas?.name);\n                  }}\n                  className={\"tradeButton\"}\n                >\n                  Trade\n                </button>\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                <button\n                  onClick={() => {\n                    onSendClick(datas?.name);\n                  }}\n                  className={\n                    datas.qty > 0 ? \"sendButton\" : \"sendButtonDisabled\"\n                  }\n                  disabled={datas.qty <= 0}\n                >\n                  Send\n                </button>\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                {datas.name !== \"XLM\" && datas.name !== \"BNB\" && datas.name !== \"EOS\" && datas.name !== \"META1\" && (\n                  <button\n                    onClick={() => {\n                      onDepositClick(datas.name);\n                    }}\n                    className={\"depositButton\"}\n                  >\n                    Deposit\n                  </button>\n                )}\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                {(datas.name == \"ETH\" || datas.name === \"USDT\") && (\n                  <button\n                    onClick={() => {\n                      onWithdrawClick(datas.name);\n                    }}\n                    className={\"withdrawButton\"}\n                  >\n                    Withdraw\n                  </button>\n                )}\n              </StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nexport default PortfolioTable;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/config/help.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js",["377"],"import React, { useState } from \"react\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport {\n  Button,\n  Message,\n  Checkbox,\n  Form,\n  Popup,\n  Grid,\n} from \"semantic-ui-react\";\n\nexport default function SubmitForm(props) {\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const [access, setAccess] = useState(false);\n  const [recover, setRecover] = useState(false);\n  const [stored, setStored] = useState(false);\n  const [living, setLiving] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const isAllChecked = access && recover && stored && living;\n\n  return (\n    <Grid>\n      <Grid.Column style={{ marginTop: \"1rem\" }} width={16}>\n        <Form>\n          <Form.Field>\n            <label>Password</label>\n            <div className=\"ui action input\">\n              <input value={props.password} type=\"text\" disabled />\n              <Popup\n                content=\"Copy to Clipboard.\"\n                trigger={\n                  <CopyToClipboard text={props.password} onCopy={() => {}}>\n                    <button\n                      name=\"copyToken\"\n                      style={{ color: \"#240000\" }}\n                      class=\"ui yellow right icon button\"\n                    >\n                      <i class=\"copy icon\" />\n                    </button>\n                  </CopyToClipboard>\n                }\n              />\n            </div>\n          </Form.Field>\n\n          <Message\n            className={\"messageRed\"}\n            icon=\"attention\"\n            header=\"Important information\"\n            content=\"If you forget your password phrase you will be unable to access your account and your funds. We cannot reset or restore your password! Memorize or write down your username and password!\"\n          />\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setAccess(!access)}\n              checked={access}\n              label=\"I understand that I will lose access to my funds if I lose my password\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setRecover(!recover)}\n              checked={recover}\n              label=\"I understand that no one can recover my password if I lose or forget it\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setStored(!stored)}\n              checked={stored}\n              label=\"I have written down or otherwise stored my password\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setLiving(!living)}\n              checked={living}\n              label=\" I am a living man or woman hence a living being\"\n            />\n          </Form.Field>\n\n          {isSubmitted && <MetaLoader size={\"small\"} />}\n          {!isSubmitted && (\n            <Button\n              className=\"sbBtn\"\n              onClick={() => {\n                setIsSubmitted(true);\n                props.onSubmit();\n              }}\n              disabled={!isAllChecked}\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          )}\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js",["378","379","380","381","382","383","384","385","386","387","388","389","390","391"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { key, ChainValidation } from \"meta1-vision-js\";\nimport AccountApi from \"../../lib/AccountApi\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"./SignUpForm.css\";\n\nimport { Button, Form, Grid, Input, Popup } from \"semantic-ui-react\";\n\nconst useDebounce = (value, timeout) => {\n  const [state, setState] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => setState(value), timeout);\n\n    return () => clearTimeout(handler);\n  }, [value, timeout]);\n\n  return state;\n};\n\nconst UserInformationForm = (props) => {\n  const [generatedPassword, setGeneratedPassword] = useState(\"\");\n  useEffect(() => {\n    if (generatedPassword === \"\") {\n      setGeneratedPassword(`P${key.get_random_key().toWif().toString()}`);\n    }\n  }, [generatedPassword]);\n\n  const [accountName, setAccountName] = useState(props.accountName || \"\");\n  const debouncedAccountName = useDebounce(accountName, 100);\n  const [accountNameErrors, setAccountNameErrors] = useState(null);\n  const [email, setEmail] = useState(props.email || \"\");\n  const [firstName, setFirstName] = useState(props.firstName || \"\");\n  const [lastName, setLastName] = useState(props.lastName || \"\");\n  const [phone, setPhone] = useState(props.phone || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [searchAccount, setSearchAccount] = useState([[\"PM\", \"\"]]);\n  const [touchedAccountName, setTouchedAccountName] = useState(false);\n  const [phoneError, setPhoneError] = useState(null);\n  const [emailError, setEmailError] = useState(null);\n  const [firstNameError, setFirstNameError] = useState(null);\n  const [lastNameError, setLastNameError] = useState(null);\n  useEffect(() => {\n    if (accountName) {\n      AccountApi.lookupAccounts(accountName, 1)\n        .then((res) => setSearchAccount(res))\n        .catch((err) => console.log(err));\n    }\n  }, [accountName]);\n  const hasNumber = (myString) => {\n    return /\\d/.test(myString);\n  }\n  const isVowelsNotExistAndHasNumber = (str) => {\n    if (str.match(/[aeiou]/gi) === null || hasNumber(str)) {\n      if (str.includes(\"-\")) {\n        return true;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n  useEffect(() => {\n    const error = ChainValidation.is_account_name_error(debouncedAccountName);\n    const error1 = isVowelsNotExistAndHasNumber(debouncedAccountName);\n    if (error) {\n      if (!error1) {\n        setAccountNameErrors({\n          content:\n            \"This is a premium name which is not supported by this faucet. Please enter a regular name containing least one dash, a number or no vowels.\",\n          pointing: \"below\",\n        });\n      } else {\n        setAccountNameErrors({\n          content: error,\n          pointing: \"below\",\n        });\n      }\n    } else if (!error1) {\n      setAccountNameErrors({\n        content:\n          \"This is a premium name which is not supported by this faucet. Please enter a regular name containing least one dash, a number or no vowels.\",\n        pointing: \"below\",\n      });\n    } else {\n      setAccountNameErrors(null);\n    }\n  }, [debouncedAccountName]);\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (isSubmitted) {\n      props.onSubmit(\n        accountName,\n        generatedPassword,\n        email,\n        phone,\n        lastName,\n        firstName\n      );\n    }\n    return () => setIsSubmitted(false);\n  }, [\n    firstName,\n    isSubmitted,\n    accountName,\n    generatedPassword,\n    props,\n    email,\n    lastName,\n    phone,\n  ]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n  return (\n    <>\n      <h2 className=\"head-title\">Create META Wallet</h2>\n      <Grid>\n        <Grid.Column width={16} className=\"singup-grid\">\n          <Form autoComplete=\"off\" onSubmit={setIsSubmitted}>\n            <div className=\"field\">\n              <Grid stackable>\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>First Name</label>\n                    <input\n                      value={firstName}\n                      onChange={(event) => {\n                        setFirstName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setFirstNameError(\n                            \"Your First Name must not contain special characters\"\n                          );\n                        } else {\n                          setFirstNameError(null);\n                        }\n                      }}\n                      placeholder=\"First Name\"\n                      required\n                    />\n                    {firstNameError && (\n                      <p style={{ color: \"red\" }}> {firstNameError}</p>\n                    )}\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Email</label>\n                    <input\n                      onChange={(event) => {\n                        setEmail(event.target.value);\n                        if (\n                          !/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(\n                            event.target.value\n                          )\n                        ) {\n                          setEmailError(\"Invalid Email\");\n                        } else {\n                          setEmailError(null);\n                        }\n                      }}\n                      value={email}\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      required\n                    />\n                    {emailError && (\n                      <p style={{ color: \"red\" }}> {emailError}</p>\n                    )}\n                  </Form.Field>\n                </Grid.Column>\n\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>Last Name</label>\n                    <input\n                      value={lastName}\n                      onChange={(event) => {\n                        setLastName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setLastNameError(\n                            \"Your Last Name must not contain special characters\"\n                          );\n                        } else {\n                          setLastNameError(null);\n                        }\n                      }}\n                      placeholder=\"Last Name\"\n                      required\n                    />\n                    {lastNameError && (\n                      <p style={{ color: \"red\" }}> {lastNameError}</p>\n                    )}\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Phone Number</label>\n                    <input\n                      value={phone}\n                      onChange={(event) => {\n                        setPhone(event.target.value);\n                        if (\n                          !/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/g.test(\n                            event.target.value\n                          )\n                        ) {\n                          setPhoneError(\"Invalid Phone\");\n                        } else {\n                          setPhoneError(null);\n                        }\n                      }}\n                      title=\"+1-234-567-8900\"\n                      placeholder=\"Phone Number\"\n                      pattern=\"+[0-9]{2}-[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                      type=\"tel\"\n                      required\n                    />\n                    {phoneError && (\n                      <p style={{ color: \"red\" }}> {phoneError}</p>\n                    )}\n                  </Form.Field>\n                </Grid.Column>\n              </Grid>\n            </div>\n\n            <Form.Field>\n              <label>Account Name</label>\n              <input\n                control={Input}\n                value={accountName}\n                type=\"text\"\n                error={accountNameErrors}\n                placeholder=\"Account Name\"\n                onChange={({ target }) => {\n                  setAccountName(target.value.toLocaleLowerCase());\n                  setTouchedAccountName(true);\n                }}\n              />\n              {accountNameErrors?.content && touchedAccountName ? (\n                <p style={{ color: \"red\" }}> {accountNameErrors?.content}</p>\n              ) : null}\n            </Form.Field>\n\n            <Form.Field>\n              <label>Password test</label>\n              <div className=\"ui action input\">\n                <input value={generatedPassword} type=\"text\" disabled />\n                <CopyToClipboard text={generatedPassword} onCopy={() => {}}>\n                  <div\n                    name=\"copyToken\"\n                    className=\"ui yellow right icon button brown\"\n                  >\n                    <i className=\"fal fa-copy\" />\n                  </div>\n                </CopyToClipboard>\n              </div>\n            </Form.Field>\n\n            <Form.Field>\n              <label>Password Confirmation</label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </Form.Field>\n            {searchAccount.length > 0 && searchAccount[0][0] === accountName && (\n              <p style={{ color: \"red\" }}>Account is already used </p>\n            )}\n            <Form.Field>\n              <Button\n                // onClick={() => setIsSubmitted(true)}\n                className=\"yellow\"\n                style={{ color: \"#240000\" }}\n                type=\"submit\"\n                disabled={\n                  firstName === \"\" ||\n                  lastName === \"\" ||\n                  email === \"\" ||\n                  phone === \"\" ||\n                  accountNameErrors ||\n                  password !== generatedPassword ||\n                  (searchAccount.length > 0 ? searchAccount[0][0] === accountName : false) ||\n                  emailError ||\n                  phoneError ||\n                  firstNameError ||\n                  lastNameError\n                }\n              >\n                Submit\n              </Button>\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n};\n\nexport { UserInformationForm };\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/helpers/string.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/lib/AccountApi.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/index.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/selector.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/actions.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/reducer.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/saga.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/types.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/reducer.js",["392"],"import { getAccessToken, getLoginDetail } from '../../utils/localstorage';\nimport * as types from './types';\nimport logoNavbar from \"../../images/default-pic2.png\";\nimport logoDefault from \"../../images/default-pic1.png\";\nimport { Avatar } from '@mui/material';\nconst initialState = {\n    isLogin: false,\n    loading: false,\n    account: null,\n    token: '',\n    loginError: false,\n    msg: null,\n    user: null,\n    isTokenValid: true,\n    profileImage: logoDefault,\n    navbarProfileImage: logoNavbar\n};\nconst loginDetail = getLoginDetail();\nif(loginDetail){\n    initialState.isLogin = true;\n    initialState.account = loginDetail;\n    initialState.token = getAccessToken();\n}\n\nconst accountsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.LOGIN_REQUEST:\n            return {...state, loading: true, loginError: false };\n        case types.LOGIN_SUCCESS:\n            return {...state, loading: false, account: action.payload.accountName, token: action.payload.token, isLogin:true,loginError:false,msg:null };\n        case types.LOGIN_ERROR:\n            return {...state, loading: false, account: null, token: '', isLogin:false, loginError:true };\n        case types.LOGOUT_REQUEST:\n            return {...initialState, isLogin: false, account: null, token:'' };\n        case types.GET_USER_REQUEST:\n            return {...state, loading: true, user: null, isTokenValid: true, msg: null };\n        case types.GET_USER_SUCCESS:\n            const avatarImage = action.payload.avatarImage\n            return {...state, loading: false, user: action.payload.user, profileImage:avatarImage ? avatarImage : logoDefault, navbarProfileImage: avatarImage ? avatarImage : logoNavbar };\n        case types.GET_USER_ERROR:\n            return {...state, loading: false, user: null, isTokenValid: false, msg: action.payload.msg, profileImage: logoDefault, navbarProfileImage: logoNavbar };\n        case types.UPLOAD_AVATAR_REQUEST:\n            return {...state, loading: true };\n        case types.UPLOAD_AVATAR_SUCCESS:\n            return {...state, loading: false, profileImage: action.payload.avatarImage, navbarProfileImage: action.payload.avatarImage };\n        case types.DELETE_AVATAR_REQUEST:\n            return {...state, loading: true };\n        case types.DELETE_AVATAR_SUCCESS:\n            return {...state, loading: false, profileImage: logoDefault, navbarProfileImage: logoNavbar };\n        default:\n            return state;\n    }\n}\nexport default accountsReducer;\n","/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/account/saga.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/reducer.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/types.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/saga.js",["393","394"],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/actions.js",[],"/home/tricky/Documents/my-work/new-clone/meta-1-litewallet-2.0/src/store/meta1/selector.js",[],{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","severity":1,"message":"400","line":6,"column":10,"nodeType":"401","messageId":"402","endLine":6,"endColumn":26},{"ruleId":"399","severity":1,"message":"403","line":6,"column":28,"nodeType":"401","messageId":"402","endLine":6,"endColumn":40},{"ruleId":"399","severity":1,"message":"404","line":8,"column":10,"nodeType":"401","messageId":"402","endLine":8,"endColumn":21},{"ruleId":"399","severity":1,"message":"405","line":8,"column":43,"nodeType":"401","messageId":"402","endLine":8,"endColumn":58},{"ruleId":"399","severity":1,"message":"406","line":30,"column":26,"nodeType":"401","messageId":"402","endLine":30,"endColumn":40},{"ruleId":"399","severity":1,"message":"407","line":32,"column":59,"nodeType":"401","messageId":"402","endLine":32,"endColumn":74},{"ruleId":"399","severity":1,"message":"408","line":40,"column":9,"nodeType":"401","messageId":"402","endLine":40,"endColumn":19},{"ruleId":"399","severity":1,"message":"409","line":46,"column":9,"nodeType":"401","messageId":"402","endLine":46,"endColumn":18},{"ruleId":"399","severity":1,"message":"410","line":47,"column":9,"nodeType":"401","messageId":"402","endLine":47,"endColumn":19},{"ruleId":"399","severity":1,"message":"411","line":70,"column":19,"nodeType":"401","messageId":"402","endLine":70,"endColumn":29},{"ruleId":"399","severity":1,"message":"412","line":72,"column":10,"nodeType":"401","messageId":"402","endLine":72,"endColumn":25},{"ruleId":"399","severity":1,"message":"413","line":73,"column":10,"nodeType":"401","messageId":"402","endLine":73,"endColumn":26},{"ruleId":"399","severity":1,"message":"414","line":78,"column":10,"nodeType":"401","messageId":"402","endLine":78,"endColumn":18},{"ruleId":"399","severity":1,"message":"415","line":81,"column":18,"nodeType":"401","messageId":"402","endLine":81,"endColumn":27},{"ruleId":"399","severity":1,"message":"416","line":94,"column":10,"nodeType":"401","messageId":"402","endLine":94,"endColumn":23},{"ruleId":"417","severity":1,"message":"418","line":103,"column":6,"nodeType":"419","endLine":103,"endColumn":8,"suggestions":"420"},{"ruleId":"417","severity":1,"message":"421","line":148,"column":5,"nodeType":"419","endLine":148,"endColumn":40,"suggestions":"422"},{"ruleId":"399","severity":1,"message":"423","line":150,"column":9,"nodeType":"401","messageId":"402","endLine":150,"endColumn":12},{"ruleId":"417","severity":1,"message":"424","line":173,"column":5,"nodeType":"419","endLine":173,"endColumn":22,"suggestions":"425"},{"ruleId":"417","severity":1,"message":"426","line":183,"column":5,"nodeType":"419","endLine":183,"endColumn":39,"suggestions":"427"},{"ruleId":"417","severity":1,"message":"428","line":268,"column":6,"nodeType":"419","endLine":268,"endColumn":19,"suggestions":"429"},{"ruleId":"399","severity":1,"message":"430","line":286,"column":18,"nodeType":"401","messageId":"402","endLine":286,"endColumn":34},{"ruleId":"399","severity":1,"message":"431","line":6,"column":8,"nodeType":"401","messageId":"402","endLine":6,"endColumn":22},{"ruleId":"432","severity":1,"message":"433","line":134,"column":21,"nodeType":"434","endLine":141,"endColumn":22},{"ruleId":"399","severity":1,"message":"435","line":4,"column":8,"nodeType":"401","messageId":"402","endLine":4,"endColumn":12},{"ruleId":"399","severity":1,"message":"436","line":16,"column":5,"nodeType":"401","messageId":"402","endLine":16,"endColumn":30},{"ruleId":"399","severity":1,"message":"437","line":3,"column":8,"nodeType":"401","messageId":"402","endLine":3,"endColumn":13},{"ruleId":"399","severity":1,"message":"438","line":6,"column":3,"nodeType":"401","messageId":"402","endLine":6,"endColumn":8},{"ruleId":"399","severity":1,"message":"439","line":11,"column":3,"nodeType":"401","messageId":"402","endLine":11,"endColumn":8},{"ruleId":"399","severity":1,"message":"440","line":12,"column":3,"nodeType":"401","messageId":"402","endLine":12,"endColumn":8},{"ruleId":"399","severity":1,"message":"441","line":24,"column":5,"nodeType":"401","messageId":"402","endLine":24,"endColumn":22},{"ruleId":"399","severity":1,"message":"411","line":12,"column":19,"nodeType":"401","messageId":"402","endLine":12,"endColumn":29},{"ruleId":"399","severity":1,"message":"442","line":14,"column":10,"nodeType":"401","messageId":"402","endLine":14,"endColumn":23},{"ruleId":"399","severity":1,"message":"443","line":15,"column":10,"nodeType":"401","messageId":"402","endLine":15,"endColumn":24},{"ruleId":"417","severity":1,"message":"444","line":36,"column":6,"nodeType":"419","endLine":36,"endColumn":33,"suggestions":"445"},{"ruleId":"399","severity":1,"message":"446","line":39,"column":9,"nodeType":"401","messageId":"402","endLine":39,"endColumn":22},{"ruleId":"399","severity":1,"message":"447","line":2,"column":8,"nodeType":"401","messageId":"402","endLine":2,"endColumn":13},{"ruleId":"399","severity":1,"message":"448","line":17,"column":30,"nodeType":"401","messageId":"402","endLine":17,"endColumn":36},{"ruleId":"399","severity":1,"message":"449","line":17,"column":38,"nodeType":"401","messageId":"402","endLine":17,"endColumn":45},{"ruleId":"399","severity":1,"message":"450","line":19,"column":28,"nodeType":"401","messageId":"402","endLine":19,"endColumn":33},{"ruleId":"451","severity":1,"message":"452","line":377,"column":5,"nodeType":"453","messageId":"454","endLine":543,"endColumn":6},{"ruleId":"399","severity":1,"message":"455","line":33,"column":5,"nodeType":"401","messageId":"402","endLine":33,"endColumn":16},{"ruleId":"399","severity":1,"message":"456","line":34,"column":5,"nodeType":"401","messageId":"402","endLine":34,"endColumn":22},{"ruleId":"399","severity":1,"message":"457","line":35,"column":5,"nodeType":"401","messageId":"402","endLine":35,"endColumn":20},{"ruleId":"399","severity":1,"message":"415","line":39,"column":18,"nodeType":"401","messageId":"402","endLine":39,"endColumn":27},{"ruleId":"399","severity":1,"message":"458","line":44,"column":10,"nodeType":"401","messageId":"402","endLine":44,"endColumn":15},{"ruleId":"399","severity":1,"message":"450","line":46,"column":28,"nodeType":"401","messageId":"402","endLine":46,"endColumn":33},{"ruleId":"459","severity":1,"message":"460","line":118,"column":20,"nodeType":"461","messageId":"462","endLine":118,"endColumn":22},{"ruleId":"417","severity":1,"message":"463","line":124,"column":6,"nodeType":"419","endLine":124,"endColumn":23,"suggestions":"464"},{"ruleId":"399","severity":1,"message":"465","line":150,"column":9,"nodeType":"401","messageId":"402","endLine":150,"endColumn":15},{"ruleId":"399","severity":1,"message":"466","line":160,"column":11,"nodeType":"401","messageId":"402","endLine":160,"endColumn":17},{"ruleId":"399","severity":1,"message":"467","line":5,"column":18,"nodeType":"401","messageId":"402","endLine":5,"endColumn":22},{"ruleId":"399","severity":1,"message":"468","line":5,"column":24,"nodeType":"401","messageId":"402","endLine":5,"endColumn":28},{"ruleId":"399","severity":1,"message":"469","line":5,"column":3,"nodeType":"401","messageId":"402","endLine":5,"endColumn":8},{"ruleId":"399","severity":1,"message":"468","line":6,"column":3,"nodeType":"401","messageId":"402","endLine":6,"endColumn":7},{"ruleId":"399","severity":1,"message":"470","line":7,"column":3,"nodeType":"401","messageId":"402","endLine":7,"endColumn":9},{"ruleId":"399","severity":1,"message":"467","line":8,"column":3,"nodeType":"401","messageId":"402","endLine":8,"endColumn":7},{"ruleId":"399","severity":1,"message":"471","line":9,"column":3,"nodeType":"401","messageId":"402","endLine":9,"endColumn":9},{"ruleId":"399","severity":1,"message":"449","line":17,"column":20,"nodeType":"401","messageId":"402","endLine":17,"endColumn":27},{"ruleId":"417","severity":1,"message":"472","line":41,"column":6,"nodeType":"419","endLine":41,"endColumn":13,"suggestions":"473"},{"ruleId":"399","severity":1,"message":"474","line":2,"column":10,"nodeType":"401","messageId":"402","endLine":2,"endColumn":25},{"ruleId":"399","severity":1,"message":"475","line":5,"column":10,"nodeType":"401","messageId":"402","endLine":5,"endColumn":20},{"ruleId":"399","severity":1,"message":"438","line":7,"column":3,"nodeType":"401","messageId":"402","endLine":7,"endColumn":8},{"ruleId":"399","severity":1,"message":"469","line":7,"column":10,"nodeType":"401","messageId":"402","endLine":7,"endColumn":15},{"ruleId":"399","severity":1,"message":"467","line":7,"column":25,"nodeType":"401","messageId":"402","endLine":7,"endColumn":29},{"ruleId":"399","severity":1,"message":"468","line":7,"column":31,"nodeType":"401","messageId":"402","endLine":7,"endColumn":35},{"ruleId":"399","severity":1,"message":"439","line":7,"column":37,"nodeType":"401","messageId":"402","endLine":7,"endColumn":42},{"ruleId":"399","severity":1,"message":"449","line":34,"column":22,"nodeType":"401","messageId":"402","endLine":34,"endColumn":29},{"ruleId":"399","severity":1,"message":"476","line":48,"column":10,"nodeType":"401","messageId":"402","endLine":48,"endColumn":23},{"ruleId":"399","severity":1,"message":"477","line":51,"column":10,"nodeType":"401","messageId":"402","endLine":51,"endColumn":25},{"ruleId":"399","severity":1,"message":"478","line":51,"column":27,"nodeType":"401","messageId":"402","endLine":51,"endColumn":45},{"ruleId":"417","severity":1,"message":"479","line":85,"column":6,"nodeType":"419","endLine":85,"endColumn":37,"suggestions":"480"},{"ruleId":"417","severity":1,"message":"481","line":105,"column":6,"nodeType":"419","endLine":105,"endColumn":38,"suggestions":"482"},{"ruleId":"459","severity":1,"message":"483","line":167,"column":31,"nodeType":"461","messageId":"462","endLine":167,"endColumn":33},{"ruleId":"399","severity":1,"message":"468","line":8,"column":17,"nodeType":"401","messageId":"402","endLine":8,"endColumn":21},{"ruleId":"399","severity":1,"message":"471","line":8,"column":37,"nodeType":"401","messageId":"402","endLine":8,"endColumn":43},{"ruleId":"399","severity":1,"message":"484","line":10,"column":10,"nodeType":"401","messageId":"402","endLine":10,"endColumn":20},{"ruleId":"399","severity":1,"message":"485","line":10,"column":22,"nodeType":"401","messageId":"402","endLine":10,"endColumn":32},{"ruleId":"399","severity":1,"message":"486","line":10,"column":34,"nodeType":"401","messageId":"402","endLine":10,"endColumn":42},{"ruleId":"399","severity":1,"message":"487","line":10,"column":44,"nodeType":"401","messageId":"402","endLine":10,"endColumn":52},{"ruleId":"459","severity":1,"message":"460","line":33,"column":53,"nodeType":"461","messageId":"462","endLine":33,"endColumn":55},{"ruleId":"399","severity":1,"message":"488","line":36,"column":9,"nodeType":"401","messageId":"402","endLine":36,"endColumn":12},{"ruleId":"399","severity":1,"message":"489","line":37,"column":10,"nodeType":"401","messageId":"402","endLine":37,"endColumn":21},{"ruleId":"399","severity":1,"message":"490","line":37,"column":23,"nodeType":"401","messageId":"402","endLine":37,"endColumn":37},{"ruleId":"399","severity":1,"message":"491","line":41,"column":19,"nodeType":"401","messageId":"402","endLine":41,"endColumn":29},{"ruleId":"399","severity":1,"message":"492","line":48,"column":10,"nodeType":"401","messageId":"402","endLine":48,"endColumn":26},{"ruleId":"399","severity":1,"message":"493","line":51,"column":19,"nodeType":"401","messageId":"402","endLine":51,"endColumn":29},{"ruleId":"399","severity":1,"message":"494","line":52,"column":10,"nodeType":"401","messageId":"402","endLine":52,"endColumn":17},{"ruleId":"417","severity":1,"message":"495","line":102,"column":6,"nodeType":"419","endLine":102,"endColumn":16,"suggestions":"496"},{"ruleId":"417","severity":1,"message":"497","line":123,"column":6,"nodeType":"419","endLine":123,"endColumn":24,"suggestions":"498"},{"ruleId":"399","severity":1,"message":"499","line":151,"column":9,"nodeType":"401","messageId":"402","endLine":151,"endColumn":20},{"ruleId":"417","severity":1,"message":"500","line":222,"column":6,"nodeType":"419","endLine":222,"endColumn":32,"suggestions":"501"},{"ruleId":"417","severity":1,"message":"502","line":283,"column":6,"nodeType":"419","endLine":283,"endColumn":23,"suggestions":"503"},{"ruleId":"399","severity":1,"message":"504","line":284,"column":9,"nodeType":"401","messageId":"402","endLine":284,"endColumn":21},{"ruleId":"399","severity":1,"message":"505","line":301,"column":9,"nodeType":"401","messageId":"402","endLine":301,"endColumn":18},{"ruleId":"399","severity":1,"message":"506","line":29,"column":5,"nodeType":"401","messageId":"402","endLine":29,"endColumn":12},{"ruleId":"399","severity":1,"message":"456","line":30,"column":5,"nodeType":"401","messageId":"402","endLine":30,"endColumn":22},{"ruleId":"399","severity":1,"message":"507","line":34,"column":21,"nodeType":"401","messageId":"402","endLine":34,"endColumn":33},{"ruleId":"459","severity":1,"message":"460","line":95,"column":27,"nodeType":"461","messageId":"462","endLine":95,"endColumn":29},{"ruleId":"417","severity":1,"message":"508","line":100,"column":6,"nodeType":"419","endLine":100,"endColumn":38,"suggestions":"509"},{"ruleId":"417","severity":1,"message":"510","line":140,"column":6,"nodeType":"419","endLine":140,"endColumn":37,"suggestions":"511"},{"ruleId":"417","severity":1,"message":"512","line":148,"column":6,"nodeType":"419","endLine":148,"endColumn":8,"suggestions":"513"},{"ruleId":"459","severity":1,"message":"483","line":162,"column":31,"nodeType":"461","messageId":"462","endLine":162,"endColumn":33},{"ruleId":"459","severity":1,"message":"483","line":164,"column":19,"nodeType":"461","messageId":"462","endLine":164,"endColumn":21},{"ruleId":"417","severity":1,"message":"514","line":229,"column":6,"nodeType":"419","endLine":229,"endColumn":44,"suggestions":"515"},{"ruleId":"459","severity":1,"message":"460","line":894,"column":38,"nodeType":"461","messageId":"462","endLine":894,"endColumn":40},{"ruleId":"516","severity":1,"message":"517","line":922,"column":36,"nodeType":"518","messageId":"519","endLine":922,"endColumn":38},{"ruleId":"516","severity":1,"message":"517","line":942,"column":36,"nodeType":"518","messageId":"519","endLine":942,"endColumn":38},{"ruleId":"417","severity":1,"message":"520","line":32,"column":9,"nodeType":"419","endLine":32,"endColumn":16,"suggestions":"521"},{"ruleId":"399","severity":1,"message":"522","line":20,"column":9,"nodeType":"401","messageId":"402","endLine":20,"endColumn":19},{"ruleId":"399","severity":1,"message":"523","line":21,"column":9,"nodeType":"401","messageId":"402","endLine":21,"endColumn":18},{"ruleId":"399","severity":1,"message":"524","line":24,"column":9,"nodeType":"401","messageId":"402","endLine":24,"endColumn":19},{"ruleId":"399","severity":1,"message":"525","line":25,"column":9,"nodeType":"401","messageId":"402","endLine":25,"endColumn":22},{"ruleId":"516","severity":1,"message":"517","line":85,"column":49,"nodeType":"518","messageId":"519","endLine":85,"endColumn":51},{"ruleId":"399","severity":1,"message":"526","line":2,"column":17,"nodeType":"401","messageId":"402","endLine":2,"endColumn":22},{"ruleId":"399","severity":1,"message":"470","line":2,"column":24,"nodeType":"401","messageId":"402","endLine":2,"endColumn":30},{"ruleId":"399","severity":1,"message":"527","line":6,"column":10,"nodeType":"401","messageId":"402","endLine":6,"endColumn":27},{"ruleId":"399","severity":1,"message":"528","line":6,"column":29,"nodeType":"401","messageId":"402","endLine":6,"endColumn":46},{"ruleId":"399","severity":1,"message":"529","line":6,"column":48,"nodeType":"401","messageId":"402","endLine":6,"endColumn":59},{"ruleId":"399","severity":1,"message":"530","line":23,"column":10,"nodeType":"401","messageId":"402","endLine":23,"endColumn":19},{"ruleId":"399","severity":1,"message":"531","line":23,"column":21,"nodeType":"401","messageId":"402","endLine":23,"endColumn":33},{"ruleId":"399","severity":1,"message":"532","line":24,"column":10,"nodeType":"401","messageId":"402","endLine":24,"endColumn":24},{"ruleId":"399","severity":1,"message":"533","line":24,"column":26,"nodeType":"401","messageId":"402","endLine":24,"endColumn":43},{"ruleId":"399","severity":1,"message":"534","line":201,"column":7,"nodeType":"401","messageId":"402","endLine":201,"endColumn":30},{"ruleId":"399","severity":1,"message":"535","line":296,"column":7,"nodeType":"401","messageId":"402","endLine":296,"endColumn":17},{"ruleId":"399","severity":1,"message":"435","line":4,"column":8,"nodeType":"401","messageId":"402","endLine":4,"endColumn":12},{"ruleId":"399","severity":1,"message":"436","line":14,"column":5,"nodeType":"401","messageId":"402","endLine":14,"endColumn":30},{"ruleId":"399","severity":1,"message":"536","line":5,"column":66,"nodeType":"401","messageId":"402","endLine":5,"endColumn":75},{"ruleId":"399","severity":1,"message":"450","line":31,"column":28,"nodeType":"401","messageId":"402","endLine":31,"endColumn":33},{"ruleId":"399","severity":1,"message":"537","line":75,"column":9,"nodeType":"401","messageId":"402","endLine":75,"endColumn":22},{"ruleId":"459","severity":1,"message":"460","line":251,"column":30,"nodeType":"461","messageId":"462","endLine":251,"endColumn":32},{"ruleId":"399","severity":1,"message":"538","line":16,"column":9,"nodeType":"401","messageId":"402","endLine":16,"endColumn":17},{"ruleId":"399","severity":1,"message":"539","line":1,"column":38,"nodeType":"401","messageId":"402","endLine":1,"endColumn":48},{"ruleId":"399","severity":1,"message":"440","line":7,"column":37,"nodeType":"401","messageId":"402","endLine":7,"endColumn":42},{"ruleId":"417","severity":1,"message":"540","line":88,"column":6,"nodeType":"419","endLine":88,"endColumn":28,"suggestions":"541"},{"ruleId":"542","severity":1,"message":"543","line":153,"column":41,"nodeType":"544","messageId":"545","endLine":153,"endColumn":42,"suggestions":"546"},{"ruleId":"542","severity":1,"message":"547","line":153,"column":49,"nodeType":"544","messageId":"545","endLine":153,"endColumn":50,"suggestions":"548"},{"ruleId":"542","severity":1,"message":"543","line":153,"column":65,"nodeType":"544","messageId":"545","endLine":153,"endColumn":66,"suggestions":"549"},{"ruleId":"542","severity":1,"message":"547","line":153,"column":73,"nodeType":"544","messageId":"545","endLine":153,"endColumn":74,"suggestions":"550"},{"ruleId":"542","severity":1,"message":"547","line":153,"column":82,"nodeType":"544","messageId":"545","endLine":153,"endColumn":83,"suggestions":"551"},{"ruleId":"542","severity":1,"message":"547","line":153,"column":86,"nodeType":"544","messageId":"545","endLine":153,"endColumn":87,"suggestions":"552"},{"ruleId":"542","severity":1,"message":"543","line":153,"column":102,"nodeType":"544","messageId":"545","endLine":153,"endColumn":103,"suggestions":"553"},{"ruleId":"542","severity":1,"message":"547","line":153,"column":110,"nodeType":"544","messageId":"545","endLine":153,"endColumn":111,"suggestions":"554"},{"ruleId":"542","severity":1,"message":"543","line":153,"column":127,"nodeType":"544","messageId":"545","endLine":153,"endColumn":128,"suggestions":"555"},{"ruleId":"542","severity":1,"message":"547","line":153,"column":135,"nodeType":"544","messageId":"545","endLine":153,"endColumn":136,"suggestions":"556"},{"ruleId":"542","severity":1,"message":"543","line":202,"column":64,"nodeType":"544","messageId":"545","endLine":202,"endColumn":65,"suggestions":"557"},{"ruleId":"399","severity":1,"message":"558","line":5,"column":10,"nodeType":"401","messageId":"402","endLine":5,"endColumn":16},{"ruleId":"399","severity":1,"message":"559","line":3,"column":58,"nodeType":"401","messageId":"402","endLine":3,"endColumn":75},{"ruleId":"399","severity":1,"message":"560","line":3,"column":77,"nodeType":"401","messageId":"402","endLine":3,"endColumn":96},"no-native-reassign",["561"],"no-negated-in-lhs",["562"],"no-unused-vars","'getCryptosChange' is defined but never used.","Identifier","unusedVar","'loginRequest' is defined but never used.","'getUserData' is defined but never used.","'getLastLocation' is defined but never used.","'setAccessToken' is defined but never used.","'isLoginSelector' is defined but never used.","'tokenState' is assigned a value but never used.","'demoState' is assigned a value but never used.","'meta1State' is assigned a value but never used.","'setAccount' is assigned a value but never used.","'userImageNavbar' is assigned a value but never used.","'userImageDefault' is assigned a value but never used.","'password' is assigned a value but never used.","'setOrders' is assigned a value but never used.","'tokenModalMsg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'onLogin'. Either include them or remove the dependency array.","ArrayExpression",["563"],"React Hook useEffect has a missing dependency: 'onLogin'. Either include it or remove the dependency array.",["564"],"'loc' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'crypt', 'userDataState.message?.currency', and 'userDataState.message.userAvatar'. Either include them or remove the dependency array.",["565"],"React Hook useEffect has missing dependencies: 'dispatch' and 'errorMsgState'. Either include them or remove the dependency array.",["566"],"React Hook useEffect has a missing dependency: 'metaUrl'. Either include it or remove the dependency array.",["567"],"'chngLastLocation' is defined but never used.","'WidgetOnRamper' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'user' is defined but never used.","'onClickPaperWalletHandler' is assigned a value but never used.","'axios' is defined but never used.","'Image' is defined but never used.","'Label' is defined but never used.","'Popup' is defined but never used.","'getAvatarFromBack' is assigned a value but never used.","'readyToCreate' is assigned a value but never used.","'accountChecked' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'portfolioReceiver'. Either include it or remove the dependency array.",["568"],"'getPrivateKey' is assigned a value but never used.","'Meta1' is defined but never used.","'assets' is assigned a value but never used.","'account' is assigned a value but never used.","'error' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'accountName' is assigned a value but never used.","'portfolioReceiver' is assigned a value but never used.","'setFullPorfolio' is assigned a value but never used.","'check' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'currencyValue' and 'totalSum'. Either include them or remove the dependency array.",["569"],"'chosen' is assigned a value but never used.","'crypto' is assigned a value but never used.","'Grid' is defined but never used.","'Icon' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'Header' is defined but never used.","React Hook useEffect has a missing dependency: 'fetcher'. Either include it or remove the dependency array.",["570"],"'CopyToClipboard' is defined but never used.","'PrivateKey' is defined but never used.","'clickedInputs' is assigned a value but never used.","'isValidCurrency' is assigned a value but never used.","'setIsValidCurrency' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'asset', 'assets', 'options', and 'selectedFrom.value'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedFrom' needs the current value of 'selectedFrom.value'.",["571"],"React Hook useEffect has a missing dependency: 'selectedFrom'. Either include it or remove the dependency array.",["572"],"Expected '!==' and instead saw '!='.","'helpSendTo' is defined but never used.","'helpAmount' is defined but never used.","'helpMax1' is defined but never used.","'helpSwap' is defined but never used.","'pre' is assigned a value but never used.","'chosenCrypt' is assigned a value but never used.","'setChosenCrypt' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'accountIsLoading' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'newOptions'. Either include it or remove the dependency array.",["573"],"React Hook useEffect has missing dependencies: 'balance' and 'clickedInputs'. Either include them or remove the dependency array.",["574"],"'setSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'balance', 'clickedInputs', 'portfolioReceiver', 'receiver', and 'sender'. Either include them or remove the dependency array.",["575"],"React Hook useEffect has a missing dependency: 'portfolio'. Either include it or remove the dependency array.",["576"],"'PasswordForm' is assigned a value but never used.","'ariaLabel' is assigned a value but never used.","'metaUrl' is assigned a value but never used.","'setPortfolio' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clickedInputs', 'portfolio', and 'userCurrency'. Either include them or remove the dependency array.",["577"],"React Hook useEffect has missing dependencies: 'asset', 'assets', 'options', 'selectedFrom.value', and 'selectedTo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedFrom' needs the current value of 'selectedFrom.value'.",["578"],"React Hook useEffect has a missing dependency: 'isMobile'. Either include it or remove the dependency array.",["579"],"React Hook useEffect has missing dependencies: 'handleCalculateSelectedFrom' and 'handleCalculateSelectedTo'. Either include them or remove the dependency array.",["580"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.",["581"],"'qrRightPos' is assigned a value but never used.","'textWidth' is assigned a value but never used.","'logoHeight' is assigned a value but never used.","'logoPositionX' is assigned a value but never used.","'Input' is defined but never used.","'removeAccessToken' is defined but never used.","'removeLoginDetail' is defined but never used.","'setLocation' is defined but never used.","'openModal' is assigned a value but never used.","'setOpenModal' is assigned a value but never used.","'openVideoModal' is assigned a value but never used.","'setOpenVideoModal' is assigned a value but never used.","'ModalWalletInstructions' is assigned a value but never used.","'VideoModal' is assigned a value but never used.","'portfolio' is assigned a value but never used.","'currencyValue' is assigned a value but never used.","'isMobile' is assigned a value but never used.","'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'isVowelsNotExistAndHasNumber'. Either include it or remove the dependency array.",["582"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["583","584"],"Unnecessary escape character: \\\".",["585","586"],["587","588"],["589","590"],["591","592"],["593","594"],["595","596"],["597","598"],["599","600"],["601","602"],["603","604"],"'Avatar' is defined but never used.","'meta1ConnectError' is defined but never used.","'meta1ConnectSuccess' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},{"desc":"643","fix":"644"},{"messageId":"645","fix":"646","desc":"647"},{"messageId":"648","fix":"649","desc":"650"},{"messageId":"645","fix":"651","desc":"647"},{"messageId":"648","fix":"652","desc":"650"},{"messageId":"645","fix":"653","desc":"647"},{"messageId":"648","fix":"654","desc":"650"},{"messageId":"645","fix":"655","desc":"647"},{"messageId":"648","fix":"656","desc":"650"},{"messageId":"645","fix":"657","desc":"647"},{"messageId":"648","fix":"658","desc":"650"},{"messageId":"645","fix":"659","desc":"647"},{"messageId":"648","fix":"660","desc":"650"},{"messageId":"645","fix":"661","desc":"647"},{"messageId":"648","fix":"662","desc":"650"},{"messageId":"645","fix":"663","desc":"647"},{"messageId":"648","fix":"664","desc":"650"},{"messageId":"645","fix":"665","desc":"647"},{"messageId":"648","fix":"666","desc":"650"},{"messageId":"645","fix":"667","desc":"647"},{"messageId":"648","fix":"668","desc":"650"},{"messageId":"645","fix":"669","desc":"647"},{"messageId":"648","fix":"670","desc":"650"},"Update the dependencies array to be: [login, onLogin]",{"range":"671","text":"672"},"Update the dependencies array to be: [accountNameState, loginErrorState, onLogin]",{"range":"673","text":"674"},"Update the dependencies array to be: [crypt, cryptoDataState, userDataState.message?.currency, userDataState.message.userAvatar]",{"range":"675","text":"676"},"Update the dependencies array to be: [userDataState, isTokenValidState, errorMsgState, dispatch]",{"range":"677","text":"678"},"Update the dependencies array to be: [accountName, metaUrl]",{"range":"679","text":"680"},"Update the dependencies array to be: [debouncedAccount, account, portfolioReceiver]",{"range":"681","text":"682"},"Update the dependencies array to be: [portfolio, data, totalSum, currencyValue]",{"range":"683","text":"684"},"Update the dependencies array to be: [asset, fetcher]",{"range":"685","text":"686"},"Update the dependencies array to be: [asset, assets, options, props.assets, props.portfolio, selectedFrom.value]",{"range":"687","text":"688"},"Update the dependencies array to be: [selectedFromAmount, blockPrice, selectedFrom]",{"range":"689","text":"690"},"Update the dependencies array to be: [newOptions, receiver]",{"range":"691","text":"692"},"Update the dependencies array to be: [amount, balance, clickedInputs, receiver]",{"range":"693","text":"694"},"Update the dependencies array to be: [debouncedAccount, amount, clickedInputs, balance, portfolioReceiver, receiver, sender]",{"range":"695","text":"696"},"Update the dependencies array to be: [assetCh, assets, portfolio]",{"range":"697","text":"698"},"Update the dependencies array to be: [selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrency]",{"range":"699","text":"700"},"Update the dependencies array to be: [asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",{"range":"701","text":"702"},"Update the dependencies array to be: [isMobile]",{"range":"703","text":"704"},"Update the dependencies array to be: [handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",{"range":"705","text":"706"},"Update the dependencies array to be: [delay, value]",{"range":"707","text":"708"},"Update the dependencies array to be: [debouncedAccountName, isVowelsNotExistAndHasNumber]",{"range":"709","text":"710"},"removeEscape",{"range":"711","text":"712"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"713","text":"714"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"715","text":"712"},{"range":"716","text":"714"},{"range":"717","text":"712"},{"range":"718","text":"714"},{"range":"719","text":"712"},{"range":"720","text":"714"},{"range":"721","text":"712"},{"range":"722","text":"714"},{"range":"723","text":"712"},{"range":"724","text":"714"},{"range":"725","text":"712"},{"range":"726","text":"714"},{"range":"727","text":"712"},{"range":"728","text":"714"},{"range":"729","text":"712"},{"range":"730","text":"714"},{"range":"731","text":"712"},{"range":"732","text":"714"},{"range":"733","text":"712"},{"range":"734","text":"714"},[4750,4752],"[login, onLogin]",[5932,5967],"[accountNameState, loginErrorState, onLogin]",[6845,6862],"[crypt, cryptoDataState, userDataState.message?.currency, userDataState.message.userAvatar]",[7087,7121],"[userDataState, isTokenValidState, errorMsgState, dispatch]",[9511,9524],"[accountName, metaUrl]",[1347,1374],"[debouncedAccount, account, portfolioReceiver]",[3649,3666],"[portfolio, data, totalSum, currencyValue]",[1131,1138],"[asset, fetcher]",[2928,2959],"[asset, assets, options, props.assets, props.portfolio, selectedFrom.value]",[3569,3601],"[selectedFromAmount, blockPrice, selectedFrom]",[3620,3630],"[newOptions, receiver]",[4198,4216],"[amount, balance, clickedInputs, receiver]",[6910,6936],"[debouncedAccount, amount, clickedInputs, balance, portfolioReceiver, receiver, sender]",[8345,8362],"[assetCh, assets, portfolio]",[3457,3489],"[selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrency]",[4675,4706],"[asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",[4869,4871],"[isMobile]",[7179,7217],"[handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",[1489,1496],"[delay, value]",[3134,3156],"[debouncedAccountName, isVowelsNotExistAndHasNumber]",[5138,5139],"",[5138,5138],"\\",[5146,5147],[5146,5146],[5162,5163],[5162,5162],[5170,5171],[5170,5170],[5179,5180],[5179,5179],[5183,5184],[5183,5183],[5199,5200],[5199,5199],[5207,5208],[5207,5207],[5224,5225],[5224,5224],[5232,5233],[5232,5232],[7164,7165],[7164,7164]]