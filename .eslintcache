[{"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/index.js":"1","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/App.js":"2","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/index.js":"3","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js":"4","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js":"5","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/CheckPassword.js":"6","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/selector.js":"7","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/API/API.js":"8","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/actions.js":"9","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/Portfolio.js":"10","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/selector.js":"11","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/actions.js":"12","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/SendWithPassword.js":"13","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/localstorage.js":"14","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js":"15","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js":"16","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js":"17","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Settings/Settings.js":"18","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js":"19","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js":"20","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Footer/Footer.js":"21","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/UI/loader/Loader.js":"22","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/saga.js":"23","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/reducer.js":"24","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/index.js":"25","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js":"26","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/index.js":"27","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SendForm/index.js":"28","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/DepositForm/index.js":"29","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/WithdrawForm/index.js":"30","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/types.js":"31","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/types.js":"32","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchHistory.js":"33","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js":"34","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/commonFunction.js":"35","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js":"36","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js":"37","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/useDebounce.js":"38","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx":"39","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js":"40","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js":"41","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js":"42","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js":"43","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js":"44","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js":"45","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/saga.js":"46","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/reducer.js":"47","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/saga.js":"48","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/reducer.js":"49","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js":"50","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js":"51","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/config/help.js":"52","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js":"53","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/string.js":"54","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/AccountApi.js":"55","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/signature.js":"56","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/utility.js":"57","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/TransactionHash.jsx":"58","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/useAssets.js":"59","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/UseAccount.js":"60","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/Cache.js":"61","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/common.js":"62","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/FaceKiForm.js":"63","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/OpenOrder/index.jsx":"64","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchOpenOrder.js":"65","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/MarketClasses.js":"66","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/utils.js":"67","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/asset_utils.js":"68","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/asset_constants.js":"69","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/MigrationForm.js":"70"},{"size":662,"mtime":1662645792961,"results":"71","hashOfConfig":"72"},{"size":34373,"mtime":1662968437130,"results":"73","hashOfConfig":"72"},{"size":887,"mtime":1662458083977,"results":"74","hashOfConfig":"72"},{"size":1127,"mtime":1663246040181,"results":"75","hashOfConfig":"72"},{"size":590,"mtime":1654004845481,"results":"76","hashOfConfig":"72"},{"size":787,"mtime":1662458083972,"results":"77","hashOfConfig":"72"},{"size":1682,"mtime":1662458098863,"results":"78","hashOfConfig":"72"},{"size":9726,"mtime":1663335163181,"results":"79","hashOfConfig":"72"},{"size":3609,"mtime":1662458083975,"results":"80","hashOfConfig":"72"},{"size":2386,"mtime":1648912407000,"results":"81","hashOfConfig":"72"},{"size":694,"mtime":1662458083980,"results":"82","hashOfConfig":"72"},{"size":1630,"mtime":1662458083977,"results":"83","hashOfConfig":"72"},{"size":709,"mtime":1648912407000,"results":"84","hashOfConfig":"72"},{"size":888,"mtime":1654004845483,"results":"85","hashOfConfig":"72"},{"size":8535,"mtime":1662458083969,"results":"86","hashOfConfig":"72"},{"size":3656,"mtime":1662458083968,"results":"87","hashOfConfig":"72"},{"size":8971,"mtime":1662968437122,"results":"88","hashOfConfig":"72"},{"size":13194,"mtime":1662458083969,"results":"89","hashOfConfig":"72"},{"size":8346,"mtime":1662968437122,"results":"90","hashOfConfig":"72"},{"size":5524,"mtime":1662458083968,"results":"91","hashOfConfig":"72"},{"size":17474,"mtime":1662458083966,"results":"92","hashOfConfig":"72"},{"size":1348,"mtime":1648864532000,"results":"93","hashOfConfig":"72"},{"size":263,"mtime":1662458083982,"results":"94","hashOfConfig":"72"},{"size":191,"mtime":1662458083980,"results":"95","hashOfConfig":"72"},{"size":10642,"mtime":1662458083970,"results":"96","hashOfConfig":"72"},{"size":36093,"mtime":1662458083966,"results":"97","hashOfConfig":"72"},{"size":6821,"mtime":1663333557780,"results":"98","hashOfConfig":"72"},{"size":24144,"mtime":1662458083969,"results":"99","hashOfConfig":"72"},{"size":4262,"mtime":1662458083965,"results":"100","hashOfConfig":"72"},{"size":15775,"mtime":1662458083970,"results":"101","hashOfConfig":"72"},{"size":1669,"mtime":1662458083976,"results":"102","hashOfConfig":"72"},{"size":845,"mtime":1662458083980,"results":"103","hashOfConfig":"72"},{"size":1733,"mtime":1662458083974,"results":"104","hashOfConfig":"72"},{"size":2226,"mtime":1648864532000,"results":"105","hashOfConfig":"72"},{"size":72,"mtime":1654004845483,"results":"106","hashOfConfig":"72"},{"size":4341,"mtime":1662730274703,"results":"107","hashOfConfig":"72"},{"size":3776,"mtime":1662458083967,"results":"108","hashOfConfig":"72"},{"size":445,"mtime":1662458083975,"results":"109","hashOfConfig":"72"},{"size":15165,"mtime":1662458098861,"results":"110","hashOfConfig":"72"},{"size":546,"mtime":1648864532000,"results":"111","hashOfConfig":"72"},{"size":6655,"mtime":1662968437122,"results":"112","hashOfConfig":"72"},{"size":2698,"mtime":1650439168000,"results":"113","hashOfConfig":"72"},{"size":2111,"mtime":1648864532000,"results":"114","hashOfConfig":"72"},{"size":6308,"mtime":1662968401028,"results":"115","hashOfConfig":"72"},{"size":7674,"mtime":1663246040180,"results":"116","hashOfConfig":"72"},{"size":5327,"mtime":1662968401029,"results":"117","hashOfConfig":"72"},{"size":4828,"mtime":1662458098862,"results":"118","hashOfConfig":"72"},{"size":1611,"mtime":1662458083979,"results":"119","hashOfConfig":"72"},{"size":1980,"mtime":1662458083978,"results":"120","hashOfConfig":"72"},{"size":9416,"mtime":1663246040180,"results":"121","hashOfConfig":"72"},{"size":432,"mtime":1654004845479,"results":"122","hashOfConfig":"72"},{"size":1402,"mtime":1654004845479,"results":"123","hashOfConfig":"72"},{"size":3654,"mtime":1662458083968,"results":"124","hashOfConfig":"72"},{"size":250,"mtime":1654004845479,"results":"125","hashOfConfig":"72"},{"size":531,"mtime":1662458083972,"results":"126","hashOfConfig":"72"},{"size":1096,"mtime":1662458098863,"results":"127","hashOfConfig":"72"},{"size":29040,"mtime":1662458083971,"results":"128","hashOfConfig":"72"},{"size":828,"mtime":1662458083970,"results":"129","hashOfConfig":"72"},{"size":877,"mtime":1662458083970,"results":"130","hashOfConfig":"72"},{"size":497,"mtime":1662458083970,"results":"131","hashOfConfig":"72"},{"size":282,"mtime":1662458083970,"results":"132","hashOfConfig":"72"},{"size":1149,"mtime":1662458098863,"results":"133","hashOfConfig":"72"},{"size":3642,"mtime":1663158904373,"results":"134","hashOfConfig":"72"},{"size":5867,"mtime":1663246040179,"results":"135","hashOfConfig":"72"},{"size":4276,"mtime":1663246040181,"results":"136","hashOfConfig":"72"},{"size":41990,"mtime":1654004845482,"results":"137","hashOfConfig":"72"},{"size":14138,"mtime":1662458083987,"results":"138","hashOfConfig":"72"},{"size":4334,"mtime":1663246040182,"results":"139","hashOfConfig":"72"},{"size":1502,"mtime":1663246040181,"results":"140","hashOfConfig":"72"},{"size":2058,"mtime":1663568664418,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"1yd6kr1",{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"144"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"144"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"144"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"144"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"144"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"144"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"144"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"144"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"144"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"144"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"144"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"144"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"144"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"144"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"144"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"144"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"144"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"144"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"144"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"144"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"144"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"144"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"144"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"144"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"144"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"144"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"144"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"144"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"144"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/index.js",[],["315","316"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/App.js",["317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345"],"import axios from \"axios\";\nimport { PrivateKey, Signature } from \"meta1-vision-js\";\nimport \"regenerator-runtime/runtime\";\nimport TradeWithPassword from \"./lib/TradeWithPassword\";\nimport SendWithPassword from \"./lib/SendWithPassword\";\nimport fetchDepositAddress from \"./lib/fetchDepositAddress\";\nimport Portfolio from \"./lib/Portfolio\";\nimport { getCryptosChange, loginRequest } from \"./API/API\";\nimport React, { useState, useEffect } from \"react\";\nimport { getUserData, changeLastLocation, getLastLocation } from \"./API/API\";\nimport SignUpForm from \"./components/SignUpForm\";\nimport DepositForm from \"./components/DepositForm\";\nimport WithdrawForm from \"./components/WithdrawForm\";\nimport ExchangeForm from \"./components/ExchangeForm\";\nimport SendForm from \"./components/SendForm\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport Wallet from \"./components/Wallet\";\nimport Settings from \"./components/Settings/Settings\";\nimport logoNavbar from \"./images/default-pic2.png\";\nimport logoDefalt from \"./images/default-pic1.png\";\nimport \"./App.css\";\nimport Meta1 from \"meta1-vision-dex\";\nimport MetaLoader from \"./UI/loader/Loader\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport LeftPanel from \"./components/LeftPanel/LeftPanel\";\nimport Footer from \"./components/Footer/Footer\";\nimport RightSideHelpMenuSecondType from \"./components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport PaperWalletLogin from \"./components/PaperWalletLogin/PaperWalletLogin\";\nimport { OrdersTable } from \"./components/Wallet/OrdersTable\";\nimport CheckPassword from \"./lib/CheckPassword\";\nimport { Button, Modal } from \"semantic-ui-react\";\nimport { getAccessToken, setAccessToken } from \"./utils/localstorage\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { accountsSelector, tokenSelector, loaderSelector, isLoginSelector, loginErrorSelector, demoSelector, isTokenValidSelector, userDataSelector, errorMsgSelector, checkTransferableModelSelector } from \"./store/account/selector\";\nimport { checkAccountSignatureReset, checkTransferableModelAction, checkTransferableRequest, getUserRequest, loginRequestService, logoutRequest } from \"./store/account/actions\";\nimport { checkPasswordObjSelector, cryptoDataSelector, meta1Selector, portfolioReceiverSelector, senderApiSelector, traderSelector } from \"./store/meta1/selector\";\nimport { getCryptosChangeRequest, meta1ConnectSuccess, resetMetaStore, setUserCurrencyAction } from \"./store/meta1/actions\";\nimport OpenOrder  from \"./components/OpenOrder\";\n\nwindow.Meta1 = Meta1;\nfunction Application(props) {\n  const accountNameState = useSelector(accountsSelector);\n  const tokenState = useSelector(tokenSelector);\n  const loaderState = useSelector(loaderSelector);\n  const loginErrorState = useSelector(loginErrorSelector);\n  const isTokenValidState = useSelector(isTokenValidSelector);\n  const userDataState = useSelector(userDataSelector);\n  const errorMsgState = useSelector(errorMsgSelector);\n  const demoState = useSelector(demoSelector);\n  const meta1State = useSelector(meta1Selector);\n  const cryptoDataState = useSelector(cryptoDataSelector);\n\n  const portfolioReceiverState = useSelector(portfolioReceiverSelector);\n  const traderState = useSelector(traderSelector);\n  const checkPasswordObjState = useSelector(checkPasswordObjSelector);\n  const senderApiState = useSelector(senderApiSelector);\n  const checkTransferableModelState = useSelector(checkTransferableModelSelector);\n\n  const { metaUrl } = props;\n  const domAccount =\n    props.account !== null &&\n      props.account !== undefined &&\n      props.account.length > 0\n      ? props.account\n      : null;\n\n  if (domAccount) window.localStorage.setItem(\"account\", domAccount);\n\n  const crypt = {\n    EUR: [0, \"€\"],\n    GBP: [1, \"£\"],\n    RUB: [2, \"₽\"],\n    CAD: [3, \"CA$\"],\n  };\n\n  const [tradeAsset, setTradeAsset] = useState(\"USDT\");\n  const [fetchDepositFn, setFetchDepositFn] = useState(null);\n  const [activeScreen, setActiveScreen] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [accountName, setAccountName] = useState(domAccount);\n  const [password, setPassword] = useState(\n    window.localStorage.getItem(\"password\")\n  );\n  const [orders, setOrders] = useState([]);\n  const [portfolio, setPortfolio] = useState(null);\n  const [portfolioFull, setFullPortfolio] = useState([]);\n  const [assets, setAssets] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const setCredentials = (account, password) => {\n    setAccountName(account);\n    setPassword(password);\n  };\n  const [login, setLogin] = useState(localStorage.getItem(\"login\"));\n  const [loginError, setLoginError] = useState(null);\n  const [loginDataError, setLoginDataError] = useState(false);\n  const [tokenModalOpen, setTokenModalOpen] = useState(false);\n  const [tokenModalMsg, setTokenModalMsg] = useState('');\n  const [userCurrency, setUserCurrency] = useState(\"$ USD 1\");\n  const [refreshData, setRefreshData] = useState(false);\n  const [fromSignUp, setFromSignUp] = useState(false);\n  const [isSignatureProcessing, setIsSignatureProcessing] = useState(false);\n  const [signatureResult, setSignatureResult] = useState(null);\n  const dispatch = useDispatch();\n\n  const urlParams = window.location.search.replace('?', '').split('&');\n  const signatureParam = urlParams[0].split('=');\n\n  useEffect(() => {\n    if (login !== null) {\n      onLogin(login);\n    }\n  }, []);\n\n  const onLogin = async (login, clicked = false, password = '', fromSignUpFlag = false) => {\n    setIsLoading(true);\n    if (clicked) {\n      dispatch(loginRequestService({login ,password, setLoginDataError, fromSignUpFlag}));\n    }\n    if (getAccessToken()) {\n      dispatch(checkTransferableRequest({ login }))\n      await getAvatarFromBack(login);\n      setLoginError(null);\n      setAccountName(login);\n      localStorage.setItem(\"login\", login);\n      setLogin(login);\n      if (clicked) {\n        setLoginError(true);\n      }\n      setIsLoading(false);\n      if (fromSignUpFlag) {\n        setFromSignUp(prev => {\n          return true\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (signatureParam[0] === 'signature') {\n      setIsSignatureProcessing(true);\n      setSignatureResult(signatureParam[1]);\n      setActiveScreen('registration');\n    }\n  },[signatureParam]);\n\n  useEffect(() => {\n    if (loginErrorState) {\n      setIsLoading(false);\n      setLoginDataError(true);\n    }\n    if (accountNameState) {\n      setLoginDataError(false);\n      onLogin(accountNameState,false)\n      if (fromSignUp) {\n        setPortfolio(null);\n        setRefreshData(prev=>!prev);\n        dispatch(resetMetaStore());\n        setFromSignUp(false);\n        if (accountNameState) {\n          setActiveScreen(\"wallet\");\n        }\n      }\n    }\n    if (accountNameState === null) {\n      setAccountName(null);\n      setLogin(null);\n      setPortfolio(null);\n      setActiveScreen(\"login\");\n    }\n  },[accountNameState, loginErrorState]);\n\n  const loc = React.useMemo(() => {\n    if (\n      activeScreen !== \"sendFunds\" &&\n      activeScreen !== \"login\" &&\n      activeScreen != null\n    ) {\n      sessionStorage.setItem(\"location\", activeScreen);\n    }\n    return true;\n  }, [activeScreen]);\n  useEffect(()=>{\n      if (userDataState?.message?.currency === \"USD\") {\n      } else if (userDataState?.message?.currency) {\n          const userCurrencyData = `${crypt[userDataState?.message?.currency][1]} ${userDataState?.message?.currency} ${cryptoDataState.ExchangeRate[crypt[userDataState?.message?.currency][0]].rate\n          }`\n          dispatch(setUserCurrencyAction(userCurrencyData))\n      }\n  },[cryptoDataState]);\n  useEffect(() => {\n    if (!isTokenValidState) {\n      setTokenModalOpen(true);\n      setTokenModalMsg(errorMsgState);\n    } else {\n      if (userDataState) {\n        dispatch(getCryptosChangeRequest())\n      }\n    }\n  },[userDataState, isTokenValidState]);\n  async function getAvatarFromBack(login) {\n    dispatch(getUserRequest(login));\n  }\n\n  useEffect(() => {\n    async function fetchPortfolio() {\n      if (portfolioReceiverState === null) return;\n      if (portfolio !== null) return;\n      if (accountNameState === null || accountNameState.length === 0) return;\n      try {\n        const fetched = await portfolioReceiverState.fetch();\n        setAssets(fetched.assets);\n        setPortfolio(fetched.portfolio);\n        setFullPortfolio(fetched.full);\n        localStorage.setItem(\"account\", accountNameState);\n        setActiveScreen(\n          sessionStorage.getItem(\"location\") != null\n            ? sessionStorage.getItem(\"location\")\n            : \"wallet\"\n        );\n      } catch (e) {\n        setActiveScreen(\"login\");\n      }\n    }\n    fetchPortfolio();\n  }, [portfolioReceiverState, portfolio, accountName, refreshData ]);\n\n  useEffect(() => {\n    async function connect() {\n      setIsLoading(true);\n      Meta1.connect(metaUrl || process.env.REACT_APP_MAIA).then(\n        () => {\n          setIsLoading(false);\n          if (\n            accountNameState == null ||\n            accountNameState.length === 0 ||\n            !localStorage.getItem(\"login\")\n          ) {\n            setActiveScreen(\"login\");\n          } else {\n            setActiveScreen(\n              sessionStorage.getItem(\"location\") != null\n                ? sessionStorage.getItem(\"location\")\n                : \"wallet\"\n            );\n            setFetchDepositFn((asset) => (asset) => {\n              return fetchDepositAddress({ accountName: accountNameState, asset });\n            });\n            const portfolioObj = new Portfolio({\n              metaApi: Meta1,\n              accountName: accountNameState,\n            });\n            const tradeWithPasswordObj = new TradeWithPassword({\n              metaApi: Meta1,\n              login: accountNameState,\n            });\n\n            const checkPasswordObj = new CheckPassword({\n              metaApi: Meta1,\n              login: accountNameState,\n            });\n          \n            const sendWithPasswordObj = new SendWithPassword({\n              metaApi: Meta1,\n              login: accountNameState,\n            });\n            const obj = { \n                portfolioReceiver: portfolioObj,\n                trader: tradeWithPasswordObj,\n                checkPasswordObj,\n                senderApi: sendWithPasswordObj\n            };\n            dispatch(meta1ConnectSuccess(obj))\n          }\n        },\n        () => {\n          setActiveScreen(\"login\");\n          setLoginError(\"Error occured\");\n        }\n      );\n    }\n    connect();\n  }, [accountNameState]);\n\n  function refetchPortfolio() {\n    setTimeout(async () => {\n      const fetched = await portfolioReceiverState.fetch();\n      setPortfolio(fetched.portfolio);\n      setFullPortfolio(fetched.full);\n    }, 2000);\n  }\n\n  const onRegistration = async (acc, pass, regEmail) => {\n    localStorage.setItem(\"account\", acc);\n    localStorage.setItem(\"login\", acc);\n    setCredentials(acc, pass);\n    await onLogin(acc, true, pass, true);\n    setActiveScreen(\"wallet\");\n    window.location.replace('http://localhost:3000');\n  };\n\n  async function chngLastLocation(location) {\n    if (location && location !== \"login\") {\n      await changeLastLocation(localStorage.getItem(\"login\"), location);\n    }\n  }\n\n  if (isLoading || loaderState || activeScreen == null) {\n    return <MetaLoader size={\"large\"} />;\n  }\n\n  return (\n    <>\n      <Navbar\n        onClickHomeHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setActiveScreen(\"login\");\n        }}\n        onClickPortfolioHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setActiveScreen(\"wallet\");\n        }}\n        onClickExchangeHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setTradeAsset(\"BTC\");\n          setActiveScreen(\"exchange\");\n        }}\n        onClickPaperWalletHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setActiveScreen(\"paperWallet\");\n        }}\n        onClickOrderTableHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setActiveScreen(\"orderTable\");\n        }}\n        onClickSettingsHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setActiveScreen(\"settings\");\n        }}\n        onClickHistoryHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setActiveScreen(\"orderTable\");\n        }}\n        onClickOpenOrderHandler={(e) => {\n          e.preventDefault();\n          dispatch(getUserRequest(login));\n          setActiveScreen(\"openOrder\");\n        }}\n        portfolio={portfolio}\n        name={accountName}\n        activeScreen={activeScreen}\n      />\n      <div className={\"forAdapt\"}>\n        <LeftPanel\n          onClickHomeHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setActiveScreen(\"login\");\n          }}\n          onClickPortfolioHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setActiveScreen(\"wallet\");\n          }}\n          onClickExchangeHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setTradeAsset(\"BTC\");\n            setActiveScreen(\"exchange\");\n          }}\n          onClickPaperWalletHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setActiveScreen(\"paperWallet\");\n          }}\n          onClickOrderTableHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setActiveScreen(\"orderTable\");\n          }}\n          onClickSettingsHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setActiveScreen(\"settings\");\n          }}\n          onClickHistoryHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setActiveScreen(\"orderTable\");\n          }}\n          onClickOpenOrderHandler={(e) => {\n            e.preventDefault();\n            dispatch(getUserRequest(login));\n            setActiveScreen(\"openOrder\");\n          }}\n          portfolio={portfolio}\n          name={accountName}\n          activeScreen={activeScreen}\n        />\n        <div style={{ width: \"100%\" }} className=\"App\">\n          <div className=\"AppContent\">\n            {activeScreen === \"registration\" && (\n              <div className={\"fullBlockWithAdapt\"}>\n                <SignUpForm\n                  {...props}\n                  onRegistration={onRegistration}\n                  onBackClick={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                  onClickExchangeUSDTHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"USDT\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                  onClickExchangeEOSHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"EOS\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                  portfolio={portfolio}\n                  isSignatureProcessing={isSignatureProcessing}\n                  signatureResult={signatureResult}\n                />\n                <Footer\n                  onClickHomeHandler={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                />\n              </div>\n            )}\n            {activeScreen === \"settings\" && (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"space-between\",\n                  height: \"100%\",\n                }}\n              >\n                <Settings\n                  fetcher={fetchDepositFn}\n                  asset={tradeAsset}\n                  address={\"\"}\n                  onBackClick={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"wallet\");\n                  }}\n                  onClickExchangeUSDTHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"USDT\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                  onClickExchangeEOSHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"EOS\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                  getAvatarFromBack={getAvatarFromBack}\n                  userCurrency={userCurrency}\n                  setUserCurrency={setUserCurrency}\n                  setTokenModalMsg={setTokenModalMsg}\n                  setTokenModalOpen={setTokenModalOpen}\n                />\n                <Footer\n                  onClickHomeHandler={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                />\n              </div>\n            )}\n            {activeScreen === \"exchange\" && (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"space-between\",\n                  height: \"100%\",\n                }}\n              >\n                <ExchangeForm\n                  onBackClick={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"wallet\");\n                  }}\n                  onSuccessModal={() => setActiveScreen(\"wallet\")}\n                  onSuccessTrade={() => {\n                    setPortfolio(null);\n                    refetchPortfolio();\n                  }}\n                  portfolio={portfolio}\n                  asset={tradeAsset}\n                  metaUrl={metaUrl}\n                  assets={assets}\n                  onClickExchangeUSDTHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"USDT\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                  onClickExchangeEOSHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"EOS\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                />\n                <Footer\n                  onClickHomeHandler={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                />\n              </div>\n            )}\n\n            {activeScreen === \"login\" && (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"space-between\",\n                  height: \"100%\",\n                }}\n              >\n                <LoginScreen\n                  onSignUpClick={() => setActiveScreen(\"registration\")}\n                  error={loginError}\n                  loginDataError={loginDataError}\n                  setLoginDataError={setLoginDataError}\n                  onSubmit={onLogin}\n                  portfolio={portfolio}\n                  onClickExchangeUSDTHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"USDT\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                  onClickExchangeEOSHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"EOS\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                />\n                <Footer\n                  onClickHomeHandler={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                />\n              </div>\n            )}\n\n            {activeScreen === \"sendFunds\" && (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"space-between\",\n                  height: \"100%\",\n                }}\n              >\n                <SendForm\n                  onBackClick={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"wallet\");\n                  }}\n                  portfolio={portfolio}\n                  onSuccessTransfer={() => {\n                    setActiveScreen(\"wallet\");\n                    setPortfolio(null);\n                    refetchPortfolio();\n                  }}\n                  asset={tradeAsset}\n                  sender={accountName}\n                  assets={assets}\n                  onClickExchangeUSDTHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"USDT\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                  onClickExchangeEOSHandler={(e) => {\n                    e.preventDefault();\n                    setTradeAsset(\"EOS\");\n                    setActiveScreen(\"exchange\");\n                  }}\n                />\n                <Footer\n                  onClickHomeHandler={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                />\n              </div>\n            )}\n\n            {activeScreen === \"deposit\" && (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"space-between\",\n                  height: \"100%\",\n                }}\n              >\n                <DepositForm\n                  account={account}\n                  fetcher={fetchDepositFn}\n                  asset={tradeAsset}\n                  address={\"\"}\n                  onBackClick={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"wallet\");\n                  }}\n                />\n                <Footer\n                  onClickHomeHandler={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                />\n              </div>\n            )}\n\n            {activeScreen === \"withdraw\" && (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"space-between\",\n                  height: \"100%\",\n                }}\n              >\n                <WithdrawForm\n                  account={account}\n                  accountName={accountName}\n                  asset={tradeAsset}\n                  assets={assets}\n                  portfolio={portfolio}\n                  onBackClick={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"wallet\");\n                  }}\n                  setTokenModalOpen={setTokenModalOpen}\n                  setTokenModalMsg={setTokenModalMsg}\n                />\n                <Footer\n                  onClickHomeHandler={(e) => {\n                    e.preventDefault();\n                    setActiveScreen(\"login\");\n                  }}\n                />\n              </div>\n            )}\n\n            {activeScreen === \"wallet\" && (\n              <>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-between\",\n                    height: \"100%\",\n                  }}\n                >\n                  <div>\n                    <div style={{ background: \"#fff\", padding: \"1.1rem 2rem\" }}>\n                      <h5 style={{ fontSize: \"1.15rem\", fontWeight: \"600\" }}>\n                        <strong>Portfolio</strong>\n                      </h5>\n                    </div>\n                    <div className={\"justFlexAndDirect customJustFlexAndDirect\"}>\n                      <div\n                        className={\"blockInfoYourCrypto blockInfoYourCryptoCustom\"}\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          borderRadius: \"8px\",\n                        }}\n                      >\n                        <Wallet\n                          assets={assets}\n                          portfolio={portfolioFull}\n                          tradeAsset={tradeAsset}\n                          onSendClick={(assetName) => {\n                            setTradeAsset(assetName);\n                            setActiveScreen(\"sendFunds\");\n                          }}\n                          onDepositClick={(assetName) => {\n                            setTradeAsset(assetName);\n                            setActiveScreen(\"deposit\");\n                          }}\n                          onWithdrawClick={(assetName) => {\n                            setTradeAsset(assetName);\n                            setActiveScreen(\"withdraw\");\n                          }}\n                          onAssetSelect={(name) => {\n                            setTradeAsset(name);\n                            setActiveScreen(\"exchange\");\n                          }}\n                          account={account}\n                          accountName={accountName}\n                          onClickExchangeUSDTHandler={(e) => {\n                            e.preventDefault();\n                            setTradeAsset(\"USDT\");\n                            setActiveScreen(\"exchange\");\n                          }}\n                          onClickExchangeEOSHandler={(e) => {\n                            e.preventDefault();\n                            setTradeAsset(\"EOS\");\n                            setActiveScreen(\"exchange\");\n                          }}\n                          setFullPortfolio={setFullPortfolio}\n                          userCurrency={userCurrency}\n                        />\n                      </div>\n                      <div className={\"bottomAdaptBlock\"}>\n                        <RightSideHelpMenuSecondType\n                          onClickExchangeUSDTHandler={(e) => {\n                            e.preventDefault();\n                            setTradeAsset(\"USDT\");\n                            setActiveScreen(\"exchange\");\n                          }}\n                          onClickExchangeEOSHandler={(e) => {\n                            e.preventDefault();\n                            setTradeAsset(\"EOS\");\n                            setActiveScreen(\"exchange\");\n                          }}\n                          fromHistory={false}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <Footer\n                    onClickHomeHandler={(e) => {\n                      e.preventDefault();\n                      setActiveScreen(\"login\");\n                    }}\n                  />\n                </div>\n              </>\n            )}\n            {activeScreen === \"paperWallet\" && (\n              <>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-between\",\n                    height: \"100%\",\n                  }}\n                >\n                  <div>\n                    <div style={{ background: \"#fff\", padding: \"1.1rem 2rem\" }}>\n                      <h5 style={{ fontSize: \"1.15rem\", fontWeight: \"600\" }}>\n                        <strong>Paper Wallet</strong>\n                      </h5>\n                    </div>\n                    <div className={\"paperWalletStyles\"}>\n                      <PaperWalletLogin />\n                    </div>\n                  </div>\n                  <Footer\n                    onClickHomeHandler={(e) => {\n                      e.preventDefault();\n                      setActiveScreen(\"login\");\n                    }}\n                  />\n                </div>\n              </>\n            )}\n            {activeScreen === \"orderTable\" && (\n              <>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-between\",\n                    height: \"100%\",\n                  }}\n                >\n                  <div>\n                    <div style={{ background: \"#fff\", padding: \"1.1rem 2rem\" }}>\n                      <h5 style={{ fontSize: \"1.15rem\", fontWeight: \"600\" }}>\n                        <strong>Transfer History</strong>\n                      </h5>\n                    </div>\n                    <div className={\"justFlexAndDirect\"}>\n                      <div className={\"paperWalletStylesTH marginBottomZero marginBottomCustom\"}>\n                        <OrdersTable\n                          data={orders}\n                          column={null}\n                          direction={null}\n                          assets={assets}\n                        />\n                      </div>\n                      <div className={\"bottomAdaptBlock margin-class newBottomAdaptBlock\"}>\n                        <RightSideHelpMenuSecondType\n                          onClickExchangeUSDTHandler={(e) => {\n                            e.preventDefault();\n                            setTradeAsset(\"USDT\");\n                            setActiveScreen(\"exchange\");\n                          }}\n                          onClickExchangeEOSHandler={(e) => {\n                            e.preventDefault();\n                            setTradeAsset(\"EOS\");\n                            setActiveScreen(\"exchange\");\n                          }}\n                          fromHistory={true}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <Footer\n                    onClickHomeHandler={(e) => {\n                      e.preventDefault();\n                      setActiveScreen(\"login\");\n                    }}\n                  />\n                </div>\n              </>\n            )}\n            {activeScreen === \"openOrder\" && (\n              <>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-between\",\n                    height: \"100%\",\n                  }}\n                >\n                  <div>\n                    <div style={{ background: \"#fff\", padding: \"1.1rem 2rem\" }}>\n                      <h5 style={{ fontSize: \"1.15rem\", fontWeight: \"600\" }}>\n                        <strong>Open Order</strong>\n                      </h5>\n                    </div>\n                    <div className={\"justFlexAndDirect\"}>\n                      <div className={\"paperWalletStylesTH marginBottomZero marginBottomCustom\"}>\n                        <OpenOrder\n                          data={orders}\n                          column={null}\n                          direction={null}\n                          assets={assets}\n                          portfolio={portfolio}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <Footer\n                    onClickHomeHandler={(e) => {\n                      e.preventDefault();\n                      setActiveScreen(\"login\");\n                    }}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      {tokenModalOpen && <Modal\n        size=\"mini\"\n        open={true}\n        onClose={() => {\n          // setModalOpened(false);\n        }}\n        id={\"modalExch\"}\n      >\n        <Modal.Header>Alert</Modal.Header>\n        <Modal.Content style={{ height: \"55%\" }}>\n          <div\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <h3 style={{ textAlign: \"center\" }}>\n              {errorMsgState}. Please Login\n            </h3>\n          </div>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n            onClick={() => {\n              setTokenModalOpen(false);\n              dispatch(logoutRequest())\n            }}\n          >\n            OK\n          </Button>\n        </Modal.Actions>\n      </Modal>}\n      <Modal\n        size=\"mini\"\n        className=\"claim_wallet_modal\"\n        onClose={() => {\n          dispatch(checkTransferableModelAction(false));\n          dispatch(checkAccountSignatureReset());\n        }}\n        open={checkTransferableModelState}\n        id={\"modalExch\"}\n      >\n\n        <Modal.Content >\n          <div\n            className=\"claim_wallet_btn_div\"\n\n          >\n            <h3 className=\"claim_model_content\">\n              Hello {accountName}<br />\n              To Claim your previous wallet META1, click on Button\n            </h3>\n          </div>\n        </Modal.Content>\n        <Modal.Actions className=\"claim_modal-action\">\n          <Button\n            className=\"claim_wallet_btn\"\n            onClick={() => {\n              dispatch(checkTransferableModelAction(false));\n              dispatch(checkAccountSignatureReset());\n            }}\n          >\n            Claim Wallet</Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n}\n\nexport function App({ domElement }) {\n  const metaUrl =\n    process.env.REACT_APP_META_URL || domElement.getAttribute(\"data-meta-url\");\n  const linkAccountUrl =\n    process.env.REACT_APP_LINK_ACCOUNT_URL || domElement.getAttribute(\"data-link-url\");\n  const email = domElement.getAttribute(\"data-email\");\n  const firstName = domElement.getAttribute(\"data-fname\");\n  const lastName = domElement.getAttribute(\"data-lname\");\n  const phone = domElement.getAttribute(\"data-phone\");\n  const account = domElement.getAttribute(\"data-account\");\n\n  return (\n    <Application\n      {...{\n        metaUrl,\n        linkAccountUrl,\n        email,\n        firstName,\n        lastName,\n        phone,\n        account,\n      }}\n    />\n  );\n}\n\nexport default App;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/index.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/CheckPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/selector.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/API/API.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/actions.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/Portfolio.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/selector.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/actions.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/SendWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/localstorage.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js",["346","347","348","349","350","351","352"],"import { useQuery } from \"react-query\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport Paper from \"@mui/material/Paper\";\nimport { getAsset, getFullName } from \"./cryptoChooser\";\nimport getHistory from \"../../lib/fetchHistory\";\nimport { removeExponent } from \"../../utils/commonFunction\";\nimport { useEffect, useState } from \"react\";\nimport { ChainTypes as grapheneChainTypes } from 'meta1-vision-js';\nimport { FormControl, Grid, InputLabel, MenuItem, Pagination, Select, Stack } from \"@mui/material\";\nimport { trxTypes } from \"../../helpers/utility\";\nimport TrxHash from './TransactionHash';\nimport { checkTokenRequest } from \"../../store/account/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { accountsSelector } from \"../../store/account/selector\";\n\nconst {operations} = grapheneChainTypes;\nconst ops = Object.keys(operations);\nops.push(\n\t'property_create_operation',\n\t'property_update_operation',\n\t'property_approve_operation',\n\t'property_delete_operation',\n\t'asset_price_publish_operation'\n);\nexport const OrdersTable = (props) => {\n  const dispatch = useDispatch();\n  const accountNameState = useSelector(accountsSelector);\n  const { column, direction, assets, account } = props;\n  const [pageNum, setPageNum] = useState(1);\n  const [perPage,setPerPage]= useState(10);\n  const [filterValues, setFilterValues] = useState('-1')\n  const [filterCollection, setFilterCollection] = useState([]);\n  const { data, isLoading, error } = useQuery([\"history\", pageNum, perPage, filterValues === \"-1\" ? '' : filterValues], getHistory);\n  useEffect(()=>{\n    if (Array.isArray(data)) {\n      setFilterCollection(data);\n    }\n  },[data]);\n  \n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.common.black,\n      fontWeight: 600,\n      fontSize: 15,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n      padding: 8,\n      color: \"#240000\",\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    \"&:last-child td, &:last-child th\": {\n      border: 0,\n    },\n  }));\n\n  const allFilterStatusArr = [\n    'transfer',\n    'limit_order_create',\n    'limit_order_cancel',\n    'fill_order',\n    'account_create',\n    'account_update',\n    'asset_create',\n    'witness_withdraw_pay',\n    'vesting_balance_withdraw',\n  ];\n  \n  const searchFilterListing = allFilterStatusArr.map( data => {\n    return { name: trxTypes[data].replace('account', 'wallet'), value: ops.indexOf(data) >= 0 ? ops.indexOf(data) : 'no found' };\n  });\n\n  const paginationOptions = [10,20,50,100];\n  let paginationOptionsFilter = [];\n  if (filterCollection.length > 0) {\n    if (filterCollection[0].count <= 50) {\n      if(filterCollection[0].count > 10) {\n        for(let i = 0; i < paginationOptions.length; i++) {\n          if (paginationOptions[i] <= filterCollection[0].count) {\n            paginationOptionsFilter.push(paginationOptions[i]);\n          } else if (paginationOptions[i-1] < filterCollection[0].count && paginationOptions[i] > filterCollection[0].count) {\n            paginationOptionsFilter.push(paginationOptions[i]);\n          }\n        }\n      }\n    } else {\n      paginationOptionsFilter = [...paginationOptions];\n    }\n  }\n\n  if (isLoading) return <MetaLoader size={\"small\"} />;\n\n  return (\n    <>\n    <Grid item md={10} className='search-grid'>\n        <Stack spacing={2}></Stack>\n        <FormControl variant=\"standard\" >\n          <Select\n            labelId=\"demo-simple-select-standard-label\"\n            id=\"demo-simple-select-standard\"\n            value={filterValues}\n            onChange={(e) => {\n              dispatch(checkTokenRequest(accountNameState));\n              setPageNum(1);\n              setFilterValues(e.target.value);\n            }}\n            label=\"Search\"\n            className=\"search-filter\"\n          >\n            <MenuItem value='-1' >Show All</MenuItem>\n            {searchFilterListing.map((option, index) => {\n              return <MenuItem key={index} value={option.value}>{option.name}</MenuItem>\n            })}\n          </Select>\n        </FormControl>\n      </Grid>\n      <TableContainer style={{ overflow: \"auto\" }} component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n        <TableHead>\n            <TableRow style={{ display: \"table-row\" }}>\n              <StyledTableCell\n                sorted={column === \"id\" ? direction : null}\n                onClick={() => {}}\n                align=\"left\"\n              >\n                Operation\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                Sender / Receiver\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">Transaction Hash</StyledTableCell>\n              <StyledTableCell align=\"left\">Time</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          {filterCollection.map((el, index) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell align=\"center\">\n                  <span\n                    className={`span-status-btn ${trxTypes[ops[el.op_type]] === 'Cancel order' ? 'transaction-span-cancel' : trxTypes[ops[el.op_type]] === 'Place order' ? 'transaction-span-place' : 'transaction-span-fill' }`}\n                  >\n                    {trxTypes[ops[el.op_type]].replace('account', 'wallet')}\n                  </span>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.operation_text}</h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <TrxHash trx={el.block_num} />\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.time}</h6>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n            {filterCollection.length === 0 && <StyledTableRow>\n              <StyledTableCell align=\"center\" colSpan={4}>\n                  <span>No record found</span>\n              </StyledTableCell>\n            </StyledTableRow>}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {filterCollection.length > 0 && filterCollection[0].count <= 10 && <Grid container spacing={2}>\n        <Grid item md={12}>\n          <div className=\"page_sec\">\n            <span>Total of {filterCollection[0].count} operations</span>\n          </div>\n        </Grid>\n      </Grid>}\n      {filterCollection.length > 0 && filterCollection[0].count > 10 && <Grid container spacing={2}>\n        <Grid item md={10}>\n          <Stack spacing={2}>\n            {filterCollection.length>0 && <div className=\"page_sec\">\n              <span>Total of {filterCollection[0].count} operations</span>\n              <Pagination \n                count={Math.ceil(filterCollection[0].count/perPage)} \n                shape=\"rounded\"\n                page={pageNum}\n                onChange={(e, num) => {\n                  setPageNum(num);\n                  dispatch(checkTokenRequest(accountNameState));\n                }}\n              />\n            </div>}\n          </Stack>\n        </Grid>\n        <Grid item md={1.5}  class='grid-css' >\n          <Stack spacing={2}>\n          <FormControl variant=\"standard\">\n            <Select\n              labelId=\"demo-simple-select-standard-label\"\n              id=\"demo-simple-select-standard\"\n              value={perPage}\n              onChange={(e) => {\n                dispatch(checkTokenRequest(accountNameState));\n                setPageNum(1);\n                setPerPage(e.target.value)}\n              }\n              label=\"Records per Page\"\n            >\n              {paginationOptionsFilter.map((option, index) => {\n                return <MenuItem key={index} value={option}>{option}/ Page</MenuItem>\n              })}\n            </Select>\n          </FormControl>\n          </Stack>\n        </Grid>\n      </Grid>}\n    </>\n  );\n};\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js",["353","354","355","356","357"],"/* eslint-disable array-callback-return */\nimport React, { useEffect, useState } from \"react\";\nimport { generateKeyFromPassword } from \"../../lib/createAccountWithPassword\";\nimport { Button, Form, FormField } from \"semantic-ui-react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { PrivateKey } from \"meta1-vision-js\";\nimport { createPaperWalletAsPDF } from \"./CreatePdfWallet\";\nimport Meta1 from \"meta1-vision-dex\";\nimport \"./style.css\";\nimport { useSelector } from \"react-redux\";\nimport { portfolioReceiverSelector } from \"../../store/meta1/selector\";\n\nexport default function PaperWalletLogin({ accountName }) {\n  const [account, setAccount] = useState(localStorage.getItem(\"login\") || accountName);\n  const [password, setPassword] = useState(\"\");\n  const [readyToCreate, setReadyToCreate] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(true);\n  const [check, setCheck] = useState(false);\n  const debouncedAccount = useDebounce(account, 500);\n  const portfolioReceiverState =  useSelector(portfolioReceiverSelector);\n  useEffect(() => {\n    if (account?.length > 0) {\n      async function fetchAccount(debouncedAccount) {\n        // Сделать запрос к АП\n        try {\n          await portfolioReceiverState.fetch(debouncedAccount);\n          setAccountChecked(true);\n        } catch (e) {\n          setAccountChecked(false);\n        }\n      }\n\n      if (debouncedAccount) {\n        fetchAccount(debouncedAccount);\n      } else {\n        setAccountChecked(false);\n      }\n    }\n  }, [debouncedAccount, account]);\n\n  // getting the privateKey\n  const getPrivateKey = (password) => PrivateKey.fromSeed(password).toWif();\n\n  const handleSubmit = () => {\n    setReadyToCreate(true);\n  };\n\n  // Generate owner, memo and active Key\n  let { privKey: owner_private } = generateKeyFromPassword(\n    account,\n    \"owner\",\n    password\n  );\n  let { privKey: active_private } = generateKeyFromPassword(\n    account,\n    \"active\",\n    password\n  );\n  let { privKey: memo_private } = generateKeyFromPassword(\n    account,\n    \"memo\",\n    password\n  );\n\n  const handleCreatePaperWallet = async () => {\n    try {\n      await Meta1.login(localStorage.getItem(\"login\"), password);\n      createPaperWalletAsPDF(\n        localStorage.getItem(\"login\"),\n        owner_private,\n        active_private,\n        memo_private\n      );\n    } catch (e) {\n      setCheck(true);\n    }\n  };\n\n  return (\n    <div className=\"login-width\">\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Login With\n          </label>\n          <input disabled value={\"Account Name (Cloud Wallet)\"} />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Account Name\n          </label>\n          <input\n            value={localStorage.getItem(\"login\") || accountName}\n            disabled\n            placeholder={\"Account Name\"}\n          />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n          Passkey\n          </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          {check !== false && <p style={{ color: \"red\" }}>Invalid Passkey</p>}\n        </FormField>\n        <Button\n          color=\"yellow\"\n          type=\"submit\"\n          fluid\n          onClick={handleCreatePaperWallet}\n          disabled={!password}\n        >\n          {\" \"}\n          Create Paper Wallet\n        </Button>\n      </Form>\n    </div>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js",["358","359","360"],"import React from \"react\";\nimport styles from \"./Navbar.module.scss\";\nimport \"./styles.css\";\nimport logo from \"../../images/Logo.png\";\nimport LeftPanelAdapt from \"../LeftPanelAdapt/LeftPanelAdapt\";\nimport WidgetOnRamper from \"./WidgetOnRamper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logoutRequest } from \"../../store/account/actions\";\nimport { navbarProfileImageSelector } from \"../../store/account/selector\";\n\nconst Navbar = (props) => {\n  const dispatch = useDispatch();\n  const navbarProfileImageState = useSelector(navbarProfileImageSelector)\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    onClickOpenOrderHandler,\n    portfolio,\n    name\n  } = props;\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n  const openInNewTab = url => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  };\n  return (\n    <>\n      <div\n        className=\"modal fade\"\n        id=\"fund\"\n        tabIndex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n          <div className=\"modal-content\">\n            <div className={\"modal-body onramper-wallet\"}>\n              <button\n                style={{ margin: \"0 0 0 97%\" }}\n                type=\"button\"\n                className=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              />\n              <iframe\n                src=\"https://widget.onramper.com/?color=ffc000&amp;defaultAmount=1000&amp;defaultFiat=USD&amp;defaultCrypto=BTC&amp;apiKey=pk_prod_k6LKERIMdGDE8geCxOApKSCy6mnfF5CuhI4TLZj55Wc0\"\n                title=\"myFrame\"\n                style={{ border: \"0\" }}\n                allowFullScreen=\"\"\n                aria-hidden=\"false\"\n                tabIndex=\"0\"\n                width=\"100%\"\n                height=\"600\"\n                frameBorder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <nav\n        className={\n          styles.navbar + \" navbar navbar-expand-lg navbar-dark bg-dark\"\n        }\n      >\n        <div className=\"container-fluid\">\n          <img\n            className={styles.img}\n            onClick={() => {\n              window.open(process.env.REACT_APP_WALLET_LOGO_HREF);\n            }}\n            style={{ cursor: \"pointer\" }}\n            src={logo}\n            alt=\"logo\"\n          />\n          {isMobile && portfolio ? (\n            <div className={styles.mobileName}>\n              <p>\n                <strong>Hello, {name}</strong>\n              </p>\n            </div>\n          ) : null}\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <div className={\"navbar-nav me-auto\"} />\n            <div className=\"d-flex\">\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <div className={styles.blockhelp}>\n                  <i\n                    className=\"far fa-question-circle\"\n                    style={{ marginRight: \".2rem\" }}\n                  />\n                  <span\n                    onClick={() => {\n                      window.open(process.env.REACT_APP_WALLET_FOOTER_SUPPORT_HREF);\n                    }}\n                  >\n                    Get help\n                  </span>\n                </div>\n                <div className=\"nav-item dropdown parent-this\">\n                  <a\n                    className={styles.btn}\n                    href=\"#\"\n                    id=\"navbarScrollingDropdown\"\n                    role=\"button\"\n                    data-bs-toggle=\"dropdown\"\n                    aria-expanded=\"false\"\n                  >\n                    Fund Wallet\n                   <span \n                   className=\"nav-link dropdown-toggle for-dropdown\"\n                    id=\"navbarScrollingDropdown\"\n                   ></span>\n                    <div\n                      className={\"imgUser\"}\n                      style={{ marginLeft: \".3rem\" }}\n                    >\n                    </div>\n                  </a>\n                  <ul\n                    className=\"dropdown-menu dropdown-width\"\n                    aria-labelledby=\"navbarScrollingDropdown\"\n                    style={{ marginLeft: \"-4rem\", width: \"8rem\" }}\n                  >\n                    <li>\n                      <button\n                        className=\"dropdown-item\"\n                        style={{ textAlign: \"center\" }}\n                        disabled={!name && !portfolio}\n                        data-bs-toggle=\"modal\"\n                        data-bs-target=\"#fund\"\n                      >\n                        Fund Wallet With Credit/Debit Card\n                      </button>\n                    </li>\n                    <li>\n                      <button\n                        className=\"dropdown-item\"\n                        style={{ textAlign: \"center\" }}\n                        onClick={() => openInNewTab(process.env.REACT_APP_FUND_WALLET_WITH_CRYPTOCURRENCY)}\n                      >\n                        Fund Wallet With Cryptocurrency\n                      </button>\n                    </li>\n                    <li>\n                      <button\n                        className=\"dropdown-item\"\n                        style={{ textAlign: \"center\" }}\n                        onClick={() => openInNewTab(process.env.REACT_APP_FUND_WALLET_WITH_WIRE_OR_CHECK)}\n                      >\n                        Fund Wallet with Wire or Check\n                      </button>\n                    </li>\n                  </ul>\n                </div>\n                <div className={styles.line + styles.adaptNeed} />\n                <div\n                  className={styles.adaptNeed}\n                  style={{\n                    marginRight: \"1rem\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <div className=\"nav-item dropdown\">\n                    <a\n                      className=\"nav-link dropdown-toggle\"\n                      href=\"#\"\n                      id=\"navbarScrollingDropdown\"\n                      role=\"button\"\n                      data-bs-toggle=\"dropdown\"\n                      aria-expanded=\"false\"\n                    >\n                      <div\n                        className={\"imgUser\"}\n                        style={{ marginLeft: \".3rem\" }}\n                      >\n                        <img\n                          className={styles.userImg}\n                          id=\"avatarNavbar\"\n                          src={navbarProfileImageState}\n                          alt=\"user\"\n                        />\n                      </div>\n                    </a>\n                    {name && portfolio ? (\n                      <ul\n                        className=\"dropdown-menu\"\n                        aria-labelledby=\"navbarScrollingDropdown\"\n                        style={{ marginLeft: \"-4rem\", width: \"8rem\" }}\n                      >\n                        <li>\n                          <p\n                            className=\"dropdown-item\"\n                            style={{ textAlign: \"center\" }}\n                            onClick={() => {\n                              dispatch(logoutRequest());\n                            }}\n                          >\n                            Log Out\n                          </p>\n                        </li>\n                      </ul>\n                    ) : null}\n                  </div>\n                </div>\n              </div>\n            </div>\n            {isMobile ? (\n              <LeftPanelAdapt\n                onClickHomeHandler={onClickHomeHandler}\n                onClickPortfolioHandler={onClickPortfolioHandler}\n                onClickExchangeHandler={onClickExchangeHandler}\n                onClickPaperWalletHandler={onClickPaperWalletHandler}\n                onClickOrderTableHandler={onClickOrderTableHandler}\n                onClickSettingsHandler={onClickSettingsHandler}\n                onClickHistoryHandler={onClickHistoryHandler}\n                portfolio={portfolio}\n                name={name}\n                onClickOpenOrderHandler={onClickOpenOrderHandler}\n              />\n            ) : null}\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Settings/Settings.js",["361","362","363","364","365","366","367","368","369","370","371","372","373","374"],"import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./Settings.module.scss\";\nimport axios from \"axios\";\nimport RightSideHelpMenuThirdType from \"../RightSideHelpMenuThirdType/RightSideHelpMenuThirdType\";\nimport {\n  Image,\n  Modal,\n  Button,\n  Grid,\n  Icon,\n  Label,\n  Popup,\n} from \"semantic-ui-react\";\nimport { saveUserCurrency } from \"../../API/API\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeCurrencySelector, checkPasswordObjSelector, cryptoDataSelector, userCurrencySelector } from \"../../store/meta1/selector\";\nimport { accountsSelector, isValidPasswordKeySelector, passwordKeyErrorSelector, profileImageSelector } from \"../../store/account/selector\";\nimport { deleteAvatarRequest, passKeyRequestService, passKeyResetService, uploadAvatarRequest } from \"../../store/account/actions\";\nimport { saveUserCurrencyRequest, saveUserCurrencyReset, setUserCurrencyAction } from \"../../store/meta1/actions\";\nlet isSet = false;\nconst Settings = (props) => {\n  const {\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    getAvatarFromBack,\n    userCurrency,\n    setUserCurrency,\n    setTokenModalMsg,\n    setTokenModalOpen\n  } = props;\n\n  const checkPasswordState = useSelector(checkPasswordObjSelector);\n  const userCurrencyState = useSelector(userCurrencySelector);\n  const [currency, setCurrency] = useState(userCurrencyState);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [openPasswordSection, setOpenPasswordSection] = useState(false);\n  const [isRemoveBtn, setIsRemoveBtn] = useState(false);\n  const [isPasswordTouch, setIsPasswordTouch] = useState(false);\n  const imageRef = useRef();\n  const dispatch = useDispatch();\n  const cryptoDataState = useSelector(cryptoDataSelector);\n  const accountNameState = useSelector(accountsSelector);\n  const profileImageState =  useSelector(profileImageSelector);\n  const changeCurrencyState = useSelector(changeCurrencySelector);\n  const isValidPasswordKeyState = useSelector(isValidPasswordKeySelector);\n  const passwordKeyErrorState = useSelector(passwordKeyErrorSelector);\n  \n  useEffect(() => {\n    if (!isValidPasswordKeyState && passwordKeyErrorState) {\n      setPasswordError(\"Invalid Credentials\");\n      return;\n    }\n    if (isValidPasswordKeyState) {\n      if (isRemoveBtn) {\n        dispatch(passKeyResetService());\n        dispatch(deleteAvatarRequest(accountNameState));\n      }\n      else {\n        imageRef.current.click();\n      }\n      closePasswordSectionHandler(false);\n    }\n  }, [isValidPasswordKeyState, passwordKeyErrorState])\n  const changeCurrencyHandler = async (e) => {\n    e.preventDefault();\n    dispatch(saveUserCurrencyRequest({login:accountNameState,currency}));\n  };\n  useEffect(()=>{\n    if (changeCurrencyState) {\n      setModalOpened(true);\n    }\n  },[changeCurrencyState]);\n\n  const uploadImageValidation = async () => {\n    if (!password) {\n      setIsPasswordTouch(true);\n      return;\n    }\n    dispatch(passKeyRequestService({ login: accountNameState, password}));\n  }\n\n  const removeImageValidation = async () => {\n    if (!password) {\n      setIsPasswordTouch(true);\n      return;\n    }\n    dispatch(passKeyRequestService({ login: accountNameState, password}));\n  }\n\n  async function uploadFile(e) {\n    e.preventDefault();\n    if (e.target?.files[0]?.name) {\n      let type = e.target?.files[0]?.name.split(\".\")[1];\n      if (type === \"png\" || type === \"jpeg\" || type === \"jpg\") {\n        if (\n          e.target?.files[0]?.size > 70000 &&\n          e.target?.files[0]?.size < 1000000\n        ) {\n          const formData = new FormData();\n          formData.append(\"login\", accountNameState);\n          formData.append(\n            \"file\",\n            document.getElementById(\"file_upload\")?.files[0]\n          );\n          dispatch(uploadAvatarRequest(formData));\n        } else {\n          alert(\"Invalid file size\");\n        }\n      } else {\n        alert(\"Invalid file format\");\n      }\n    } else {\n      alert(\"Please select a file\");\n    }\n    document.getElementById(\"file_upload\").value = \"\";\n  }\n\n  const openPasswordSectionHandler = (isRemove = false) => {\n    setPassword('');\n    setOpenPasswordSection(true);\n    setPasswordError('');\n    if (isRemove) setIsRemoveBtn(true);\n  }\n  const closePasswordSectionHandler = () => {\n    setOpenPasswordSection(false);\n    setPasswordError('');\n    setIsRemoveBtn(false);\n    setIsPasswordTouch(false);\n  }\n  return (\n    <>\n      <Modal\n        size=\"mini\"\n        open={modalOpened}\n        onClose={() => {\n          setModalOpened(false);\n          dispatch(saveUserCurrencyReset())\n        }}\n        id={\"modalExch\"}\n      >\n        <Modal.Header>Currency change</Modal.Header>\n        <Modal.Content style={{ height: \"55%\" }}>\n          <div\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <h3 style={{ textAlign: \"center\" }}>\n              You have successfully changed the currency to{\" \"}\n              {currency.split(\" \")[0]}\n            </h3>\n          </div>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n            onClick={() => {\n              setModalOpened(false);\n              dispatch(saveUserCurrencyReset())\n            }}\n          >\n            OK\n          </Button>\n        </Modal.Actions>\n      </Modal>\n      <div>\n        <div style={{ background: \"#fff\", padding: \"1.05rem 2rem\" }}>\n          <h3 style={{ fontWeight: \"600\" }}>\n            <strong>Account Settings</strong>\n          </h3>\n        </div>\n        <div className={styles.adaptNeed}>\n          <div className={styles.mainBlockAdapt} style={{ width: \"70%\" }}>\n            <div className={styles.mainBlock}>\n              <div className={styles.mainHeader}>\n                <h3 style={{ fontWeight: \"700\" }}>Edit Profile</h3>\n              </div>\n              <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n              <div className={styles.changeDataBlock}>\n                <div className={styles.imgChangeBlock}>\n                  <div className={styles.userNewImgBlock}>\n                    <img\n                      src={profileImageState}\n                      id=\"imageUser\"\n                      style={{\n                        width: \"140px\",\n                        height: \"140px\",\n                        borderRadius: \"100px\",\n                      }}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className={styles.extraInfoBlock}>\n\n                    {<div style={openPasswordSection ? { display: 'none', fontFamily: \"Poppins, sans-serif\" } : { display: 'block', fontFamily: \"Poppins, sans-serif\" }}>\n                      <h4 style={{ margin: \"0\" }}>Upload a Photo</h4>\n                      <div className={styles.buttonAdapt}>\n                        <div\n                          className={styles.blockForUpload}\n                          style={{ position: \"relative\" }}\n                          onClick={() => openPasswordSectionHandler()}\n                        >\n                          <p className={styles.pUpload}>Choose a File</p>\n\n                        </div>\n                        <div style={{ display: 'none' }} >\n                          <input\n                            type=\"file\"\n                            id=\"file_upload\"\n                            onChange={(e) => {\n                              uploadFile(e);\n                            }}\n                            onClick={()=>{\n                              dispatch(passKeyResetService());\n                            }}\n                            ref={imageRef}\n                            className={styles.uploadButton}\n                          />\n                        </div>\n                        <button\n                          className={styles.Button}\n                          style={{ marginLeft: \"1rem\" }}\n                          onClick={() => openPasswordSectionHandler(true)}\n                        >\n                          Remove the Photo\n                        </button>\n                      </div>\n                    </div>}\n                    {!!openPasswordSection && <div>\n                      <label>Enter Passkey</label>\n                      <input\n                        type='password'\n                        value={password}\n                        onChange={(e) => {\n                          setPassword(e.target.value)\n                          setIsPasswordTouch(true)\n                        }}\n                        onBlur={() => setIsPasswordTouch(true)}\n                        className={styles.input_password}\n                      />\n                      {!password && isPasswordTouch && <span style={{ color: 'red', display: 'block' }}>Passkey field can't be empty</span>}\n                      <button onClick={!isRemoveBtn ? uploadImageValidation : removeImageValidation} className={styles.Button_Password} >Submit</button>\n                      <button onClick={closePasswordSectionHandler} className={styles.Button_Password}>Cancel</button>\n                    </div>}\n                    <div className={styles.extraText}>\n                      <span>Acceptable formats: jpg, png only</span>\n                      <span>\n                        Maximum file size is 1mb and minimum size 70kb\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className={styles.changeCurrencyBlock}>\n              <div className={styles.changeCurrencyHeader}>\n                <h3>Currency Preference</h3>\n              </div>\n              <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n              <form\n                onSubmit={changeCurrencyHandler}\n                className={styles.changeCurrencyForm}\n              >\n                <div\n                  style={{ margin: \"0 0 1rem 0\", color: \"rgb(90, 103, 118)\" }}\n                >\n                  <span>\n                    Select your preferred display currency for all markets.\n                  </span>\n                </div>\n                <div className={styles.changeDataInput}>\n                  <select\n                    className={styles.currencySelect}\n                    onChange={(e) => setCurrency(e.target.value)}\n                    name=\"currencies\"\n                    id=\"currenciesChoose\"\n                    value={currency}\n                  >\n                    <option value=\"$ USD 1\">$ (USD)</option>\n                    <option value={`€ EUR ${cryptoDataState.ExchangeRate[0].rate}`}>\n                      € (EUR)\n                    </option>\n                    <option value={`£ GBP ${cryptoDataState.ExchangeRate[1].rate}`}>\n                      £ (GBP)\n                    </option>\n                    <option value={`₽ RUB ${cryptoDataState.ExchangeRate[2].rate}`}>\n                      ₽ (RUB)\n                    </option>\n                    <option\n                      value={`CA$ CAD ${cryptoDataState.ExchangeRate[3].rate}`}\n                    >\n                      CA$ (CAD)\n                    </option>\n                  </select>\n                </div>\n                <div className={styles.blockButton}>\n                  <button\n                    type={\"submit\"}\n                    style={{ width: \"10rem\" }}\n                    className={styles.Button}\n                  >\n                    Update\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n          <div className={styles.helpBlockAdapt} style={{ width: \"30%\" }}>\n            <RightSideHelpMenuThirdType\n              onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n              onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Modal\n        size=\"mini\"\n        open={passwordError !== ''}\n        onClose={() => {\n          setPasswordError('');\n          dispatch(passKeyResetService());\n        }}\n        id={\"modalExch\"}\n      >\n        <Modal.Header>Error occured</Modal.Header>\n        <Modal.Content>\n          <Grid verticalAlign=\"middle\" centered>\n            <Grid.Row centered columns={2}>\n              <Grid.Column width={4}>\n                <Icon disabled name=\"warning sign\" size=\"huge\" />\n              </Grid.Column>\n\n              <Grid.Column width={10}>\n                <div className=\"trade-error\">{passwordError}</div>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button positive onClick={() => {\n            setPasswordError('');\n            dispatch(passKeyResetService());\n          }}>\n            OK\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nexport default Settings;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js",["375","376","377"],"import * as React from \"react\";\nimport styles from \"./LeftPanel.module.scss\";\nimport { useEffect } from \"react\";\nimport user from \"../../images/default-pic1.png\";\nimport firstPart from \"../../images/assetsForSidebar/Shape 2.png\";\nimport secondPart from \"../../images/assetsForSidebar/Shape 2 copy.png\";\nimport homeIcon from \"../../images/assetsForSidebar/Shape 5.png\";\nimport { useSelector } from \"react-redux\";\nimport { profileImageSelector } from \"../../store/account/selector\";\n\nconst LeftPanel = (props) => {\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    onClickOpenOrderHandler,\n    portfolio,\n    name,\n    activeScreen\n  } = props;\n  const profileImageState =  useSelector(profileImageSelector);\n  const portfolioScrollPositionHoverEvent = (e) => {\n    if (e.clientY <= 70) {\n      if (document.querySelector('#modalBlock')) {\n        document.querySelector('#modalBlock').style.top = '2%'\n      }\n    } else if (e.clientY < 100 && e.clientY > 70) {\n      document.querySelector('#modalBlock').style.top = '3%'\n    } else if (e.clientY < 200 && e.clientY >= 100) {\n      if (document.querySelector('#modalBlock')) {\n        document.querySelector('#modalBlock').style.top = '7%'\n      }\n    } else {\n      if (document.querySelector('#modalBlock')) {\n        document.querySelector('#modalBlock').style.top = '20%'\n      }\n    }\n  }\n\n  useEffect(() => {\n    document.querySelector('.portforlio-class').addEventListener('mouseenter', portfolioScrollPositionHoverEvent);\n  }, [])\n  useEffect(() => {\n    if (name && portfolio) {\n      setTimeout(() => {\n        let allEvents = document.getElementsByClassName(\"event\");\n        for (let i = 0; i < allEvents.length; i++) {\n          allEvents[i].addEventListener(\"mouseover\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"block\";\n          });\n          allEvents[i].addEventListener(\"mouseout\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"none\";\n          });\n        }\n      }, 25);\n    }\n  }, [name, portfolio]);\n\n  return (\n    <ul id={\"mainBlock\"} className={styles.mainBlock + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              src={profileImageState}\n              id=\"leftAvatar\"\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <img style={{ padding: \".47rem .5rem\" }} src={homeIcon} alt=\"\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"login\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <div\n        id={\"modalBlock\"}\n        style={{ display: \"none\" }}\n        className={styles.modalBlock + \" event\"}\n      >\n        <div className={styles.modalContent + \" event\"}>\n          <h1 className={\"event\"}>Portfolio</h1>\n          <ul className={\"event\"}>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPortfolioHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Show All Balance\n            </li>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickOpenOrderHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Open Orders\n            </li>\n            {/* <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPaperWalletHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Paper Wallet\n            </li> */}\n          </ul>\n        </div>\n      </div>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item event portforlio-class\"\n            : styles.LiDisabled + \" nav-item event portforlio-class\"\n        }\n        onClick={portfolio ? onClickPortfolioHandler : null}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div\n              className={styles.textSpan + \" event\"}\n              style={\n                activeScreen === \"portfolio\" ||\n                activeScreen === \"sendFunds\" ||\n                activeScreen === \"deposit\" ||\n                activeScreen === \"wallet\" ||\n                activeScreen === \"paperWallet\"\n                ? { color: \"#FFC000\" }\n                : null\n              }\n            >\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickExchangeHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <div\n              style={{ position: \"relative\", width: \"30px\", height: \"30px\" }}\n            >\n              <img\n                src={firstPart}\n                style={{ position: \"absolute\", top: \"10px\", left: \"6.5px\" }}\n                alt=\"\"\n              />\n              <img\n                src={secondPart}\n                style={{ position: \"absolute\", top: \"14px\", left: \"14.5px\" }}\n                alt=\"\"\n              />\n            </div>\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"exchange\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickHistoryHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"orderTable\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickSettingsHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"settings\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanel;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js",["378"],"import * as React from \"react\";\nimport styles from \"./RightSideHelpMenuSecondType.module.scss\";\nimport { useQuery } from \"react-query\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { getAsset } from \"../Wallet/cryptoChooser\";\nimport getHistory from \"../../lib/fetchHistory\";\nimport { removeExponent } from '../../utils/commonFunction'\nimport { trxTypes } from \"../../helpers/utility\";\nimport { ChainTypes as grapheneChainTypes } from 'meta1-vision-js';\nconst {operations} = grapheneChainTypes;\nconst ops = Object.keys(operations);\nops.push(\n\t'property_create_operation',\n\t'property_update_operation',\n\t'property_approve_operation',\n\t'property_delete_operation',\n\t'asset_price_publish_operation'\n);\nconst RightSideHelpMenuSecondType = (props) => {\n  const { onClickExchangeEOSHandler, onClickExchangeUSDTHandler } = props;\n\n  const { data, isLoading } = useQuery(\"historySideBar\", getHistory, {\n    refetchInterval: 3000,\n  });\n\n  const DateOfStartEOS = 1645998629;\n  const DateOfStartUSDT = 1646085029;\n\n  const calculateDate = (date) => {\n    return Math.floor((new Date() / 1000 - date) / 86400);\n  };\n\n  return (\n    <div className={`${styles.adaptNeed} ${props.fromHistory ? styles.newAdaptNeed : ''}`}>\n      <div className={`${styles.newCrypto} ${typeof props.fromHistory === 'boolean' && props.fromHistory ? styles.newCryptoCustom : ''} ${typeof props.fromHistory === 'string' && props.fromHistory === 'exchange' ? styles.newCryptoCustomExchange : ''}`}>\n        <h5 style={{ fontWeight: \"bold\", fontSize: \"1rem\" }}>\n          New Crypto on META1\n        </h5>\n        <hr />\n        <div className={styles.newCryptoBlock}>\n          <div\n            className={styles.crypto}\n            id={\"usdtBlock\"}\n            onClick={onClickExchangeUSDTHandler}\n            style={{ cursor: \"pointer\" }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/Tether-USDT-icon.png\"\n                alt=\"uniswap\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>USDT</h6>\n                <span>Added {calculateDate(DateOfStartUSDT)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n          <hr />\n          <div\n            className={styles.crypto}\n            id={\"eosBlock\"}\n            onClick={onClickExchangeEOSHandler}\n            style={{ cursor: \"pointer\" }}\n          >\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/EOS-icon.png\"\n                alt=\"cordano\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>EOS</h6>\n                <span>Added {calculateDate(DateOfStartEOS)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className={`${styles.intro} ${typeof props.fromHistory === \"boolean\" && props.fromHistory ? styles.newIntro : ''} ${typeof props.fromHistory === 'string' && props.fromHistory === 'exchange' ? styles.newCryptoCustomExchange : ''}`}>\n        <h5>Recent Transactions</h5>\n        <hr />\n        {isLoading ? (\n          <MetaLoader size={\"small\"} />\n        ) : data.length > 0 ? (\n          data?.map((el, index) => (\n            <div\n              key={index}\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                margin: \"1rem 0\",\n              }}\n            >\n              <div\n                style={{ margin: \"auto 0\", width: \"6rem\", textAlign: \"end\" }}\n              >\n                <span\n                  className={`${styles.spanStatusBtn} ${trxTypes[ops[el.op_type]] === 'Cancel order' ? styles.transactionSpanCancel : trxTypes[ops[el.op_type]] === 'Place order' ? styles.transactionSpanPlace : styles.transactionSpanFill }`}\n                >{trxTypes[ops[el.op_type]]}</span>\n              </div>\n              <div\n                style={{ margin: \".25rem 0\", width: \"6rem\", textAlign: \"end\" }}\n              >\n                <p>{removeExponent(Number(el.amount))}</p>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className={styles.helpBlock}>\n            <span>\n              You don't own any crypto. <br /> Ready to make a purchase?\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RightSideHelpMenuSecondType;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Footer/Footer.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/UI/loader/Loader.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/saga.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/reducer.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/index.js",["379","380","381","382","383","384","385","386","387","388"],"import MetaLoader from \"../../UI/loader/Loader\";\n// import ReactTooltip from 'react-tooltip'\nimport React, { useState, useEffect } from \"react\";\nimport getAllByOne from \"../requests/compareCrypto\";\nimport Switch from \"@mui/material/Switch\";\nimport fiatIcon from \"../../images/4292332.png\";\nimport { Loader } from \"semantic-ui-react\";\nimport \"./Wallet.css\";\nimport Meta1 from \"meta1-vision-dex\";\nimport { useQuery } from \"react-query\";\n\nimport PortfolioTable from \"./PortfolioTable\";\nimport { userCurrencySelector } from \"../../store/meta1/selector\";\nimport { useSelector } from \"react-redux\";\n\n// Трансферы между мета1 аккаунтами\n// вместо BitShares ставь Meta1\n// https://gist.github.com/bogdyak/e0172e95\"large\"db21f41ccd98c67dfaa7\n\n// Вывод на внешний аккаунт\n// вместо BitShares ставь Meta1\n// https://gist.github.com/bogdyak/087bf94c61fffc947d94e4dbbd24d692\n// обрати внимание что для EOS и XLM нужен мемо это типо доп айдишника\n\n// сначала надо залогиниться в сдк\n\nfunction Wallet(props) {\n  const {\n    portfolio,\n    onDepositClick,\n    onWithdrawClick,\n    onAssetSelect,\n    onSendClick,\n    assets,\n    accountName,\n    setFullPorfolio,\n    userCurrency,\n  } = props;\n  const userCurrencyState = useSelector(userCurrencySelector);\n  const [currentCurrency, setCurrentCurrency] = useState(0);\n  const [orders, setOrders] = useState(null);\n  const [hideZero, setHideZero] = useState(true);\n  const [totalChange, setTotalChange] = useState(\"0\");\n  const [totalSum, setTotalSum] = useState(0);\n  const [loader, setLoader] = useState(true);\n  const [check, setCheck] = useState(false);\n  const [isCurrencySelected, setIsCurrencySelected] = useState('')\n  const { data, isLoading, error } = useQuery(\"cryptos\", getDatas);\n\n  async function getDatas() {\n    const cryptoArray = [\"META1\", \"ETH\", \"BTC\", \"BNB\", \"EOS\", \"XLM\", \"LTC\"];\n    let fetchedCryptos = {};\n    for (let i = 0; i < cryptoArray.length; i++) {\n      fetchedCryptos[cryptoArray[i]] = await Meta1.ticker(\n        \"USDT\",\n        cryptoArray[i]\n      );\n    }\n    fetchedCryptos[\"USDT\"] = { latest: 1, percent_change: 0 };\n    return fetchedCryptos;\n  }\n\n  useEffect(() => {\n    function check() {\n      if (!check) {\n        setCheck(true);\n      }\n    }\n    check();\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoader(false);\n    }, 1500);\n  }, []);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const openDrop = () => {\n    document.getElementById(\"switchContainer\").style.display === \"none\"\n      ? (document.getElementById(\"switchContainer\").style.display = \"block\")\n      : (document.getElementById(\"switchContainer\").style.display = \"none\");\n  };\n\n  function currencyValue(datas) {\n    let assetValue = data[datas.name].latest;\n    if (datas.name === \"META1\") {\n      return (data[\"META1\"].latest * datas?.qty).toFixed(datas.pre);\n    } else if (assetValue * datas?.qty === 0) {\n      return \"0.00\";\n    } else {\n      return (assetValue * datas?.qty).toFixed(datas.pre);\n    }\n  }\n\n  useEffect(() => {\n    if (data && portfolio) {\n      let summTik = 0,\n        percentage = 0,\n        totSum = 0,\n        lastChange = 0;\n      for (let i of portfolio) {\n        if (Number(i.qty) > 0) {\n          percentage = Number(data[i.name].percent_change);\n          summTik = Number(currencyValue(i));\n          lastChange += ((100 - percentage) * summTik) / 100;\n          totSum += summTik;\n        }\n      }\n      let ch = Number(100 - (lastChange * 100) / totSum);\n      setTotalSum(totSum.toFixed(2));\n      if (totalSum == 0) {\n        setTotalChange(\"0.00\");\n      } else {\n        setTotalChange(ch.toFixed(2).toString());\n      }\n    }\n  }, [portfolio, data]);\n  const changeCurrencyToFiat = async () => {\n    document.getElementById(\"switchContainer\").style.display = \"none\";\n    setCurrentCurrency(currentCurrency + 1);\n    document.getElementById(\"forCheck\").innerText = userCurrencyState.split(\" \")[1];\n  };\n\n  const changeCryptoCurrency = async (e) => {\n    let chosen = document.getElementById(\"forCheck\").innerText;\n    document.getElementById(\"switchContainer\").style.display = \"none\";\n    let crypto = null;\n    switch (e.target.nodeName) {\n      case \"LI\":\n        crypto = e.target.outerText;\n        break;\n      case \"SPAN\":\n        crypto = e.target.outerText;\n        break;\n      case \"IMG\":\n        crypto = e.target.nextSibling.outerText;\n        break;\n      default:\n        break;\n    }\n    if (crypto !== \"META1\") {\n      if (document.getElementById(\"forCheck\").innerText === \"META1\") {\n        chosen = userCurrencyState.split(\" \")[1];\n        let data = await getAllByOne('USDT', crypto);\n        sessionStorage.setItem('currencyResult', JSON.stringify(data))\n        setCurrentCurrency(currentCurrency + 1);\n      } else {\n        let data = await getAllByOne('USDT', crypto);\n        sessionStorage.setItem('currencyResult', JSON.stringify(data))\n      }\n    } else {\n      setCurrentCurrency(currentCurrency + 1);\n      let crypto = \"META1\";\n    }\n    setIsCurrencySelected(crypto)\n  };\n\n  function Portfolio(props) {\n    if (portfolio == null || portfolio.length === 0)\n      return <MetaLoader size={\"small\"} />;\n    const filteredPortfolio = hideZero\n      ? portfolio.filter((p) => p.qty > 0)\n      : portfolio;\n\n    return (\n      <PortfolioTable\n        assets={assets}\n        history={orders}\n        filteredPortfolio={filteredPortfolio}\n        onSendClick={onSendClick}\n        onDepositClick={onDepositClick}\n        onWithdrawClick={onWithdrawClick}\n        onAssetSelect={props.onAssetSelect}\n        onSetHideZero={setHideZero}\n        hideZero={hideZero}\n        data={data}\n        isLoading={isLoading}\n        isCurrencySelected={isCurrencySelected}\n      />\n    );\n  }\n  return (\n    <>\n      <div style={{ marginLeft: \"3rem\" }} className={\"totalSumBlock\"}>\n        <h4\n          style={{ color: \"#505361\", fontSize: \".9rem\", marginBottom: \".3rem\" }}\n        >\n          Portfolio Balance\n        </h4>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div\n            className={\"blockSumAndPercentage\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <h2 style={{ color: \"#FFC000\", fontSize: \"2rem\", margin: \"0\" }}>\n              <strong className={\"adaptAmountMain\"} style={!isMobile ? { fontSize: '25px' } : { fontSize: '16px !important' }}>\n                {loader && isLoading ? (\n                  <Loader size=\"mini\" active inline=\"centered\" />\n                ) : (\n                  userCurrencyState.split(\" \")[0] +\n                  \" \" +\n                  (totalSum * userCurrencyState.split(\" \")[2]).toFixed(2)\n                )}\n              </strong>\n            </h2>\n            <h5\n              style={{\n                margin: \".3rem 0 .5rem 1rem\",\n                fontSize: \".8rem\",\n                height: \"55%\",\n                padding: \".3rem\",\n                borderRadius: \"3px\",\n                boxShadow: \"0 4px 9px 5px rgba(0,0,0,.11)\",\n              }}\n              className={Number(totalChange) > 0 ? \"plusFirst\" : \"minusFirst\"}\n            >\n              {Number(totalChange) > 0 ? (\n                <i\n                  className=\"far fa-arrow-up fa-xs\"\n                  style={{ color: \"#fff\", marginRight: \".2rem\" }}\n                />\n              ) : (\n                <i\n                  className=\"far fa-arrow-down fa-xs \"\n                  style={{ color: \"#fff\", marginRight: \".2rem\" }}\n                />\n              )}\n              {loader && isLoading ? null : totalChange.replace(\"-\", \"\")} %\n            </h5>\n          </div>\n          <div className=\"rightSideBlock\">\n            <div className={\"blockChoose\"}>\n              <noscript id={\"forCheck\"}>{userCurrencyState.split(\" \")[1]}</noscript>\n              <div className={\"blockChoosen\"} onClick={openDrop}>\n                <span style={{ textAlign: \"center\", paddingRight: '2px' }}>\n                  Select currency to display\n                </span>\n                <i\n                  className=\"fas fa-chevron-down\"\n                  style={{ marginTop: \".2rem\" }}\n                />\n              </div>\n              <div\n                id={\"switchContainer\"}\n                style={{ position: \"relative\", display: \"none\" }}\n              >\n                <ul className={\"chooseContainer\"}>\n                  <li\n                    className={\"choosenContainerItem\"}\n                    onClick={changeCurrencyToFiat}\n                  >\n                    <img\n                      src={fiatIcon}\n                      alt=\"cryptoImage\"\n                      className=\"imgContainer\"\n                    />\n                    <span className=\"spanDrop\">\n                      Fiat ({userCurrencyState.split(\" \")[0]})\n                    </span>\n                  </li>\n                  {assets.map((el, index) => (\n                    <li\n                      onClick={changeCryptoCurrency}\n                      className={\"choosenContainerItem\"}\n                      key={index}\n                    >\n                      <img\n                        src={el.image}\n                        style={{ width: \"35px\" }}\n                        alt=\"cryptoImage\"\n                        className=\"imgContainer\"\n                      />\n                      <span className=\"spanDrop\">{el.symbol}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n            <hr\n              style={\n                isMobile\n                  ? { display: \"block\", width: \"100%\" }\n                  : { display: \"none\", width: \"100%\" }\n              }\n            />\n            <div className={\"switcher\"} style={{ paddingTop: \"1.4rem\" }}>\n              <span>Hide Zero Balances</span>\n              <Switch\n                className={\"switch\"}\n                checked={hideZero}\n                onChange={() => {\n                  setHideZero(!hideZero);\n                }}\n                inputProps={{ \"aria-label\": \"controlled\" }}\n                color={\"warning\"}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"portfolio-table\">\n        <div className=\"portfolio-table\">\n          <Portfolio\n            onAssetSelect={onAssetSelect}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Wallet;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js",["389","390","391","392","393","394","395","396","397","398","399","400","401"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"./ExchangeForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport ExchangeSelect from \"./ExchangeSelect.js\";\nimport {\n  Image,\n  Modal,\n  Button,\n  Grid,\n  Icon,\n  Label,\n  Popup,\n} from \"semantic-ui-react\";\nimport { helpInput, helpMax1, helpSwap } from \"../../config/help\";\nimport Input from \"@mui/material/Input\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport \"./ExchangeForm.css\";\nimport Meta1 from \"meta1-vision-dex\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport leftArrow from \"../../images/exchangeAssets/Shape Left.png\";\nimport rightArrow from \"../../images/exchangeAssets/Shape 2 copy 2.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { checkPasswordObjSelector, traderSelector, userCurrencySelector } from \"../../store/meta1/selector\";\nimport { accountsSelector, isValidPasswordKeySelector, passwordKeyErrorSelector } from \"../../store/account/selector\";\nimport { saveBalanceRequest } from \"../../store/meta1/actions\";\nimport { passKeyRequestService, passKeyResetService } from \"../../store/account/actions\";\n\nexport default function ExchangeForm(props) {\n  const {\n    onSuccessModal,\n    asset,\n    onBackClick,\n    metaUrl,\n    onSuccessTrade\n  } = props;\n  const traderState = useSelector(traderSelector);\n  const userCurrencyState = useSelector(userCurrencySelector);\n  const accountState = useSelector(accountsSelector);\n  const [portfolio, setPortfolio] = useState(props.portfolio);\n  const [passwordShouldBeProvided, setPasswordShouldBeProvided] =\n    useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [assets, setAssets] = useState(props.assets);\n  const [options, setOptions] = useState([]);\n  const [selectedFrom, setSelectedFrom] = useState(props.selectedFrom);\n  const [selectedTo, setSelectedTo] = useState(props.selectedTo);\n  const [selectedFromAmount, setSelectedFromAmount] = useState(\"\");\n  const [selectedToAmount, setSelectedToAmount] = useState(0);\n  const [pair, setPair] = useState(null);\n  const [invalidEx, setInvalidEx] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [tradeError, setTradeError] = useState(null);\n  const [tradeInProgress, setTradeInProgress] = useState(false);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState();\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [error, setError] = useState();\n  const [feeAlert, setFeeAlert] = useState(false);\n  const isValidPasswordKeyState = useSelector(isValidPasswordKeySelector);\n  const passwordKeyErrorState = useSelector(passwordKeyErrorSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(pair);\n  }, [pair]);\n\n  useEffect(() => {\n    if (!isValidPasswordKeyState && passwordKeyErrorState) {\n        setTradeError(\"Invalid Credentials\");\n        setPassword(\"\");\n        setTradeInProgress(false);\n        return;\n    }\n    if (isValidPasswordKeyState) {\n      dispatch(passKeyResetService());\n      performTradeSubmit();\n    }\n  },[isValidPasswordKeyState, passwordKeyErrorState])\n\n  const performTradeSubmit = async () => {\n    const buyResult = await traderState.perform({\n      from: selectedFrom.value,\n      to: selectedTo.value.trim(),\n      amount: selectedToAmount,\n      password: password,\n    });\n    \n    if (buyResult.error) {\n      setTradeError(buyResult.error);\n    } else {\n      dispatch(saveBalanceRequest(accountState))\n      setModalOpened(true);\n    }\n    setPassword(\"\");\n    setTradeInProgress(false);\n  }\n  useEffect(() => {\n    async function getPriceForAsset() {\n      if (asset !== \"META1\" && asset !== \"USDT\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"USDT\") {\n        setPriceForAsset(1);\n      } else {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      }\n    }\n    getPriceForAsset();\n  }, [asset, portfolio]);\n\n  useEffect(() => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    if (Number(selectedFromAmount) <= 0 && clickedInputs) {\n      setError(\n        `The amount must be greater than ${(\n          0.003 * Number(userCurrencyState.split(\" \")[2])\n        ).toFixed(4)} ${userCurrencyState.split(\" \")[1]}`\n      );\n    } else {\n      setError(\"\");\n    }\n    if (Number(blockPrice) <= 0.003 * Number(userCurrencyState.split(\" \")[2])){\n        setError(\n          `The amount must be greater than ${Number(\n            (0.003 * Number(userCurrencyState.split(\" \")[2])).toFixed(4)\n          )} ${userCurrencyState.split(\" \")[1]}`\n        );\n\n      } else if (feeAsset == undefined) {\n      setError(\"Not enough FEE\");\n    } else {\n      setError(\"\");\n    }\n  }, [selectedFromAmount, blockPrice]);\n\n  useEffect(() => {\n    const currentPortfolio = props.portfolio || [];\n    setAssets(props.assets);\n    const getBalance = (symbol) => {\n      const assetInWallet = currentPortfolio.find((el) => el.name === symbol);\n      if (assetInWallet) {\n        return assetInWallet.qty;\n      } else {\n        return 0;\n      }\n    };\n    const newOptions = assets.map((asset) => {\n      return {\n        image: asset.image,\n        value: asset.symbol,\n        label: asset.symbol,\n        pre: asset.precision,\n        balance: getBalance(asset.symbol) || 0,\n      };\n    });\n\n    setOptions(newOptions);\n    if (selectedTo == null && options !== []) {\n      const from = asset\n        ? newOptions.find((el) => el.value === asset)\n        : newOptions[0];\n      let to = asset\n        ? newOptions.find((el) => el.value === \"META1\")\n        : newOptions[1];\n      if (asset === \"META1\") {\n        to = newOptions.find((el) => el.value === \"USDT\");\n      }\n      setSelectedTo(to);\n      setSelectedFrom(from);\n    } else {\n      setSelectedTo(newOptions.find((o) => o.value === selectedTo.value));\n      setSelectedFrom(newOptions.find((o) => o.value === selectedFrom.value));\n    }\n  }, [props.assets, props.portfolio]);\n\n  useEffect(() => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n  }, [pair]);\n\n  const calculateUsdPriceHandler = (e,lastPrice='') => {\n    if (e.target.value.length != 0) {\n      let priceAsset = priceForAsset\n      if(lastPrice!=''){\n        priceAsset=lastPrice\n      }\n      let priceForOne = (Number(e.target.value) * priceAsset).toFixed(10);\n      setBlockPrice(priceForOne * Number(userCurrencyState.split(\" \")[2]));\n    } else {\n      setBlockPrice(NaN);\n    }\n  };\n\n  const calculateCryptoPriceHandler = (e) => {\n    setBlockPrice(e.target.value);\n    let priceForOne = (\n      Number(e.target.value) /\n      priceForAsset /\n      Number(userCurrencyState.split(\" \")[2])\n    ).toFixed(selectedFrom.label === \"USDT\" ? 3 : selectedFrom.pre);\n    setSelectedFromAmount(priceForOne);\n  };\n\n  const handleCalculateSelectedTo = (currentValue='') => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedToAmount(NaN);\n      setSelectedFromAmount(NaN);\n      setBlockPrice(NaN);\n      return;\n    }\n    setInvalidEx(false);\n    const selectedAmount=currentValue?currentValue:selectedFromAmount\n    let amount;\n    if (selectedAmount !== \"\" && selectedAmount) {\n      if (pair.base === \"META1\") {\n        amount = (selectedAmount / pair.latest).toString().substr(0, 11) * 1;\n      } else if (pair.base === \"USDT\") {\n        amount = (selectedAmount / pair.latest).toString().substr(0, 11) * 1;\n      } else {\n        amount = (selectedAmount / pair.lowest_ask).toString().substr(0, 11) * 1;\n      }\n      setSelectedToAmount(amount);\n    } else {\n      setSelectedToAmount(0);\n    }\n  };\n  const handleCalculateSelectedFrom = () => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n    const amount = selectedToAmount * pair.lowest_ask;\n    setSelectedFromAmount(amount);\n  };\n\n  useEffect(() => {\n    if (selectedFromAmount > 0) {\n      setSelectedToAmount(0);\n    }\n    if (selectedFromAmount?.length) {\n      handleCalculateSelectedTo();\n    }\n    if (selectedToAmount?.length) {\n      handleCalculateSelectedFrom();\n    }\n    if (selectedToAmount === \"\") {\n      setSelectedFromAmount(\"\");\n    }\n  }, [selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    setPasswordShouldBeProvided(false);\n  }, [selectedFrom, selectedTo, selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    async function fetchPair(selectedTo, selectedFrom) {\n      if (\n        selectedTo != null &&\n        selectedFrom != null &&\n        selectedFrom.value !== undefined\n      ) {\n        const newPair = await Meta1.ticker(\n          selectedFrom.value,\n          selectedTo.value\n        );\n        setPair(newPair);\n      }\n    }\n    fetchPair(selectedTo, selectedFrom);\n  }, [selectedFrom, selectedTo]);\n\n  const changeAssetHandler = async (val) => {\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      const data = await response.json()\n      await setPriceForAsset(data.lastPrice);\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>{\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      }\n      );\n    }\n  };\n\n  const changeAssetHandlerSwap = async (val) => {\n    if (val.label !== \"META1\" && val.label !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val.label}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val.label === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      );\n    }\n  };\n\n  const swapAssets = (e) => {\n    e.preventDefault();\n    const oldFrom = selectedFrom;\n    setSelectedFrom(selectedTo);\n    setSelectedTo(oldFrom);\n  };\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const prepareTrade = () => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    localStorage.setItem(\"selectFrom\", selectedFromAmount);\n    localStorage.setItem(\"selectTo\", selectedToAmount);\n    if (\n      selectedFrom.label === \"META1\" &&\n      Number(selectedFromAmount) === Number(feeAsset.qty)\n    ) {\n      setFeeAlert(true);\n    } else {\n      setPasswordShouldBeProvided(true);\n    }\n  };\n\n  const performTrade = async () => {\n    setTradeInProgress(true);\n    setPasswordShouldBeProvided(false);\n    dispatch(passKeyRequestService({ login: accountState, password}));\n  }\n\n  const setAssetMax = (e) => {\n    e.preventDefault();\n    setSelectedFromAmount(selectedFrom.balance);\n    handleCalculateSelectedTo();\n    setTimeout(() => {\n      let priceForOne = (\n        Number(document.getElementById(\"inputAmount\").value) * priceForAsset\n      ).toFixed(3);\n      setBlockPrice(priceForOne * Number(userCurrencyState.split(\" \")[2]));\n    }, 25);\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  // const getAssets = (except) => options.filter((el) => el.value !== except);\n  if (selectedFrom == null && selectedTo == null) return null;\n\n  const getAssets = (except) => options.filter((el) => el.value !== except);\n\n  const inputChangeValuesHandler =(e,currentInput,lastPrice)=>{\n    handleCalculateSelectedTo(e.target.value);\n    calculateUsdPriceHandler(e,lastPrice);\n    setClickedInputs(true);\n  }\n\n  const inputChangeHandler = async (val,e)=>{\n    const currentInput = e.target.value\n    setSelectedFromAmount(prev=>{\n      return currentInput\n    });\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      const data = await response.json()\n      setPriceForAsset(prev=>{\n        return prev=data.lastPrice\n      });\n      inputChangeValuesHandler(e,currentInput,data.lastPrice)\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n      inputChangeValuesHandler(e,currentInput,'')\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>{\n        setPriceForAsset(prev=>{\n          return Number(res.latest).toFixed(2)\n        })\n        inputChangeValuesHandler(e,currentInput,Number(res.latest).toFixed(2))\n      }\n      );\n    }\n  }\n\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Exchange</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"mini\"\n          open={tradeError !== null}\n          onClose={() => {\n            setTradeError(null);\n            dispatch(passKeyResetService());\n          }}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Error occured</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={2}>\n                <Grid.Column width={4}>\n                  <Icon disabled name=\"warning sign\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column width={10}>\n                  <div className=\"trade-error\">{tradeError}</div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button positive onClick={() => {\n              setTradeError(null);\n              dispatch(passKeyResetService());\n            }}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the swap of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n            onSuccessModal();\n            onSuccessTrade();\n          }}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Trade Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={3}>\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedFrom.image} />\n                    <p>\n                      {\" \"}\n                      {(localStorage.getItem(\"selectFrom\") * 1).toFixed(\n                        selectedFrom.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n                <Grid.Column width={3} style={{ marginRight: '2.2rem', marginTop: '-2rem' }} >\n                  <Icon disabled name=\"arrow right\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedTo.image} />\n                    <p>\n                      {(localStorage.getItem(\"selectTo\") * 1).toFixed(\n                        selectedTo.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n              onClick={() => {\n                onSuccessModal();\n                setModalOpened(false);\n                // setRefreshData(prev => !prev)\n                onSuccessTrade()\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"adaptForMainExchange\"}>\n          <div className={`${styles.mainBlock} marginBottomZero`}>\n            <div className={styles.mainBlockExchange}>\n              <div className={styles.leftBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Exchange</h2>\n                <div id=\"from\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedFrom(val);\n                            changeAssetHandler(val.value);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedTo.value)}\n                          selectedValue={selectedFrom}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            content={helpInput(\n                              selectedFrom?.value,\n                              selectedTo?.value\n                            )}\n                            position=\"bottom center\"\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  placeholder=\"Amount crypto\"\n                                  value={selectedFromAmount}\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    if (\n                                      e.target.value.length < 11 &&\n                                      /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                        e.target.value\n                                      ) &&\n                                      Number(e.target.value) >= 0\n                                    ) {\n                                      inputChangeHandler(selectedFrom.label,e)\n                                    }\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedFrom.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  id={\"inputAmount\"}\n                                  disabled={invalidEx}\n                                  min=\"0\"\n                                  inputmode=\"numeric\"\n                                  pattern=\"\\d*\"\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                    position:'relative'\n                                  }}\n                                >\n                                  <input\n                                    className={styles.inputDollars}\n                                    onChange={(e) => {\n                                      if (\n                                        e.target.value.length < 11 &&\n                                        /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                          e.target.value\n                                        ) &&\n                                        Number(e.target.value) >= 0\n                                      ) {\n                                        calculateCryptoPriceHandler(e);\n                                        setClickedInputs(true);\n                                      }\n                                    }}\n                                    min=\"0\"\n                                    inputmode=\"numeric\"\n                                    pattern=\"\\d*\"\n                                    type={\"number\"}\n                                    placeholder={`Amount ${userCurrencyState.split(\" \")[1]\n                                      }`}\n                                    disabled={invalidEx}\n                                    style={\n                                      invalidEx ? { opacity: \"0.5\" } : null\n                                    }\n                                    value={blockPrice}\n                                  />\n                                  <span className={styles['abs-sp']} >{userCurrencyState.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                          <div className=\"max-button\">\n                            <Popup\n                              content={helpMax1(selectedFrom?.value)}\n                              position=\"bottom center\"\n                              trigger={\n                                <Button\n                                  secondary\n                                  className={\"btn\"}\n                                  onClick={setAssetMax}\n                                  floated=\"right\"\n                                  size=\"mini\"\n                                >\n                                  MAX\n                                </Button>\n                              }\n                            />\n                          </div>\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n              <div\n                style={{ marginTop: \"2.3rem\", marginLeft: \".3rem\" }}\n                className=\"padding-y-large text-center-s\"\n              >\n                <Popup\n                  content={helpSwap(selectedFrom?.value, selectedTo?.value)}\n                  position=\"top center\"\n                  trigger={\n                    <Button\n                      className={styles.button}\n                      style={{ width: \"3rem\", height: \"3rem\" }}\n                      onClick={(e) => {\n                        changeAssetHandlerSwap(selectedTo);\n                        setSelectedToAmount(NaN);\n                        setSelectedFromAmount(NaN);\n                        setBlockPrice(NaN);\n                        swapAssets(e);\n                      }}\n                    >\n                      <div className={styles.blockArrows}>\n                        <img\n                          src={leftArrow}\n                          className={styles.leftArrow}\n                          alt=\"\"\n                        />\n                        <img\n                          src={rightArrow}\n                          className={styles.rightArrow}\n                          alt=\"\"\n                        />\n                      </div>\n                    </Button>\n                  }\n                />\n              </div>\n              <div className={styles.rightBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                <div id=\"to\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedTo(val);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedFrom.value)}\n                          selectedValue={selectedTo}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            wide\n                            content={helpInput(\n                              selectedTo?.value,\n                              selectedFrom?.value\n                            )}\n                            position=\"bottom center\"\n                            disabled\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  style={isMobile ? { width: \"100%\" } : null}\n                                  placeholder=\"Amount crypto\"\n                                  value={\n                                    selectedFromAmount ? selectedToAmount : 0\n                                  }\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    setSelectedToAmount(\n                                      Number(e.target.value).toFixed(\n                                        selectedTo.pre\n                                      )\n                                    );\n                                    handleCalculateSelectedFrom();\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedTo.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  disabled\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                    position:'relative'\n                                  }}\n                                >\n                                  <span>\n                                    {!invalidEx && selectedFromAmount\n                                      ? blockPrice\n                                      : 0}\n                                  </span>\n                                  <span className={styles['abs-sp']}>{userCurrencyState.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                        </div>\n                        <div style={{ marginTop: \"1px\" }}>\n                          {invalidEx && (\n                            <Label pointing color=\"red\">\n                              Trade is currently unavailable\n                            </Label>\n                          )}\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n            </div>\n            <div className={styles.absoluteBottomBlock}>\n              <div className={styles.centeredBlock}>\n                <div className={styles.leftBlockCrypt}>\n                  <div\n                    className={styles.textBlockLeft}\n                    style={{ marginRight: \"1rem\" }}\n                  >\n                    <span>You are exchanging</span>\n                    <h4>\n                      {selectedFromAmount || 0} {selectedFrom.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrencyState.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedFrom.image}\n                      alt=\"\"\n                    />\n                  </div>\n                </div>\n                <div className={styles.centeredBlockCrypt}>\n                  <div className={styles.iconBlock}>\n                    <i\n                      style={{ color: \"#fff\" }}\n                      className={\n                        isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                      }\n                    />\n                  </div>\n                </div>\n                <div className={styles.rightBlockCrypt}>\n                  <div className={\"imgToCenter\"} style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedTo.image}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className={styles.textBlockRight}>\n                    <span>You will Receive</span>\n                    <h4>\n                      {selectedFromAmount ? selectedToAmount : 0}{\" \"}\n                      {selectedTo.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrencyState.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {error && !invalidEx && selectedFromAmount ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>{error}</h5>\n              </Grid.Row>\n            ) : null}\n            {Number(selectedFrom.balance) < Number(selectedFromAmount) ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>\n                  You don't have enough crypto\n                </h5>\n              </Grid.Row>\n            ) : null}\n            <div className=\"hidden-pass ui input\">\n              {passwordShouldBeProvided && (\n                <>\n                  <Input\n                    size=\"medium\"\n                    type=\"password\"\n                    placeholder=\"Passkey\"\n                    onChange={(e) => setPassword(e.target.value)}\n                    value={password}\n                  />\n\n                  <Button\n                    disabled={password.length === 0}\n                    onClick={performTrade}\n                    size=\"medium\"\n                    color=\"yellow\"\n                    ui\n                  >\n                    Submit\n                  </Button>\n                </>\n              )}\n\n              {tradeInProgress && <MetaLoader size={\"small\"} />}\n\n              {!passwordShouldBeProvided && !tradeInProgress && (\n                <Button\n                  className={\"btnExch\"}\n                  disabled={\n                    tradeInProgress ||\n                    selectedToAmount == null ||\n                    selectedToAmount == 0 ||\n                    selectedToAmount === 0.0 ||\n                    selectedFrom.balance === 0 ||\n                    Number(selectedFrom.balance) < Number(selectedFromAmount) ||\n                    !selectedFromAmount ||\n                    !selectedToAmount ||\n                    // blockPrice == 0 ||\n                    error\n                  }\n                  onClick={prepareTrade}\n                  color=\"yellow\"\n                  size=\"large\"\n                >\n                  Exchange\n                </Button>\n              )}\n            </div>\n          </div>\n          <div className={\"flexNeed customFlexNeed newCustomFlexNeed\"} >\n            <RightSideHelpMenuSecondType\n              fromHistory=\"exchange\"\n              onClickExchangeEOSHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/EOS.fb40b8e0.svg\",\n                  value: \"EOS\",\n                  label: \"EOS\",\n                  pre: 4,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"EOS\") {\n                    setSelectedFrom({\n                      image: \"/static/media/EOS.fb40b8e0.svg\",\n                      value: \"EOS\",\n                      label: \"EOS\",\n                      pre: 4,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n              onClickExchangeUSDTHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/USDT.004b5e55.svg\",\n                  value: \"USDT\",\n                  label: \"USDT\",\n                  pre: 2,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"USDT\") {\n                    setSelectedFrom({\n                      image: \"/static/media/USDT.004b5e55.svg\",\n                      value: \"USDT\",\n                      label: \"USDT\",\n                      pre: 2,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/index.js",["402","403"],"import React, { useEffect, useState } from \"react\";\nimport { UserInformationForm } from \"./UserInformationForm.js\";\nimport SubmitForm from \"./SubmitForm.js\";\nimport createAccountWithPassword from \"../../lib/createAccountWithPassword.js\";\nimport { Button } from \"semantic-ui-react\";\nimport RightSideHelpMenuFirstType from \"../RightSideHelpMenuFirstType/RightSideHelpMenuFirstType\";\n\nimport { checkOldUser } from \"../../API/API\";\nimport OpenLogin from '@toruslabs/openlogin';\n\nimport \"./SignUpForm.css\";\nimport FaceKiForm from \"./FaceKiForm.js\";\nimport MigrationForm from \"./MigrationForm.js\";\n\nexport default function SignUpForm(props) {\n  const {\n    onRegistration,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    portfolio,\n    isSignatureProcessing,\n    signatureResult\n  } = props;\n  const [accountName, setAccountName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [step, setStep] = useState('userform');\n  const [authData, setAuthData] = useState(null);\n  const [privKey, setPrivKey] = useState(null);\n\n  useEffect(() => {\n    if (isSignatureProcessing) {\n      setAccountName(localStorage.getItem('login'));\n      setPassword(localStorage.getItem('password'));\n      setFirstName(localStorage.getItem('firstname'));\n      setLastName(localStorage.getItem('lastname'));\n      setPhone(localStorage.getItem('phone'));\n      setEmail(localStorage.getItem('email'));\n      setStep('signature');\n    }\n  }, [])\n\n  const openLogin = new OpenLogin({\n    clientId: process.env.REACT_APP_TORUS_PROJECT_ID,\n    network: process.env.REACT_APP_TORUS_NETWORK,\n    uxMode: 'popup',\n    whiteLabel: {\n      name: 'META1'\n    },\n  });\n\n  const stepUserInfoSubmit = async (\n    accName,\n    pass,\n    newPhone,\n    newLastName,\n    newFirstName\n  ) => {\n    setAccountName(accName);\n    setFirstName(newFirstName);\n    setPassword(pass);\n    setLastName(newLastName);\n    setPhone(newPhone);\n\n    const response = await checkOldUser(accName);\n    \n    if (response?.found === true) {\n      setStep('migration');\n    }\n    else renderTorusStep();\n  };\n\n  const stepGoToTorus = (\n    accName,\n    pass,\n    newPhone,\n    newLastName,\n    newFirstName\n  ) => {\n    setAccountName(accName);\n    setFirstName(newFirstName);\n    setPassword(pass);\n    setLastName(newLastName);\n    setPhone(newPhone);\n    renderTorusStep();\n  };\n\n  const stepGoToEsignature = () => {\n    setStep('submit');\n  };\n\n  const stepLastSubmit = async () => {\n\n    try {\n      await createAccountWithPassword(\n        accountName,\n        password,\n        false,\n        \"\",\n        1,\n        \"\",\n        phone,\n        email,\n        lastName,\n        firstName\n      );\n      localStorage.removeItem('password');\n      localStorage.removeItem('firstname');\n      localStorage.removeItem('lastname');\n      localStorage.removeItem('phone');\n      localStorage.removeItem('email');\n      onRegistration(accountName, password, email);\n    } catch (e) { }\n  };\n\n  const renderStep = () => {\n    switch (step) {\n      case 'userform':\n        return <UserInformationForm\n          {...props}\n          onSubmit={stepUserInfoSubmit}\n          accountName={accountName}\n          lastName={lastName}\n          firstName={firstName}\n          password={password}\n          phone={phone}\n        />\n      case 'faceki':\n        return <FaceKiForm\n          {...props}\n          onClick={stepGoToEsignature}\n          accountName={accountName}\n          lastName={lastName}\n          firstName={firstName}\n          password={password}\n          email={email}\n          privKey={privKey}\n        />\n      case 'migration':\n        return <MigrationForm\n          {...props}\n          onClick={stepGoToTorus}\n          accountName={accountName}\n          lastName={lastName}\n          firstName={firstName}\n          password={password}\n          email={email}\n          privKey={privKey}\n        />\n      case 'submit':\n        return <SubmitForm\n          {...props}\n          onSubmit={stepLastSubmit}\n          accountName={accountName}\n          lastName={lastName}\n          firstName={firstName}\n          password={password}\n          privKey={privKey}\n          email={email}\n          phone={phone} />\n      case 'signature':\n        return <SubmitForm\n          {...props}\n          onSubmit={stepLastSubmit}\n          accountName={accountName}\n          lastName={lastName}\n          firstName={firstName}\n          password={password}\n          privKey={privKey}\n          email={email}\n          signatureResult={signatureResult}\n          phone={phone} />\n      default:\n        return null;\n    }\n  }\n\n  const renderTorusStep = async () => {\n    if (\n      !openLogin\n    ) {\n      return;\n    }\n\n    try {\n      await openLogin.init();\n      await openLogin.login();\n      if (openLogin.privKey) {\n        const privKey = openLogin.privKey;\n        const data = await openLogin.getUserInfo();\n\n        setAuthData(data);\n        setPrivKey(privKey);\n        setEmail(data?.email);\n\n        console.log('User logged in');\n        setStep('faceki');\n      }\n    } catch (error) {\n      console.log('Error in Torus Render', error);\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <div\n          style={{\n            background: \"#fff\",\n            width: \"100%\",\n            height: \"3.7rem\",\n            padding: \"1.1rem 2rem\",\n            boxShadow: \"0 9px 10px 0 rgba(0,0,0,0.11)\",\n            fontSize: \"1.3rem\",\n            fontWeight: \"bold\",\n          }}\n        >\n          <span style={{ color: \"#240000\" }}>META Lite Wallet</span>\n        </div>\n        <div className={\"createWalletForm\"}>\n          <div className={\"justFlexAndDirect\"}>\n            <div className={\"regForm\"}>\n              <Button\n                style={{ color: \"#fdc000\", fontSize: \".9rem\" }}\n                labelPosition=\"left\"\n              >\n                <i\n                  className=\"fal fa-arrow-left\"\n                  style={{ marginRight: \".5rem\" }}\n                />\n                <span\n                  style={{\n                    borderBottom: \"1px solid #fdc000\",\n                    color: \"#fdc000\",\n                  }}\n                >\n                  Back\n                </span>\n              </Button>\n              {renderStep()}\n            </div>\n            <div className={\"adaptThing\"}>\n              <RightSideHelpMenuFirstType\n                onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n                onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n                portfolio={portfolio}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SendForm/index.js",["404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],"import MetaLoader from \"../../UI/loader/Loader\";\nimport React, { useState, useEffect } from \"react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport styles from \"./SendForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport { Modal, Icon, Button, Grid, Header, Popup } from \"semantic-ui-react\";\nimport Input from \"@mui/material/Input\";\nimport { helpSendTo, helpAmount, helpMax1, helpSwap } from \"../../config/help\";\nimport \"./style.css\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport Meta1 from \"meta1-vision-dex\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { checkPasswordObjSelector, portfolioReceiverSelector, senderApiSelector, userCurrencySelector } from \"../../store/meta1/selector\";\nimport { accountsSelector, isValidPasswordKeySelector, passwordKeyErrorSelector } from \"../../store/account/selector\";\nimport { saveBalanceRequest } from \"../../store/meta1/actions\";\nimport { passKeyRequestService, passKeyResetService } from \"../../store/account/actions\";\n\nconst FEE = 0.00034;\n\nconst SendForm = React.memo((props) => {\n  const {\n    portfolio,\n    onBackClick,\n    sender,\n    asset,\n    onSuccessTransfer,\n    assets,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler\n  } = props;\n  const userCurrencyState = useSelector(userCurrencySelector);\n  const sendApiState = useSelector(senderApiSelector);\n  const portfolioReceiverState = useSelector(portfolioReceiverSelector);\n  const accountState = useSelector(accountsSelector);\n  const dispatch = useDispatch();\n  const feeAsset = portfolio.find((asset) => asset.name === \"META1\");\n  const amountHold =\n    portfolio.find((cur) => cur.name === asset).qty == undefined\n      ? 0\n      : portfolio.find((cur) => cur.name === asset).qty;\n  const pre = assets.find((el) => el.symbol === asset).precision;\n  const [chosenCrypt, setChosenCrypt] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [assetCh, setAssetCh] = useState(asset);\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [repeat, setRepeat] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [askForPassword, setAskForPassword] = useState(false);\n  const [inProgress, setInProgress] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(false);\n  const [accountIsLoading, setAccountIsLoading] = useState(false);\n  const debouncedAccount = useDebounce(receiver, 500);\n  const [assetData, setAssetData] = useState({});\n  const [balance, setBalance] = useState(amountHold);\n  const [options, setOptions] = useState([]);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState(0);\n  const [precisionAssets, setPrecisionAssets] = useState();\n  const [password, setPassword] = useState(\"\");\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [feeAlert, setFeeAlert] = useState(false);\n  const checkPasswordState = useSelector(checkPasswordObjSelector);\n  const isValidPasswordKeyState = useSelector(isValidPasswordKeySelector);\n  const passwordKeyErrorState = useSelector(passwordKeyErrorSelector);\n\n  useEffect(() => {\n    async function getData() {\n      if (asset !== \"USDT\" && asset !== \"META1\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        await setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"META1\") {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      } else {\n        setPriceForAsset(1);\n      }\n    }\n    getData();\n  }, [asset]);\n\n  useEffect(() => {\n    if (!isValidPasswordKeyState && passwordKeyErrorState) {\n      setError(\"Invalid Credentials\");\n      setRepeat(true);\n      dispatch(passKeyResetService());\n      setInProgress(false);\n    }\n    if (isValidPasswordKeyState) {\n      dispatch(passKeyResetService());\n      performTransferSubmit();\n    }\n  },[isValidPasswordKeyState, passwordKeyErrorState])\n\n  const performTransferSubmit = async () => {\n    const result = await sendApiState.perform({\n      password,\n      to: receiver,\n      amount,\n      message,\n      asset,\n    });\n    if (result.error) {\n      if (result.error === \"Invalid credentials\") {\n        setError(result.error);\n      } else if ((asset === \"META1\" && feeAsset.qty === amount) || !feeAsset) {\n        setError(\"You don't have enough cryptocurrency to pay FEE\");\n      } else {\n        setError(\"Invalid Receiver\");\n      }\n      setRepeat(true);\n    } else {\n      dispatch(saveBalanceRequest(accountState))\n      setModalOpened(true);\n    }\n    setInProgress(false);\n  }\n  useEffect(() => {\n    function filterPrec() {\n      let preObj = {};\n      for (let i = 0; i < assets.length; i++) {\n        preObj[assets[i].symbol] = assets[i].precision;\n      }\n      setPrecisionAssets(preObj);\n    }\n    filterPrec();\n  }, [assets]);\n\n  useEffect(() => {\n    if (parseFloat(feeAsset?.qty) < FEE && feeAsset) {\n      setError(\"Not enough FEE\");\n    }\n  }, [feeAsset]);\n\n  useEffect(() => {\n    if (receiver.length > 0) {\n      setError(\"\");\n      setAccountIsLoading(true);\n      setAccountChecked(false);\n    }\n    setOptions(newOptions.sort((a, b) => (a.name > b.name ? 1 : -1)));\n  }, [receiver]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      let allInputs = document.getElementsByClassName(\n        \"css-1pw81iq-MuiInputBase-root-MuiFilledInput-root\"\n      );\n      for (let i = 0; i < allInputs.length; i++) {\n        allInputs[i].style.borderRadius = \"8px\";\n      }\n    }, 50);\n  }, []);\n\n  useEffect(() => {\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [amount, receiver]);\n\n  const RedditTextField = React.memo(\n    styled((props) => (\n      <TextField InputProps={{ disableUnderline: true }} {...props} />\n    ))(({ theme }) => ({\n      \"& .MuiFilledInput-root\": {\n        border: \"1px solid #e2e2e1\",\n        overflow: \"hidden\",\n        backgroundColor: theme.palette.mode === \"light\" ? \"#fcfcfb\" : \"#2b2b2b\",\n        borderRadius: \"8px !important\",\n        transition: theme.transitions.create([\n          \"border-color\",\n          \"background-color\",\n          \"box-shadow\",\n        ]),\n        \"&:hover\": {\n          backgroundColor: \"transparent\",\n        },\n        \"&.Mui-focused\": {\n          backgroundColor: \"transparent\",\n          boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n          borderColor: theme.palette.primary.main,\n        },\n      },\n    }))\n  );\n\n  const setSelected = (value) => {\n    setAssetCh(value.value);\n    portfolio.map((el) =>\n      el.name === value.value\n        ? setAssetData({\n          balance: el.qty,\n          image: el.image,\n          label: el.name,\n          value: el.name,\n        })\n        : null\n    );\n  };\n  const calculateUsdPriceHandler = (e) => {\n    let priceForOne = Number(e.target.value) * priceForAsset;\n    setBlockPrice(\n      Number(priceForOne).toFixed(precisionAssets[asset]) *\n      Number(userCurrencyState.split(\" \")[2])\n    );\n  };\n\n  const newOptions = portfolio.map((asset) => {\n    return {\n      image: asset.image,\n      value: asset.name,\n      label: asset.name,\n      balance: asset.qty || 0,\n    };\n  });\n\n  const calculateCryptoPriceHandler = (e) => {\n    let priceForOne = (\n      Number(e.target.value.split(\"$\")[0]) /\n      priceForAsset /\n      Number(userCurrencyState.split(\" \")[2])\n    ).toFixed(precisionAssets[asset]);\n    setAmount(priceForOne);\n    setBlockPrice(e.target.value);\n  };\n\n  useEffect(() => {\n    async function fetchAccount(debouncedAccount) {\n      // Сделать запрос к АП\n      try {\n        await portfolioReceiverState.fetch(debouncedAccount);\n        setAccountChecked(true);\n        setAccountIsLoading(false);\n        if (receiver === sender) {\n          setError(\"Can't transfer to self\");\n        }\n      } catch (e) {\n        setAccountChecked(false);\n        setAccountIsLoading(false);\n        setError(\"Invalid receiver\");\n      }\n    }\n\n    if (debouncedAccount) {\n      fetchAccount(debouncedAccount);\n    } else {\n      setAccountChecked(false);\n      setAccountIsLoading(false);\n    }\n\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [debouncedAccount, amount]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const performTransfer = async (params) => {\n    let asset = assetCh;\n    setError(null);\n    setInProgress(true);\n    const { password } = params;\n    dispatch(passKeyRequestService({ login: accountState, password}));  \n  };\n\n  const setAssetMax = () => {\n    setAmount(assetData.balance);\n    setBlockPrice(\n      Number(assetData.balance * priceForAsset).toFixed(\n        precisionAssets[asset]\n      ) * Number(userCurrencyState.split(\" \")[2])\n    );\n  };\n\n  useEffect(() => {\n    if (repeat) {\n      setTimeout(() => {\n        setError(null);\n        setRepeat(false);\n      }, 2000);\n    }\n  }, [repeat]);\n\n  useEffect(() => {\n    portfolio.map((el) =>\n      el.name === assetCh\n        ? setAssetData({\n          balance: el.qty,\n          image: el.image,\n          label: el.name,\n          value: el.name,\n        })\n        : null\n    );\n  }, [assetCh, assets]);\n  const PasswordForm = (props) => {\n    const [password, setPassword] = useState(\"\");\n    return (\n      <div class=\"ui large fluid labeled input action\">\n        <input\n          type=\"password\"\n          placeholder=\"Passkey\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value.trim())}\n        />\n        <Button color=\"yellow\" onClick={(e) => props.onSubmit(password)}>\n          {\" \"}\n          Send{\" \"}\n        </Button>\n      </div>\n    );\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  return (\n    <>\n      <div>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the send of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Send</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"tiny\"\n          id={\"modal\"}\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n            onSuccessTransfer();\n          }}\n        >\n          <Modal.Header>Transfer Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={1}>\n                <Grid.Column>\n                  <h3>\n                    {amount} of {assetCh} sent to {receiver}\n                  </h3>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              positive\n              onClick={() => {\n                setModalOpened(false);\n                onSuccessTransfer();\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"justFlexAndDirect\"}>\n          <div className={\"widthh100\"}>\n            <div className={styles.containerMain}>\n              <div className={styles.mainBlock}>\n                <div className={styles.leftBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Send</h2>\n                  <RedditTextField\n                    label=\"From\"\n                    defaultValue={sender}\n                    className={styles.input}\n                    disabled\n                    id=\"reddit-input\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div\n                    className={styles.inputForAmount}\n                    style={{ marginBottom: \"1rem\" }}\n                  >\n                    <span\n                      style={{\n                        fontSize: \".8rem\",\n                        color: \"#505361\",\n                        marginBottom: \".3rem\",\n                      }}\n                    >\n                      Amount {assetData.label}\n                    </span>\n                    <Input\n                      id={\"inputForAmount\"}\n                      type=\"number\"\n                      value={amount ? amount : \"\"}\n                      min=\"0\"\n                      endAdornment={\n                        <InputAdornment position=\"end\" className=\"currency-color-change\" >\n                          <span style={{ fontSize: '16px' }}>{assetData.label}</span>\n                        </InputAdornment>\n                      }\n                      onChange={(e) => {\n                        const amountOut = e.target.value;\n                        if (\n                          e.target.value.length < 11 &&\n                          /[-+]?[0-9]*\\.?[0-9]*/.test(e.target.value) &&\n                          Number(e.target.value) >= 0\n                        ) {\n                          setClickedInputs(true);\n                          setAmount(amountOut);\n                          calculateUsdPriceHandler(e);\n                        }\n                      }}\n                      placeholder={balance}\n                    />\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        marginTop: \".1rem\",\n                        fontSize: \"1rem\",\n                        color: \"#505361\",\n                        position:'relative'\n                      }}\n                    >\n                      <input\n                        type=\"number\"\n                        className={styles.inputDollars}\n                        min=\"0\"\n                        inputmode=\"numeric\"\n                        pattern=\"\\d*\"\n                        onChange={(e) => {\n                          if (Number(e.target.value) >= 0) {\n                            setClickedInputs(true);\n                            calculateCryptoPriceHandler(e);\n                          }\n                        }}\n                        placeholder={`Amount ${userCurrencyState.split(\" \")[1]}`}\n                        value={amount ? blockPrice : \"\"}\n                      />\n                      <span style={{ fontSize: '16px' }} className={styles['abs-sp']} >{userCurrencyState.split(\" \")[0]}</span>\n                    </div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        position: \"relative\",\n                      }}\n                    >\n                      <span style={{ color: \"#505361\", paddingTop: \"2rem\" }}>\n                        FEE: {FEE} META1\n                      </span>\n                      <div\n                        className=\"max-button-new\"\n                        style={{\n                          position: \"absolute\",\n                          right: \"0\",\n                          bottom: \"-3px\",\n                        }}\n                      >\n                        <Popup\n                          content={`Click this button to sell all your ${assetData.label}`}\n                          position={isMobile ? \"bottom left\" : \"bottom center\"}\n                          trigger={\n                            <Button\n                              className={\"btn\"}\n                              secondary\n                              onClick={setAssetMax}\n                              floated=\"right\"\n                              size=\"mini\"\n                            >\n                              MAX\n                            </Button>\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <Grid.Column>\n                    <TextField\n                      InputProps={{ disableUnderline: true }}\n                      label=\"Passkey\"\n                      className={styles.input}\n                      type={\"password\"}\n                      id=\"reddit-input pass\"\n                      variant=\"filled\"\n                      style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                      value={password}\n                      onChange={({ target }) => setPassword(target.value)}\n                    />\n                  </Grid.Column>\n                </div>\n                <div\n                  style={{\n                    marginTop: \"4rem\",\n                    marginLeft: \".3rem\",\n                    width: \"40px\",\n                    height: \"40px\",\n                    background: \"#fdc000\",\n                    borderRadius: \"40px\",\n                    padding: \".7rem .85rem\",\n                  }}\n                  className=\"text-center-s\"\n                >\n                  <i\n                    style={{ color: \"#fff\" }}\n                    className={\n                      isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                    }\n                  />\n                </div>\n                <div className={styles.rightBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                  <TextField\n                    InputProps={{ disableUnderline: true }}\n                    label=\"To\"\n                    value={receiver}\n                    onChange={(e) => {\n                      setReceiver(e.target.value);\n                    }}\n                    className={styles.input}\n                    id=\"reddit-input receiver\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div className={styles.blockInfoCrypto}>\n                    <img\n                      style={{ width: \"60px\", height: \"60px\" }}\n                      src={assetData.image}\n                      alt=\"cryptImg\"\n                    />\n                    <div className={styles.blockInfoText}>\n                      <span>You will Send {assetData.label} Coin</span>\n                      <h3>\n                        {Number(amount) ? amount : 0} {assetData.label}\n                      </h3>\n                      <span>\n                        {blockPrice || 0} {userCurrencyState.split(\" \")[1]}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {!askForPassword && !inProgress && (\n                <Grid.Row className={\"buttonSend\"} columns={1}>\n                  <Popup\n                    disabled\n                    trigger={\n                      <button\n                        className={\"btnSend ui button yellow buttSend\"}\n                        style={{\n                          marginLeft: \"2rem\",\n                          marginTop: \"1rem\",\n                          boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, .11)\",\n                        }}\n                        disabled={\n                          !accountChecked ||\n                          amount === \"\" ||\n                          password === \"\" ||\n                          error\n                        }\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (Number(amount) > Number(amountHold)) {\n                            setAskForPassword(false);\n                            setError(`your balance is not enough `);\n                            setRepeat(true);\n                          } else {\n                            let password =\n                              document.getElementById(\n                                \"reddit-input pass\"\n                              ).value;\n                            if (receiver !== \"\" && password !== \"\" && amount) {\n                              if (parseFloat(feeAsset?.qty) < FEE) {\n                                setError(\"Not enough FEE\");\n                              } else {\n                                if (\n                                  assetCh === \"META1\" &&\n                                  Number(amount) === Number(feeAsset.qty)\n                                ) {\n                                  setFeeAlert(true);\n                                } else {\n                                  performTransfer({\n                                    ...{ to: receiver },\n                                    ...{\n                                      password,\n                                      amount,\n                                      assetCh,\n                                      message,\n                                    },\n                                  });\n                                }\n                              }\n                            } else {\n                              setError(\n                                \"You have entered incorrect data, please check it.\"\n                              );\n                            }\n                          }\n                        }}\n                      >\n                        Confirm\n                      </button>\n                    }\n                  />\n                </Grid.Row>\n              )}\n\n              {inProgress && <MetaLoader size={\"small\"} />}\n\n              {error && (\n                <Grid>\n                  <Grid.Row centered>\n                    <h5 style={{ color: \"red\" }}>{error}</h5>\n                  </Grid.Row>\n                </Grid>\n              )}\n            </div>\n          </div>\n          <div className={\"bottomBlockAdapt\"}>\n            <RightSideHelpMenuSecondType\n              onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n              onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default SendForm;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/DepositForm/index.js",["428","429","430","431","432","433","434"],"import { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Message,\n  Modal,\n  Icon,\n  Button,\n  Grid,\n  Header,\n  Input,\n} from \"semantic-ui-react\";\nimport QRCode from \"react-qr-code\";\n\nimport \"./style.css\";\n\nexport default function DepositForm(props) {\n  const { fetcher, account, onBackClick, asset } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [address, setAddress] = useState(props.address);\n  const [refreshData, setRefreshData] = useState(false);\n  const canDeposit = address.length > 0;\n  useEffect(() => {\n    async function fetchAddress(asset) {\n      if (typeof fetcher !== 'function') {\n        setRefreshData(prev => !prev);\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const fetchedAsset = asset === \"USDT\" ? \"eth\" : asset;\n        const resp = await fetcher(fetchedAsset);\n        const body = await resp.body.getReader().read();\n        if (resp.status === 200) {\n          const addr = JSON.parse(\n            new TextDecoder(\"utf-8\").decode(body.value)\n          ).address;\n          setAddress(addr);\n        }\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n      }\n    }\n\n    if (asset !== undefined) fetchAddress(asset);\n  }, [asset, refreshData]);\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Deposit</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n\n        <div className=\"qr-section\">\n          <div\n            style={{\n              background: \"#F0F1F4\",\n              padding: \"1rem\",\n              width: \"96%\",\n              margin: \"0 auto\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <span\n              style={{\n                color: \"#000\",\n                fontWeight: \"bold\",\n                fontSize: \".8rem\",\n                margin: \"1rem\",\n              }}\n            >\n              DEPOSIT <span style={{ color: \"#FFC000\" }}>{asset}</span>\n            </span>\n            <div className={\"needAdaptToQR\"}>\n              {!isLoading && !canDeposit && <p> Cannot deposit </p>}\n              {!isLoading && canDeposit && (\n                <QRCode value={address} size={200} />\n              )}\n            </div>\n          </div>\n          <p\n            style={{\n              margin: \"1rem\",\n              color: \"#505361\",\n              fontWeight: \"600\",\n              fontSize: \".8rem\",\n            }}\n          >\n            Minimum deposit: 0.001 {asset} {asset.toLowerCase()==='usdt'?'(ERC20)':''}\n          </p>\n          <div>\n            {!isLoading && canDeposit && (\n              <CopyToClipboard text={address} onCopy={() => {}}>\n                <div style={{ width: \"100%\" }}>\n                  <Input\n                    style={{ width: \"100%\" }}\n                    action={{\n                      color: \"yellow\",\n                      labelPosition: \"right\",\n                      icon: \"copy\",\n                      content: \"Copy\",\n                    }}\n                    value={address}\n                  />\n                </div>\n              </CopyToClipboard>\n            )}\n          </div>\n\n          <Message\n            className={\"messageRed\"}\n            icon=\"attention\"\n            header=\"Important information\"\n            content={`Send only ${asset} ${asset.toLowerCase()==='usdt'?'ERC20':''} to this address. Sending less than 0.001 ${asset} or any other currency to this address may result in the loss of your deposit`}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/WithdrawForm/index.js",["435","436","437","438","439","440","441","442","443","444","445","446","447","448","449"],"\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport React, { useState, useEffect } from \"react\";\nimport Meta1 from \"meta1-vision-dex\";\nimport { PrivateKey } from \"meta1-vision-js\";\nimport {\n  Image, Modal, Button, Grid, Icon, Label, Popup\n} from \"semantic-ui-react\";\nimport Input from \"@mui/material/Input\";\nimport TextField from \"@mui/material/TextField\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport CAValidator from \"multicoin-address-validator\";\n\nimport \"./style.css\";\nimport ExchangeSelect from \"../ExchangeForm/ExchangeSelect.js\";\nimport styles from \"../ExchangeForm/ExchangeForm.module.scss\";\nimport { helpWithdrawInput, helpMax1 } from \"../../config/help\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { trim } from \"../../helpers/string\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sendEmailSelector } from \"../../store/account/selector\";\nimport { sendMailRequest, sendMailReset } from \"../../store/account/actions\";\nimport { userCurrencySelector } from \"../../store/meta1/selector\";\n\nconst WITHDRAW_ASSETS = ['ETH', 'USDT']\n\nconst MIN_WITHDRAW_AMOUNT = {\n  \"BTC\": 0.0005,\n  \"ETH\": 0.01,\n  \"LTC\": 0.001,\n  \"EOS\": 0.1,\n  \"XLM\": 0.01,\n  \"META1\": 0.02,\n  \"USDT\": 50,\n};\n\nconst WithdrawForm = (props) => {\n  const {onBackClick, asset } = props;\n  const userCurrencyState = useSelector(userCurrencySelector);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedFrom, setSelectedFrom] = useState(props.selectedFrom);\n  const [selectedFromAmount, setSelectedFromAmount] = useState(\"\");\n  const [amountError, setAmountError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [isValidName, setIsValidName] = useState(false);\n  const [emailAddress, setEmailAddress] = useState(\"\");\n  const [isValidEmailAddress, setIsValidEmailAddress] = useState(false);\n  const [blockPrice, setBlockPrice] = useState();\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [assets, setAssets] = useState(props.assets);\n  const [options, setOptions] = useState([]);\n  const [invalidEx, setInvalidEx] = useState(false);\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [toAddress, setToAddress] = useState(\"\");\n  const [isValidAddress, setIsValidAddress] = useState(false);\n  const [isValidCurrency, setIsValidCurrency] = useState(false);\n  const sendEmailState = useSelector(sendEmailSelector);\n  const dispatch = useDispatch();\n  const ariaLabel = { \"aria-label\": \"description\" };\n  useEffect(() => {\n    const currentPortfolio = props.portfolio || [];\n    setAssets(props.assets);\n\n    const getBalance = (symbol) => {\n      const assetInWallet = currentPortfolio.find((el) => el.name === symbol);\n\n      return assetInWallet ? assetInWallet.qty : 0;\n    };\n\n    const newOptions = assets.map((asset) => {\n      return {\n        image: asset.image,\n        value: asset.symbol,\n        label: asset.symbol,\n        pre: asset.precision,\n        balance: getBalance(asset.symbol) || 0,\n      };\n    });\n\n    setOptions(newOptions);\n\n    if (options !== []) {\n      const from = asset\n        ? newOptions.find((el) => el.value === asset)\n        : newOptions[0];\n\n      setSelectedFrom(from);\n    } else {\n      setSelectedFrom(newOptions.find((o) => o.value === selectedFrom.value));\n    }\n  }, [props.assets, props.portfolio]);\n  useEffect(() => {\n    if (selectedFrom) {\n      changeAssetHandler(selectedFrom.value);\n    }\n  }, [selectedFrom]);\n\n  useEffect(() => {\n    if (selectedFrom && selectedFromAmount) {\n      console.log(\"@1 - \", selectedFromAmount === 0)\n      if (parseFloat(selectedFrom.balance) < parseFloat(selectedFromAmount)) {\n        setAmountError('Amount exceeded the balance.');\n      } else if (parseFloat(MIN_WITHDRAW_AMOUNT['USDT']) > parseFloat(blockPrice)/userCurrencyState.split(' ')[2]) {\n        setAmountError('Amount is too small.');\n      } else {\n        setAmountError('');\n      }\n    } else {\n      setAmountError('');\n    }\n  }, [selectedFromAmount, blockPrice]);\n\n  useEffect(() => {\n    if (!name) {\n      setIsValidName(true);\n    } else if (trim(name) === '') {\n      setIsValidName(false);\n    } else {\n      setIsValidName(true);\n    }\n  }, [name]);\n\n  useEffect(() => {\n    if (emailAddress) {\n      setIsValidEmailAddress(\n        String(emailAddress).toLowerCase().match(\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        )\n      );\n    } else {\n      setIsValidEmailAddress(false);\n    }\n  }, [emailAddress]);\n\n  useEffect(() => {\n    if (selectedFrom && toAddress) {\n      if (process.env.REACT_APP_ENV === 'prod') {\n        setIsValidAddress(CAValidator.validate(toAddress, selectedFrom.value));\n      } else {\n        setIsValidAddress(\n          CAValidator.validate(toAddress, selectedFrom.value, \"testnet\")\n        );\n      }\n    }\n  }, [toAddress, selectedFrom]);\n  const changeAssetHandler = async (val) => {\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1\n        .ticker(\"USDT\", \"META1\")\n        .then((res) => setPriceForAsset(Number(res.latest).toFixed(2)));\n    }\n  };\n\n  const setAssetMax = (e) => {\n    e.preventDefault();\n    setSelectedFromAmount(selectedFrom.balance);\n    setTimeout(() => {\n      let priceForOne = (\n        Number(document.getElementById(\"inputAmount\").value) * priceForAsset\n      ).toFixed(3);\n      setBlockPrice(priceForOne * Number(userCurrencyState.split(\" \")[2]));\n    }, 25);\n  };\n\n  const calculateUsdPriceHandler = (e) => {\n    if (e.target.value.length != 0) {\n      const priceForOne = (Number(e.target.value) * priceForAsset).toFixed(2);\n      setBlockPrice(priceForOne * Number(userCurrencyState.split(\" \")[2]));\n    } else {\n      setBlockPrice(NaN);\n    }\n  };\n\n  const calculateCryptoPriceHandler = (e) => {\n    setBlockPrice(e.target.value);\n\n    if (e.target.value) {\n      let priceForOne = (\n        Number(e.target.value) /\n        priceForAsset /\n        Number(userCurrencyState.split(\" \")[2])\n      ).toFixed(selectedFrom.label === \"USDT\" ? 3 : selectedFrom.pre);\n      setSelectedFromAmount(priceForOne);\n    } else {\n      setSelectedFromAmount(e.target.value);\n    }\n  };\n\n  const onClickWithdraw = (e) => {\n    e.preventDefault();\n\n    const emailType = \"withdraw\";\n    const emailData = {\n      accountName: props.accountName,\n      name: trim(name),\n      emailAddress: trim(emailAddress),\n      asset: selectedFrom.value,\n      amount: selectedFromAmount,\n      toAddress: trim(toAddress)\n    };\n    dispatch(sendMailRequest({emailType,emailData}))\n  }\n\n  useEffect(()=>{\n    if (sendEmailState) {\n      alert(\"Email sent, awesome!\");\n      // Reset form inputs\n      setName('');\n      setEmailAddress('');\n      setSelectedFromAmount(NaN);\n      setBlockPrice(NaN);\n      setToAddress('');\n      dispatch(sendMailReset());\n    }\n  }, [sendEmailState]);\n\n  if (selectedFrom == null) return null;\n\n  const getAssets = (except) => options\n    .filter((asset) => WITHDRAW_ASSETS.indexOf(asset.value) > -1)\n    .filter((el) => el.value !== except);\n\n  const canWithdraw = name && isValidName &&\n    isValidEmailAddress &&\n    isValidAddress &&\n    !amountError &&\n    selectedFromAmount;\n\n  return (\n    <>\n      <div className=\"withdraw\">\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Withdraw</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n\n        {isLoading ?\n          <MetaLoader size={\"small\"} />\n          :\n          <form>\n            <label>\n              <span>Name:</span><br />\n              <TextField\n                InputProps={{ disableUnderline: true, className: 'custom-input-bg' }}\n                value={name}\n                onChange={(e) => { setName(e.target.value) }}\n                className={styles.input}\n                id=\"name-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n              {name && !isValidName &&\n                <span className=\"c-danger\">Invalid first name</span>\n              }\n            </label><br />\n            <label>\n              <span>Email Address:</span><br />\n              <TextField\n                InputProps={{ disableUnderline: true, className: 'custom-input-bg' }}\n                value={emailAddress}\n                onChange={(e) => { setEmailAddress(e.target.value) }}\n                className={styles.input}\n                id=\"emailaddress-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n              {emailAddress && !isValidEmailAddress &&\n                <span className=\"c-danger\">Invalid email address</span>\n              }\n            </label><br />\n            <label>\n              <span>META1 Wallet Name:</span>\n              <TextField\n                InputProps={{ disableUnderline: true }}\n                value={props.accountName}\n                disabled={true}\n                className={styles.input}\n                id=\"wallet-name-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n            </label><br />\n            <label>\n              <span>From Currency:</span>\n              <ExchangeSelect\n                onChange={(val) => {\n                  setSelectedFrom(val);\n                  changeAssetHandler(val.value);\n                  setSelectedFromAmount(NaN);\n                  setBlockPrice(NaN);\n                  setInvalidEx(false);\n                }}\n                options={getAssets(selectedFrom.value)}\n                selectedValue={selectedFrom}\n              />\n            </label><br />\n            <label>\n              <span>From Amount:</span>\n              <div className=\"wallet-input\">\n                <Popup\n                  content={helpWithdrawInput(selectedFrom?.value)}\n                  position=\"bottom center\"\n                  trigger={\n                    <div className={styles.inputForAmount}>\n                      <Input\n                        placeholder=\"Amount crypto\"\n                        value={selectedFromAmount}\n                        type={\"number\"}\n                        onChange={(e) => {\n                          if (\n                            e.target.value.length < 11 &&\n                            /[-+]?[0-9]*\\.?[0-9]*/.test(\n                              e.target.value\n                            ) &&\n                            Number(e.target.value) >= 0\n                          ) {\n                            setSelectedFromAmount(e.target.value);\n                            calculateUsdPriceHandler(e);\n                            setClickedInputs(true);\n                          }\n                        }}\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            {selectedFrom.label}\n                          </InputAdornment>\n                        }\n                        inputProps={ariaLabel}\n                        id={\"inputAmount\"}\n                        disabled={invalidEx}\n                        min=\"0\"\n                        inputMode=\"numeric\"\n                        pattern=\"\\d*\"\n                      />\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"space-between\",\n                          marginTop: \".1rem\",\n                          fontSize: \"1rem\",\n                          color: \"#505361\",\n                        }}\n                      >\n                        <input\n                          className={styles.inputDollars}\n                          onChange={(e) => {\n                            if (\n                              e.target.value.length < 11 &&\n                              /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                e.target.value\n                              ) &&\n                              Number(e.target.value) >= 0\n                            ) {\n                              calculateCryptoPriceHandler(e);\n                              setClickedInputs(true);\n                            }\n                          }}\n                          min=\"0\"\n                          inputMode=\"numeric\"\n                          pattern=\"\\d*\"\n                          type={\"number\"}\n                          placeholder={`Amount ${userCurrencyState.split(\" \")[1]\n                            }`}\n                          disabled={invalidEx}\n                          style={\n                            invalidEx ? { opacity: \"0.5\" } : null\n                          }\n                          value={blockPrice}\n                        />\n                        <span>{userCurrencyState.split(\" \")[0]}</span>\n                      </div>\n                    </div>\n                  }\n                />\n                <div className=\"max-button\">\n                  <Popup\n                    content={helpMax1(selectedFrom?.value)}\n                    position=\"bottom center\"\n                    trigger={\n                      <Button\n                        secondary\n                        className={\"btn\"}\n                        onClick={setAssetMax}\n                        floated=\"right\"\n                        size=\"mini\"\n                      >\n                        MAX\n                      </Button>\n                    }\n                  />\n                </div>\n              </div>\n              {(selectedFromAmount && amountError) ?\n                <span className=\"c-danger\">{amountError}</span> : null\n              }\n            </label><br />\n            <label>\n              <span>Destination Address:</span>\n              <TextField\n                InputProps={{ disableUnderline: true, className: 'custom-input-bg' }}\n                value={toAddress}\n                onChange={(e) => { setToAddress(e.target.value) }}\n                className={styles.input}\n                id=\"destination-input\"\n                variant=\"filled\"\n                style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n              />\n              {toAddress && !isValidAddress &&\n                <span className=\"c-danger\">Invalid {selectedFrom?.value} address</span>\n              }\n            </label><br /><br />\n            <Button\n              primary\n              type=\"submit\"\n              className=\"btn-primary withdraw\"\n              onClick={(e) => onClickWithdraw(e)}\n              floated=\"left\"\n              disabled={canWithdraw ? '' : 'disabled'}\n            >\n              Withdraw\n            </Button>\n          </form>\n        }\n      </div>\n    </>\n  );\n}\n\nexport default WithdrawForm\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/types.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/types.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchHistory.js",["450","451"],"import Meta1 from \"meta1-vision-dex\";\nimport { operationType, opText } from \"../helpers/utility\";\nimport { getHistoryData } from \"../API/API\";\n\nasync function getHistory(event) {\n  const numberOfRecords = event?.queryKey[0] === \"history\" ? 10000 : 3;\n  const pageNo = event?.queryKey[1] || 1;\n  const perPage = event?.queryKey[2] || 20;\n  let searchFilterValues = event?.queryKey[3] || '';\n  if(event?.queryKey[3] === 0) {\n    searchFilterValues = event?.queryKey[3];\n  } else if(event?.queryKey[3] === 'no found') {\n    return [];\n  }\n  const response = await getHistoryData(localStorage.getItem(\"login\"), (pageNo-1)*perPage, perPage, searchFilterValues);\n  const historyData = response.data.splice(0,numberOfRecords).map(async (value) => {\n    let timestamp;\n    let witness;\n    const op = operationType(value.operation_type);\n    const op_type = op[0];\n    const op_color = op[1];\n    const time = new Date(value.block_data.block_time);\n    timestamp = time.toLocaleString();\n    witness = value.witness;\n    const parsed_op = value.operation_history.op_object;\n    const operation = {\n      operation_id: value.account_history.operation_id,\n      block_num: value.block_data.block_num,\n      operation_id_num: value.operation_id_num,\n      time: timestamp,\n      witness: witness,\n      op_type: value.operation_type,\n      op_color: op_color,\n      count: response.count\n\n    };\n    const {op_text, symbol, amount} = await opText(value.operation_type, parsed_op);\n    operation.operation_text = op_text;\n    operation.symbol = symbol;\n    operation.amount = amount;\n    return operation;\n  });\n  const res = await Promise.all(historyData).then((values) => {\n    return values;\n  });\n  return res;\n}\n\nexport default getHistory;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/commonFunction.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js",["452","453","454","455","456"],"import jsPDF from 'jspdf'\nimport QRCode from 'qrcode'\n\nimport image from './img.png'\n\nconst isLocked = () => true\n\nconst _createPaperWalletAsPDF = function (\n    ownerkeys,\n    activeKeys,\n    memoKey,\n    accountName\n) {\n    const width = 1050,\n        height = 1150, //mm\n        lineMargin = 5,\n        qrSize = 50,\n        textMarginLeft = qrSize + 7,\n        qrMargin = 5,\n        qrRightPos = width - qrSize - qrMargin,\n        textWidth = width - qrSize * 2 - qrMargin * 2 - 3,\n        textHeight = 8,\n        logoWidth = (width * 3) / 4,\n        logoHeight = logoWidth / 2.8, //  logo original width/height=2.8\n        logoPositionX = (width - logoWidth) / 2;\n    let rowHeight = 110;\n    const keys = [activeKeys, ownerkeys, memoKey]\n    const keysName = ['Active Key', 'Owner Key', 'Memo Key']\n\n    let locked = isLocked()\n\n    const pdf = new jsPDF({\n        orientation: 'portrait',\n        format: [width, height],\n        compressPdf: true\n    })\n\n    const checkPageH = (pdfInstance, currentPageH, maxPageH) => {\n        if (currentPageH >= maxPageH) {\n            pdfInstance.addPage()\n            rowHeight = 10\n        }\n        return pdf.internal.getNumberOfPages()\n    }\n\n    const keyRow = (privateKey) => {\n        let currentPage = checkPageH(pdf, rowHeight, 400)\n        gQrcode(privateKey.toPublicKey().toPublicKeyString(), qrMargin, rowHeight + 10, currentPage)\n        if (locked && !!privateKey) {\n            gQrcode(privateKey.toWif(), 315, rowHeight + 10, currentPage)\n        }\n        pdf.text('PublicKey', textMarginLeft, rowHeight + 20)\n        pdf.text(privateKey.toPublicKey().toPublicKeyString(), textMarginLeft, rowHeight + 30)\n        pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n        pdf.rect(textMarginLeft - 1, rowHeight + 24, 258, textHeight)\n        if (locked) {\n            pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n            if (!!privateKey) {\n                pdf.text(privateKey.toWif(), textMarginLeft, rowHeight + 50)\n            } else {\n                pdf.text('Not found.', textMarginLeft, rowHeight + 50)\n            }\n            pdf.rect(textMarginLeft - 1, rowHeight + 44, 258, textHeight)\n        }\n        rowHeight += 50\n    }\n\n    const gQrcode = (qrcode, rowWidth, rowHeight, currentPage) => {\n        QRCode.toDataURL(qrcode)\n            .then((url) => {\n                pdf.setPage(currentPage)\n                pdf.addImage(url, 'JPEG', rowWidth, rowHeight, qrSize, qrSize)\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n    }\n\n    let img = new Image()\n    img.src = image\n    pdf.addImage(img, 'PNG', 115, 30, 150, 50, '', 'MEDIUM')\n    pdf.text('Account:', 18, rowHeight - 10)\n    pdf.text(accountName, 42, rowHeight - 10)\n\n    let content = keys.map((privateKeys, index) => {\n        if (index >= 1) {\n            rowHeight += 25 // add margin-top for block\n        }\n        checkPageH(pdf, rowHeight, 400)\n        pdf.text('Public', 22, rowHeight + 7)\n        pdf.text(keysName[index], 170, rowHeight + 7)\n        if (locked) {\n            pdf.text('Private', 327, rowHeight + 7)\n        }\n        pdf.line(lineMargin, rowHeight + 1, 365, rowHeight + 1)\n        pdf.line(lineMargin, rowHeight + 9, 365, rowHeight + 9)\n        keyRow(privateKeys)\n    })\n\n    Promise.all(content).then(() => {\n        pdf.save(\n            'meta' +\n                '-paper-wallet-' +\n                (locked ? 'public-' : 'private-') +\n                accountName +\n                '.pdf'\n        )\n    })\n}\n\nconst createPaperWalletAsPDF = function (\n    account,\n    owner_private,\n    active_private,\n    memo_private,\n) {\n    _createPaperWalletAsPDF(owner_private, active_private, memo_private, account)\n}\n\nexport { createPaperWalletAsPDF }\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/useDebounce.js",["457"],"import { useState, useEffect } from 'react'\n\nexport default function useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                setDebouncedValue(value)\n            }, delay)\n\n            return () => {\n                clearTimeout(handler)\n            }\n        },\n        [value]\n    )\n\n    return debouncedValue\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx",["458","459","460","461","462","463","464","465","466","467","468","469","470","471"],"import React, { useState, useEffect } from \"react\";\nimport { Modal, Input, Button } from \"semantic-ui-react\";\nimport \"./login.css\";\nimport styles from \"./login.module.scss\";\nimport RightSideHelpMenuFirstType from \"../RightSideHelpMenuFirstType/RightSideHelpMenuFirstType\";\nimport { removeAccessToken, removeLoginDetail, setLocation } from \"../../utils/localstorage\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { checkAccountSignatureRequest, checkAccountSignatureReset, checkTransferableModelAction, logoutRequest } from \"../../store/account/actions\";\nimport { accountsSelector, isLoginSelector, isSignatureValidSelector, loginErrorMsgSelector, oldUserSelector, signatureErrorSelector } from \"../../store/account/selector\";\nimport { checkPasswordObjSelector } from \"../../store/meta1/selector\";\nimport { validateSignature } from \"../../API/API\";\n\nexport default function LoginScreen(props) {\n  const {\n    error,\n    loginDataError,\n    onSubmit,\n    onSignUpClick,\n    portfolio,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    setLoginDataError\n  } = props;\n  const [login, setLogin] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [openModal, setOpenModal] = useState(false);\n  const [openVideoModal, setOpenVideoModal] = useState(false);\n  const [errorAttr, setErrorAttr] = useState({\n    login: false,\n    password: false\n  });\n  const [checkTransfer, setCheckTransfer] = useState({\n    password: '',\n    showPasswordColumn: false,\n    errorMsg: '',\n    error: false\n  });\n  const accountState = useSelector(accountsSelector);\n  const isLoginState = useSelector(isLoginSelector);\n  const oldUserState = useSelector(oldUserSelector);\n  const signatureErrorState = useSelector(signatureErrorSelector);\n  const isSignatureValidState = useSelector(isSignatureValidSelector);\n  const loginErrorMsgState = useSelector(loginErrorMsgSelector);\n  const dispatch = useDispatch();\n\n  useEffect(()=>{\n    if (signatureErrorState) {\n      checkTransferStateHandler('error', true);\n      checkTransferStateHandler('errorMsg', \"Invalid Signature \");\n      dispatch(checkAccountSignatureReset());\n    }\n    if (isSignatureValidState) {\n      dispatch(checkTransferableModelAction(true));\n      checkTransferStateHandler('reset');\n    }\n  },[signatureErrorState, isSignatureValidState])\n\n  const handleSignUpClick = (e) => {\n    e.preventDefault();\n    onSignUpClick();\n  };\n  const validationHandler = () => {\n    let isValid = true;\n    const data = { login: false, password: false };\n    if (login.trim().length === 0 && password.length === 0) {\n      data.login = true;\n      data.password = true;\n      isValid = false;\n    } else {\n      if (login.trim().length === 0) {\n        data.login = true;\n        isValid = false;\n      }\n      if (password.length === 0) {\n        data.password = true;\n        isValid = false;\n      }\n    }\n    setErrorAttr(prev => {\n      return { ...prev, ...data };\n    })\n    return isValid;\n  }\n  const checkTransferStateHandler = (attr, value) => {\n    if(attr === 'reset') {\n      setCheckTransfer({\n        password: '',\n        showPasswordColumn: false,\n        errorMsg: '',\n        error: false\n      });\n      return;\n    }\n    setCheckTransfer(prev => {\n      return { ...prev, [attr]:value }\n    })\n    if(attr === 'errorMsg') {\n      setTimeout(() => {\n        setCheckTransfer(prev => {\n          return { ...prev, errorMsg: '', error: false }\n        })\n      },3000)\n    }\n  }\n  const checkTransferSubmitHandler = async () => {\n    if(!checkTransfer.password.trim()){\n      checkTransferStateHandler('error',true);\n      checkTransferStateHandler('errorMsg',\"Passkey can't be empty\");\n      return;\n    }\n    dispatch(checkAccountSignatureRequest({ login: accountState, password: checkTransfer.password }));\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!validationHandler()) {\n      setLoginDataError(false);\n      return;\n    }\n    if (login.length !== 0 && password.length !== 0) {\n      onSubmit(login, true, password);\n    }\n  };\n\n  return (\n    <div className={styles.body}>\n      <header className={styles.header}>\n        <div className={styles.headerM}>\n          <span>META Lite Wallet</span>\n        </div>\n      </header>\n      <div className={styles.mainBlockContent}>\n        <div className={styles.leftBlockContent}>\n          <div className={styles.createMeta}>\n            <h5>\n              <strong>\n                This section provides access to your META Lite Wallet.\n              </strong>\n            </h5>\n            <span>\n              If you have not yet created a META wallet, please click the Get\n              Started button to on the right hand side of the screen. Then click\n              the 'Create META Wallet' button below to create your wallet\n            </span>\n            <br />\n            <button\n              onClick={handleSignUpClick}\n              style={{ marginTop: \"1rem\" }}\n              className={styles.Button}\n            >\n              Create {portfolio != null ? \"new\" : null} META Wallet\n            </button>\n          </div>\n\n          {portfolio === null ? (\n            <div className={styles.linkMeta}>\n              <span>\n                For those already having a META Wallet, to enable functionality,\n                you must 'link' your wallet by typing in your wallet 'Wallet\n                Name' in the box below and clicking the 'Link META Wallet'\n                button.\n              </span>\n              <form className={styles.FormLink}>\n                <input\n                  className={styles.input}\n                  onChange={(e) => {\n                    e.preventDefault();\n                    if (e.target.value.trim()) {\n                      setErrorAttr(prev => {\n                        return { ...prev, login: false };\n                      })\n                    }\n                    setLogin(e.target.value);\n                  }}\n                  placeholder={\"Wallet Name\"}\n                  value={login}\n                  type=\"text\"\n                />\n                <input\n                  className={styles.input}\n                  onChange={(e) => {\n                    e.preventDefault();\n                    if (e.target.value.trim()) {\n                      setErrorAttr(prev => {\n                        return { ...prev, password: false };\n                      })\n                    }\n                    setPassword(e.target.value);\n                  }}\n                  placeholder={\"Passkey\"}\n                  value={password}\n                  type=\"password\"\n                />\n                <p\n                  className={styles.ErrorP}\n                  style={error ? null : { display: \"none\" }}\n                >\n                  Invalid Account Name\n                </p>\n                <p\n                  className={styles.ErrorP}\n                  style={loginDataError ? null : { display: \"none\" }}\n                >\n                  {loginErrorMsgState}\n                </p>\n                {errorAttr.login && errorAttr.password ?\n                  <p className={styles.ErrorP}>Wallet Name and Passkey can't be empty</p> :\n                  errorAttr.login ? <p className={styles.ErrorP}>Wallet Name can't be empty</p> :\n                    errorAttr.password ? <p className={styles.ErrorP}>Passkey can't be empty</p>\n                      : null\n                }\n                <button\n                  className={styles.Button}\n                  style={{ fontSize: \"100%\", marginTop: \"0\" }}\n                  onClick={handleSubmit}\n                  type={\"submit\"}\n                >\n                  Link META Wallet\n                </button>\n              </form>\n            </div>\n          ) : (\n            <div className={styles.linkMeta}>\n              <h5>\n                <strong>To unlink your wallet, click here</strong>\n              </h5>\n              <br />\n              <button\n                className={styles.Button}\n                onClick={() => {\n                  dispatch(logoutRequest());\n                }}\n                type={\"button\"}\n                style={{ marginTop: \"0\" }}\n              >\n                Unlink META Wallet\n              </button>\n            </div>\n          )}\n\n          {isLoginState && oldUserState && <div className={styles.linkMeta}>\n              <h5>\n                <strong>To Claim Meta1 Wallet, click here</strong>\n              </h5>\n              <br />\n              <button\n                className={`${styles.Button} ${styles.checkTransferButtonDisplay}`}\n                onClick={() => checkTransferStateHandler('showPasswordColumn', true) }\n                type={\"button\"}\n                style={{ marginTop: \"0\" }}\n              >\n                Claim Meta1 Wallet\n              </button>\n              {checkTransfer.showPasswordColumn && <>\n                <input\n                  className={styles.input}\n                  onChange={(e) => {\n                    checkTransferStateHandler(e.target.name, e.target.value);\n                  }}\n                  name=\"password\"\n                  placeholder={\"Passkey\"}\n                  value={checkTransfer.password}\n                  type=\"password\"\n                />\n                <button\n                  className={`${styles.Button} ${styles.checkTransferPassword}`}\n                  onClick={() => checkTransferSubmitHandler() }\n                  type={\"button\"}\n                  style={{ marginTop: \"0\" }}\n                >\n                  Submit\n                </button>\n              </>\n              }\n              <span\n                  className={styles.checkTransferError}\n                  style={checkTransfer.error ? null : { display: \"none\" }}\n                >\n                 {checkTransfer.errorMsg}\n              </span>\n            </div>}\n        </div>\n        <div className={styles.rightBlockContent}>\n          <RightSideHelpMenuFirstType\n            onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n            onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            portfolio={portfolio}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst ModalWalletInstructions = ({ setOpenModal, openModal }) => {\n  return (\n    <Modal\n      style={{ padding: 20 }}\n      open={openModal}\n      onClose={() => setOpenModal(false)}\n    >\n      <h3>META Wallet Creation</h3>\n      <p>\n        The META 1 Coin Digital Wallet can be created and accessed from your\n        meta1.vision Dashboard account OR on meta-exchange.io.\n      </p>\n      <br />\n      <h3>GET STARTED: Create a META Lite Wallet on meta1.vision Dashboard</h3>\n      <p>\n        1. Click the White ‘Create META Wallet’ button to start the process.\n        <br />\n        2. Fill in your information. Some fields may already be auto-filled.\n        Make sure the fields are filled in properly. You may need to clear the\n        fields and re-enter correctly.\n        <br />\n        3. Account Box – Create your wallet name <br />\n        Note: the ‘Wallet Account Name’ you choose is visible on the\n        meta-exchange.io platform. For optimum security, avoid using your name\n        or personal information as a part of your META Wallet Account name (do\n        not use an email address or your personal name. Your META Wallet Account\n        Name must contain from 4 to 63 characters and must consist of a\n        combination of lowercase Latin letters, dashes, or numbers. (No capital\n        letters, blank spaces, @, +, !, nor any other non- number/letter\n        characters except a dash)\n        <br />\n        4. Copy the Generated Passkey / Passphrase (52 characters) Do NOT\n        create your own passkey. You must use the auto generated passkey and\n        properly paste it into the confirm passkey field; You can click the\n        small clipboard under the ‘generated’ passkey field (lower right side).\n        Be sure to properly record and secure both the passkey ‘KEY’ and\n        account name in a safe location.\n        <br />\n        5. PASTE passkey phrase into the confirmation box below.\n        <br />\n        6. Click Submit\n        <br />\n        7. Confirm and check off ALL 4 Boxes to acknowledge you understand about\n        ‘SAVING the Key in a safe place\n        <br />\n        8. Click Submit\n        <br />\n        9. Your wallet will now be created, and it will say it is ‘LINKED’ at\n        the top of the page.\n      </p>\n      <br /> <br />\n      <p>\n        Once you have set up your wallet correctly, and if you have Ready to\n        Claim certificates under the ‘Coin Certificate Tab’ they will change to\n        Receive and Accept.\n      </p>\n      <h3>LOADING META 1 COINS INTO YOUR WALLET</h3>\n      <p>\n        When you are ready to receive your coins, click on the Receive and\n        Accept button and confirm you want to accept them into your wallet. Look\n        on the META Lite wallet tab to see the newly loaded coins.\n      </p>\n      <br /> <br />\n      <p>\n        The META Lite Wallet has the basic essential functionality of the META\n        Wallet (accessible on meta-exchange.io). The two versions access the\n        same account data on the META Blockchain. Nothing is compromised\n        including speed and transactional integrity. Many Coin holders will find\n        it easier to work from the meta1.vision Dashboard. But keep in mind that\n        META Exchange is a powerful leading edge tool with many features and\n        advanced functionality.\n      </p>\n      <p>\n        Your META Wallet can be used for several crypto currencies (select “Show\n        All balances” in the META Lite Wallet section for a complete list).{\" \"}\n        <br />\n        CREATE MULTIPLE WALLETS - You can create more than one META Wallet.{\" \"}\n        <br />\n        First ‘unlink’ your active META Wallet before creating a new one. <br />\n        - Click the word ‘here’ in the phrase, “To unlink your wallet, click\n        here”, to unlink your wallet. <br />\n        Click the ‘Create META Wallet’ button to create an additional wallet.{\" \"}\n        <br />\n        You can switch from one wallet to another by using the ‘unlink’ feature\n        and then entering your additional wallet name and clicking the ‘Link\n        META Wallet’ button. <br />\n        And as a general security measure, always double check that you are on\n        an official META 1 website. <br />\n        And as a general security measure, always double check that you are on\n        an official META 1 website. <br />\n      </p>\n    </Modal>\n  );\n};\n\nconst VideoModal = ({ openVideoModal, setOpenVideoModal }) => {\n  return (\n    <Modal\n      open={openVideoModal}\n      onClose={() => setOpenVideoModal(false)}\n      className={styles.modalDiv}\n      style={{ maxWidth: \"90%\" }}\n    >\n      <iframe\n        title=\"vimeo-player\"\n        src=\"https://player.vimeo.com/video/693848928?h=31b02d1eee\"\n        width=\"640\"\n        height=\"360\"\n        frameborder=\"0\"\n        allowfullscreen\n        style={{ width: \"100%\" }}\n      ></iframe>\n    </Modal>\n  );\n};\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js",["472","473","474"],"import * as React from \"react\";\nimport styles from \"./LeftPanelAdapt.module.scss\";\nimport \"./LeftPanelAdapt.css\";\nimport user from \"../../images/default-pic1.png\";\nimport { profileImageSelector } from \"../../store/account/selector\";\nimport { useSelector } from \"react-redux\";\n\nconst LeftPanelAdapt = (props) => {\n  const profileImageState =  useSelector(profileImageSelector);\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    onClickOpenOrderHandler,\n    portfolio,\n    name\n  } = props;\n\n  return (\n    <ul className={styles.mainBlockAdapt + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              id=\"leftAvatarAdapt\"\n              src={profileImageState}\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i\n              style={{ margin: \".55rem .5rem\" }}\n              className=\"fas fa-home-lg-alt\"\n            />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <li className={styles.Li + \" nav-item dropdown\"}>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          id=\"navbarDropdown\"\n          role=\"button\"\n          data-bs-toggle=\"dropdown\"\n          aria-expanded=\"false\"\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div className={styles.textSpan + \" event\"}>\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n        <ul\n          className={\"event dropdown-menu needToBeYellow\"}\n          aria-labelledby=\"navbarDropdown\"\n        >\n          <h1\n            style={{\n              fontSize: \"1.5rem\",\n              fontWeight: \"300\",\n              color: \"#d59900\",\n              textAlign: \"center\",\n            }}\n          >\n            Portfolio\n          </h1>\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPortfolioHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Show All Balance\n          </li>\n          <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickOpenOrderHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Open Orders\n          </li>\n          {/* <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPaperWalletHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Paper Wallet\n          </li> */}\n        </ul>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickExchangeHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fad fa-exchange\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickHistoryHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickSettingsHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={() => {\n          localStorage.removeItem(\"login\");\n          sessionStorage.setItem(\"location\", \"wallet\");\n          window.location.reload();\n        }}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .62rem\" }} className=\"fa fa-sign-out\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Log Out</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanelAdapt;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js",["475"],"import * as React from \"react\";\nimport styles from \"./RightSideHelpMenuThirdType.module.scss\";\n\nconst RightSideHelpMenuSecondType = (props) => {\n  const { onClickExchangeEOSHandler, onClickExchangeUSDTHandler, portfolio } =\n    props;\n\n  const DateOfStartEOS = 1645998629;\n  const DateOfStartUSDT = 1646085029;\n\n  const calculateDate = (date) => {\n    return Math.floor((new Date() / 1000 - date) / 86400);\n  };\n\n  return (\n    <>\n      <div className={styles.newCrypto}>\n        <h5 style={{ fontWeight: \"bold\", fontSize: \"1rem\" }}>\n          New Crypto on META1\n        </h5>\n        <hr />\n        <div className={styles.newCryptoBlock}>\n          <div className={styles.crypto} onClick={onClickExchangeUSDTHandler}>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/Tether-USDT-icon.png\"\n                alt=\"usdt\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>USDT</h6>\n                <span>Added {calculateDate(DateOfStartUSDT)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n          <hr />\n          <div className={styles.crypto} onClick={onClickExchangeEOSHandler}>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/EOS-icon.png\"\n                alt=\"EOS\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>EOS</h6>\n                <span>Added {calculateDate(DateOfStartEOS)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RightSideHelpMenuSecondType;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js",["476","477","478","479","480"],"import React, { useEffect, useState } from \"react\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport axios from \"axios\";\nimport { getUserKycProfile, getESigToken } from \"../../API/API\";\n\nimport {\n  Button,\n  Message,\n  Checkbox,\n  Form,\n  Popup,\n  Grid,\n} from \"semantic-ui-react\";\n\nexport default function SubmitForm(props) {\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const [access, setAccess] = useState(true);\n  const [recover, setRecover] = useState(true);\n  const [stored, setStored] = useState(true);\n  const [living, setLiving] = useState(true);\n  const [signed, setSigned] = useState(props.signatureResult === 'success' ? true : false);\n  const [paid, setPaid] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const isAllChecked = access && recover && stored && living && signed;\n\n  useEffect(async () => {\n    const response = await getUserKycProfile(props.email);\n    if (response && response.status.isPaid === 1 && response.status.isSign === 1) {\n      setSigned(true);\n      setPaid(true);\n    }\n  }, [])\n\n  const handleSign = async (e) => {\n    if (!signed) {\n      const { email, phone, firstName, lastName, accountName, password } = props;\n\n      try {\n        const response = await getUserKycProfile(email);\n        if (response && response.status.isPaid === 1 && response.status.isSign === 1) {\n          alert('You already signed E-Signature');\n          setSigned(true);\n          return;\n        }\n      } catch (err) {\n        console.log('Error in getting user esignautre profile');\n        return;\n      }\n\n      try {\n        const token = await getESigToken(email);\n        if (token) {\n          localStorage.setItem('login', accountName);\n          localStorage.setItem('password', password);\n          localStorage.setItem('firstname', firstName);\n          localStorage.setItem('lastname', lastName);\n          localStorage.setItem('phone', phone);\n          localStorage.setItem('email', email);\n\n          window.location.href = `${process.env.REACT_APP_ESIGNATURE_URL\n            }/e-sign?email=${encodeURIComponent(\n              email\n            )}&firstName=${firstName}&lastName=${lastName}&phoneNumber=${phone}&token=${token}&redirectUrl=${window.location.origin\n            }`;\n        } else {\n          return;\n        }\n      } catch (err) {\n        console.log('Error in e-sign token generation');\n        return;\n      }\n    }\n  }\n\n  return (\n    <>\n      {signed && <div className=\"membership_head\">\n        <p style={{ fontSize: '30px', fontWeight: 600 }}>\n          Pay $1 Lifetime Membership Fee\n        </p>\n        <p style={{ fontSize: '16px', color: '#607383', paddingLeft: '30px', paddingRight: '30px' }}>\n          META Association Lifetime membership is required to be a META 1 Member, this fee is paid once and provides lifetime membership\n        </p>\n        <div className=\"divider\" />\n        <p style={{ fontSize: '20px', color: '#00AD6A' }}>\n          Successfully paid $1 by Credit Card\n        </p>\n      </div>\n      }\n      <Grid>\n        <Grid.Column style={{ marginTop: \"1rem\" }} width={16}>\n          <Form>\n            <Form.Field>\n              <label>Passkey</label>\n              <div className=\"ui action input\">\n                <input value={props.password} type=\"text\" disabled className=\"dark-wallet-key\" />\n                <Popup\n                  content=\"Copy to Clipboard.\"\n                  trigger={\n                    <div>\n                      <CopyToClipboard text={props.password} onCopy={() => { }}>\n                        <button\n                          name=\"copyToken\"\n                          style={{ color: \"#240000\" }}\n                          class=\"ui yellow right icon button\"\n                        >\n                          <i class=\"copy icon\" />\n                        </button>\n                      </CopyToClipboard>\n                      <span className=\"copy_text copy_text_passkey\">Copy</span>\n                    </div>\n                  }\n                />\n              </div>\n            </Form.Field>\n\n            <Message\n              className={\"messageRed\"}\n              icon=\"attention\"\n              header=\"Important information\"\n              content=\"If you forget your passkey phrase you will be unable to access your account and your funds. We cannot reset or restore your passkey! Memorize or write down your username and passkey!\"\n            />\n\n            <Form.Field>\n              <Checkbox\n                onChange={(e) => setAccess(!access)}\n                checked={access}\n                label=\"I understand that I will lose access to my funds if I lose my passkey\"\n              />\n            </Form.Field>\n\n            <Form.Field>\n              <Checkbox\n                onChange={(e) => setRecover(!recover)}\n                checked={recover}\n                label=\"I understand that no one can recover my passkey if I lose or forget it\"\n              />\n            </Form.Field>\n\n            <Form.Field>\n              <Checkbox\n                onChange={(e) => setStored(!stored)}\n                checked={stored}\n                label=\"I have written down or otherwise stored my passkey\"\n              />\n            </Form.Field>\n\n            <Form.Field>\n              <Checkbox\n                onChange={(e) => setLiving(!living)}\n                checked={living}\n                label=\" I am a living man or woman hence a living being\"\n              />\n            </Form.Field>\n\n            <Form.Field>\n              <Checkbox\n                onChange={(e) => handleSign(e)}\n                checked={signed}\n                label=\" Sign META Association Membership Agreement\"\n              />\n            </Form.Field>\n\n            {isSubmitted && <MetaLoader size={\"small\"} />}\n            {!isSubmitted && (\n              <Button\n                className=\"sbBtn\"\n                onClick={() => {\n                  setIsSubmitted(true);\n                  props.onSubmit();\n                }}\n                disabled={!isAllChecked}\n                type=\"submit\"\n              >\n                Submit\n              </Button>\n            )}\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js",["481","482","483","484"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { key, ChainValidation } from \"meta1-vision-js\";\nimport AccountApi from \"../../lib/AccountApi\";\nimport \"./SignUpForm.css\";\nimport 'react-phone-number-input/style.css';\nimport PhoneInput from 'react-phone-number-input';\nimport { Button, Form, Grid, Input, Popup } from \"semantic-ui-react\";\n\nconst useDebounce = (value, timeout) => {\n  const [state, setState] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => setState(value), timeout);\n\n    return () => clearTimeout(handler);\n  }, [value, timeout]);\n\n  return state;\n};\n\nconst UserInformationForm = (props) => {\n  const [generatedPassword, setGeneratedPassword] = useState(\"\");\n  useEffect(() => {\n    if (generatedPassword === \"\") {\n      setGeneratedPassword(`P${key.get_random_key().toWif().toString()}`);\n    }\n  }, [generatedPassword]);\n\n  const [accountName, setAccountName] = useState(props.accountName || \"\");\n  const debouncedAccountName = useDebounce(accountName, 100);\n  const [accountNameErrors, setAccountNameErrors] = useState(null);\n  const [firstName, setFirstName] = useState(props.firstName || \"\");\n  const [lastName, setLastName] = useState(props.lastName || \"\");\n  const [phone, setPhone] = useState(props.phone || \"\");\n  const [searchAccount, setSearchAccount] = useState([[\"PM\", \"\"]]);\n  const [touchedAccountName, setTouchedAccountName] = useState(false);\n  const [phoneError, setPhoneError] = useState(null);\n  const [firstNameError, setFirstNameError] = useState(null);\n  const [lastNameError, setLastNameError] = useState(null);\n  useEffect(() => {\n    if (accountName) {\n      AccountApi.lookupAccounts(accountName, 1)\n        .then((res) => setSearchAccount(res))\n        .catch((err) => console.log(err));\n    }\n  }, [accountName]);\n  const hasNumber = (myString) => {\n    return /\\d/.test(myString);\n  }\n  const isVowelsNotExistAndHasNumber = (str) => {\n    if (hasNumber(str)) {\n      if (str.includes(\"-\")) {\n        return true;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n  useEffect(() => {\n    const error = ChainValidation.is_account_name_error(debouncedAccountName);\n    const error1 = isVowelsNotExistAndHasNumber(debouncedAccountName);\n    if (error) {\n      if (!error1) {\n        setAccountNameErrors({\n          content:\n            \"Please enter a wallet nickname (not your personal name) containing at least one dash, a number\",\n          pointing: \"below\",\n        });\n      } else {\n        setAccountNameErrors({\n          content: error,\n          pointing: \"below\",\n        });\n      }\n    } else if (!error1) {\n      setAccountNameErrors({\n        content:\n          \"Please enter a wallet nickname (not your personal name) containing at least one dash, a number\",\n        pointing: \"below\",\n      });\n    } else {\n      setAccountNameErrors(null);\n    }\n  }, [debouncedAccountName]);\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (isSubmitted) {\n      props.onSubmit(\n        accountName,\n        generatedPassword,\n        phone,\n        lastName,\n        firstName\n      );\n    }\n    return () => setIsSubmitted(false);\n  }, [\n    firstName,\n    isSubmitted,\n    accountName,\n    generatedPassword,\n    props,\n    lastName,\n    phone,\n  ]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n  return (\n    <>\n      <h2 className=\"head-title\">Create META Wallet</h2>\n      <Grid>\n        <Grid.Column width={16} className=\"singup-grid\">\n          <Form autoComplete=\"off\" onSubmit={setIsSubmitted}>\n            <div className=\"field\">\n              <Grid stackable>\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>First Name</label>\n                    <input\n                      value={firstName}\n                      onChange={(event) => {\n                        setFirstName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setFirstNameError(\n                            \"Your First Name must not contain special characters\"\n                          );\n                        } else {\n                          setFirstNameError(null);\n                        }\n                      }}\n                      placeholder=\"First Name\"\n                      required\n                    />\n                    {firstNameError && (\n                      <p style={{ color: \"red\" }}> {firstNameError}</p>\n                    )}\n                  </Form.Field>                  \n                  <Form.Field>\n                    <label>Phone Number</label>\n                    <PhoneInput\n                      placeholder=\"Enter phone number\"\n                      value={phone}\n                      defaultCountry=\"US\"\n                      maxlength=\"15\"\n                      required\n                      onChange={setPhone} />\n                    {phone === undefined && (\n                      <p style={{ color: \"red\" }}>Phone number can't be empty</p>\n                    )}\n                  </Form.Field>\n                </Grid.Column>\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>Last Name</label>\n                    <input\n                      value={lastName}\n                      onChange={(event) => {\n                        setLastName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setLastNameError(\n                            \"Your Last Name must not contain special characters\"\n                          );\n                        } else {\n                          setLastNameError(null);\n                        }\n                      }}\n                      placeholder=\"Last Name\"\n                      required\n                    />\n                    {lastNameError && (\n                      <p style={{ color: \"red\" }}> {lastNameError}</p>\n                    )}\n                  </Form.Field>                  \n                </Grid.Column>\n              </Grid>\n            </div>\n\n            <Form.Field>\n              <label>Wallet Name</label>\n              <input\n                control={Input}\n                value={accountName}\n                type=\"text\"\n                error={accountNameErrors}\n                placeholder=\"Wallet Name\"\n                onChange={({ target }) => {\n                  setAccountName(target.value.toLocaleLowerCase());\n                  setTouchedAccountName(true);\n                }}\n              />\n              {accountName && accountNameErrors?.content && touchedAccountName ? (\n                <p style={{ color: \"red\" }}> {accountNameErrors?.content}</p>\n              ) : null}\n            </Form.Field>\n            <Form.Field>\n              <Button\n                className=\"yellow\"\n                style={{ color: \"#240000\", marginTop:'1em' }}\n                type=\"submit\"\n                disabled={\n                  firstName === \"\" ||\n                  lastName === \"\" ||\n                  phone === \"\" ||\n                  phone === undefined ||\n                  accountNameErrors ||\n                  (searchAccount.length > 0 ? searchAccount[0][0] === accountName : false) ||\n                  phoneError ||\n                  firstNameError ||\n                  lastNameError\n                }\n              >\n                Submit\n              </Button>\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n};\n\nexport { UserInformationForm };","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/saga.js",["485"],"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { checkOldUser, deleteAvatar, getUserData, loginRequest, sendEmail, uploadAvatar, validateSignature } from '../../API/API';\nimport { setAccessToken, setLoginDetail } from '../../utils/localstorage';\nimport { checkTokenRequest, checkAccountSignatureError, checkAccountSignatureSuccess, checkTransferableError, checkTransferableSuccess, deleteAvatarSuccess, getUserError, getUserSuccess, loginError, loginSuccess, sendMailError, sendMailSuccess, uploadAvatarSuccess, passKeyErrorService, passKeySuccessService } from './actions';\nimport * as types from './types';\nimport Meta1 from \"meta1-vision-dex\";\nimport { signUpHandler } from '../../utils/common';\nfunction* loginHandler(data) {\n    try {\n        if (data?.payload?.fromSignUpFlag) {\n            const result = yield signUpHandler(data.payload.login, data.payload.password);\n            if (result && !result.status) {\n                yield put(loginError({accountName: null, token: '', msg: 'Account Creation is under process. Please try after sometime' }));\n                return;\n            }\n        }\n        const response = yield call(loginRequest,data.payload.login, data.payload.password);\n        if(!response.error){\n            setAccessToken(response.token);\n            setLoginDetail(response.accountName)\n            yield put(loginSuccess({accountName: response.accountName, token: response.token}));\n        } else {\n            yield put(loginError({accountName: null, token: '', msg: 'Wallet name or Passkey is wrong' }));\n        }\n    } catch(e){\n        data.payload.setLoginDataError(true);\n        yield put(loginError({accountName: null, token: '', msg: 'Wallet name or Passkey is wrong' }));\n    }\n}\nfunction* getUserHandler(data) {\n    const response = yield call(getUserData,data.payload);\n    if (response['tokenExpired']) {\n        yield put(getUserError({msg: response.responseMsg}));\n    } else {\n        if (response?.message?.userAvatar != null) {\n            let avatarImage = `${process.env.REACT_APP_BACK_URL}/public/${response.message.userAvatar}`;\n            yield put(getUserSuccess({user: response,avatarImage }));\n        } else {\n            yield put(getUserSuccess({user: response,avatarImage: null }));\n        }\n    }\n}\nfunction* uploadAvatarHandler(data) {\n    const response = yield call(uploadAvatar, data.payload);\n    if (response['tokenExpired']) {\n        yield put(getUserError({msg: response.responseMsg}));\n    } else {\n        let avatarImage = `${process.env.REACT_APP_BACK_URL}/public/${response.message}`;\n        yield put(uploadAvatarSuccess({avatarImage }));\n    }\n}\nfunction* deleteAvatarHandler(data) {\n    const response = yield call(deleteAvatar, data.payload);\n    if (response['tokenExpired']) {\n        yield put(getUserError({msg: response.responseMsg}));\n    } else {\n        yield put(deleteAvatarSuccess());\n    }\n}\nfunction* sendMailHandler(data) {\n    const response = yield call(sendEmail, data.payload.emailType, data.payload.emailData);\n    if (response.success === 'success') {\n        yield put(sendMailSuccess());\n    } else {\n        if (response['tokenExpired']) {\n            yield put(getUserError({msg: response.responseMsg}));\n        } else {\n            alert(\"Oops, something went wrong. Try again\");\n            yield put(sendMailError());\n        }\n    }\n}\n\nfunction* checkTransferableHandler(data) {\n    const response = yield call(checkOldUser, data.payload.login);\n    if (!response.error) {\n        if (response.found) {\n            yield put(checkTransferableSuccess({ oldUser: response.found }));\n        } else {\n            yield put(checkTransferableError());\n        }\n    } else {\n        yield put(checkTransferableError());\n    }\n}\n\nfunction* CheckAccountSignatureHandler(data) {\n    const response = yield call(validateSignature, data.payload.login, data.payload.password);\n    if (!response.error) {\n        yield put(checkAccountSignatureSuccess());\n    } else {\n        yield put(checkAccountSignatureError());\n    }\n}\n\n\nfunction* checkTokenHandler(data) {\n    const response = yield call(getUserData,data.payload);\n    if (response['tokenExpired']) {\n        yield put(getUserError({msg: response.responseMsg}));\n    }\n}\n\nfunction* passKeyHandler(data) {\n    try {\n        yield Meta1.connect(process.env.REACT_APP_MAIA);\n        const loginResult = yield Meta1.login(data.payload.login, data.payload.password);\n        if (loginResult) {\n            yield put(passKeySuccessService());\n        } else {\n            yield put(passKeyErrorService());\n        }\n    } catch (err) {\n        yield put(passKeyErrorService());\n    }\n}\n\nexport function* waitForAccount() {\n    yield takeEvery(types.LOGIN_REQUEST, loginHandler);\n    yield takeEvery(types.GET_USER_REQUEST, getUserHandler);\n    yield takeEvery(types.UPLOAD_AVATAR_REQUEST, uploadAvatarHandler);\n    yield takeEvery(types.DELETE_AVATAR_REQUEST, deleteAvatarHandler);\n    yield takeEvery(types.SEND_MAIL_REQUEST, sendMailHandler);\n    yield takeEvery(types.CHECK_TRANSFERABLE_REQUEST, checkTransferableHandler);\n    yield takeEvery(types.CHECK_ACCOUNT_SIGNATURE_REQUEST, CheckAccountSignatureHandler );\n    yield takeEvery(types.CHECK_TOKEN_REQUEST, checkTokenHandler);\n    yield takeEvery(types.PASS_KEY_REQUEST, passKeyHandler);\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/account/reducer.js",["486"],"import { getAccessToken, getLoginDetail } from '../../utils/localstorage';\nimport * as types from './types';\nimport logoNavbar from \"../../images/default-pic2.png\";\nimport logoDefault from \"../../images/default-pic1.png\";\nimport { Avatar } from '@mui/material';\nconst initialState = {\n    isLogin: false,\n    loading: false,\n    account: null,\n    token: '',\n    loginError: false,\n    msg: null,\n    user: null,\n    isTokenValid: true,\n    profileImage: logoDefault,\n    navbarProfileImage: logoNavbar,\n    sentMailSuccess: null,\n    oldUser: false,\n    checkTransferableModel: false,\n    signatureError: false,\n    isSignatureValid: false,\n    isValidPasswordKey: false,\n    passwordKeyError: false,\n    loginErrorMsg: ''\n};\nconst loginDetail = getLoginDetail();\nif(loginDetail){\n    initialState.isLogin = true;\n    initialState.account = loginDetail;\n    initialState.token = getAccessToken();\n}\n\nconst accountsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.LOGIN_REQUEST:\n            return {...state, loading: true, loginError: false, loginErrorMsg: '' };\n        case types.LOGIN_SUCCESS:\n            return {...initialState, loading: false, account: action.payload.accountName, token: action.payload.token, isLogin:true,loginError: false, msg: null };\n        case types.LOGIN_ERROR:\n            return {...state, loading: false, account: null, token: '', isLogin:false, loginError:true, loginErrorMsg: action.payload.msg  };\n        case types.LOGOUT_REQUEST:\n            return {...initialState, isLogin: false, account: null, token:'', loginErrorMsg: '' };\n        case types.GET_USER_REQUEST:\n            return {...state, loading: true, user: null, isTokenValid: true, msg: null };\n        case types.GET_USER_SUCCESS:\n            const avatarImage = action.payload.avatarImage\n            return {...state, loading: false, user: action.payload.user, profileImage:avatarImage ? avatarImage : logoDefault, navbarProfileImage: avatarImage ? avatarImage : logoNavbar };\n        case types.GET_USER_ERROR:\n            return {...state, loading: false, user: null, isTokenValid: false, msg: action.payload.msg, profileImage: logoDefault, navbarProfileImage: logoNavbar };\n        case types.UPLOAD_AVATAR_REQUEST:\n            return {...state, loading: true };\n        case types.UPLOAD_AVATAR_SUCCESS:\n            return {...state, loading: false, profileImage: action.payload.avatarImage, navbarProfileImage: action.payload.avatarImage };\n        case types.DELETE_AVATAR_REQUEST:\n            return {...state, loading: true };\n        case types.DELETE_AVATAR_SUCCESS:\n            return {...state, loading: false, profileImage: logoDefault, navbarProfileImage: logoNavbar };\n        case types.SEND_MAIL_REQUEST:\n            return {...state, loading: true, sentMailSuccess: null };\n        case types.SEND_MAIL_SUCCESS:\n                return {...state, loading: false, sentMailSuccess: true };\n        case types.SEND_MAIL_ERROR:\n            return {...state, loading: false, sentMailSuccess: false };\n        case types.SEND_MAIL_RESET:\n            return {...state, loading: false, sentMailSuccess: null };\n        case types.CHECK_TRANSFERABLE_WALLET_MODAL:\n            return { ...state, loading: false, checkTransferableModel: action.payload };\n        case types.CHECK_TRANSFERABLE_REQUEST:\n            return {...state, loading: true };\n        case types.CHECK_TRANSFERABLE_SUCCESS:\n            return {...state, loading: false, oldUser: action.payload.oldUser };\n        case types.CHECK_TRANSFERABLE_ERROR:\n            return {...state, loading: false, oldUser: false };\n        case types.CHECK_ACCOUNT_SIGNATURE_REQUEST:\n            return {...state, loading: false, signatureError: false };\n        case types.CHECK_ACCOUNT_SIGNATURE_SUCCESS:\n            return {...state, loading: false, signatureError: false, isSignatureValid: true };\n        case types.CHECK_ACCOUNT_SIGNATURE_ERROR:\n            return {...state, loading: false, signatureError: true, isSignatureValid: false };\n        case types.CHECK_ACCOUNT_SIGNATURE_RESET:\n            return {...state, loading: false, signatureError: false, isSignatureValid: false };\n        case types.CHECK_TOKEN_REQUEST:\n            return state;\n        case types.PASS_KEY_REQUEST:\n            return {...state, isValidPasswordKey: false, passwordKeyError: false };\n        case types.PASS_KEY_SUCCESS:\n            return {...state, isValidPasswordKey: true, passwordKeyError: false };\n        case types.PASS_KEY_ERROR:\n            return {...state, isValidPasswordKey: false , passwordKeyError: true};\n        case types.PASS_KEY_RESET:\n            return {...state, isValidPasswordKey: false, passwordKeyError: false };\n        default:\n            return state;\n    }\n}\nexport default accountsReducer;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/saga.js",["487","488"],"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { getCryptosChange, saveBalance, saveUserCurrency } from '../../API/API';\nimport { getUserError } from '../account/actions';\nimport { getCryptosChangeError, getCryptosChangeSuccess, meta1ConnectError, meta1ConnectSuccess, saveBalanceError, saveBalanceSuccess, saveUserCurrencyError, saveUserCurrencySuccess } from './actions';\nimport * as types from './types';\n\n\nfunction* getCryptosChangeHandler() {\n    const response = yield call(getCryptosChange);\n    if (response) {\n        yield put(getCryptosChangeSuccess({cryptoData: response}));\n    } else {\n        yield put(getCryptosChangeError())\n    }\n}\n\nfunction* saveBalanceHandler(data) {\n    const response = yield call(saveBalance, data.payload);\n    if (response.message === 'success') {\n        yield put(saveBalanceSuccess());\n    } else {\n        yield put(saveBalanceError());\n    }\n}\n\nfunction* saveUserCurrencyHandler(data) {\n    const response = yield call(saveUserCurrency, data.payload.login, data.payload.currency.split(\" \")[1]);\n     if (response.tokenExpired) {\n        yield put(getUserError(response.responseMsg));\n    } else {\n        if(response.error){\n            yield put(saveUserCurrencyError(response.responseMsg));\n        }\n        yield put(saveUserCurrencySuccess(data.payload.currency));\n    }\n}\n\nexport function* waitForMeta1() {\n    yield takeEvery(types.GET_CRYPTOS_CHANGE_REQUEST, getCryptosChangeHandler);\n    yield takeEvery(types.SAVE_USER_CURRENCY_REQUEST, saveUserCurrencyHandler);\n    yield takeEvery(types.SAVE_BALANCE_REQUEST, saveBalanceHandler);\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/store/meta1/reducer.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js",["489","490","491","492"],"import React, { useState, useEffect } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { Image } from \"semantic-ui-react\";\nimport Meta1 from \"meta1-vision-dex\";\n\nimport { useQuery } from \"react-query\";\nimport { removeExponent } from \"../../utils/commonFunction\";\nimport { userCurrencySelector } from \"../../store/meta1/selector\";\nimport { useSelector } from \"react-redux\";\n\nconst PortfolioTable = React.memo((props) => {\n  const [lists, setLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const {\n    filteredPortfolio,\n    onAssetSelect,\n    onSendClick,\n    onDepositClick,\n    onWithdrawClick,\n    assets,\n    userCurrency,\n    isCurrencySelected\n  } = props;\n  const userCurrencyState = useSelector(userCurrencySelector);\n  const { data, isLoading, error } = useQuery(\"cryptosTable\", getDatas);\n\n  async function getDatas() {\n    const cryptoArray = [\"META1\", \"ETH\", \"BTC\", \"BNB\", \"EOS\", \"XLM\", \"LTC\"];\n    let fetchedCryptos = {};\n    for (let i = 0; i < cryptoArray.length; i++) {\n      fetchedCryptos[cryptoArray[i]] = await Meta1.ticker(\n        \"USDT\",\n        cryptoArray[i]\n      );\n    }\n    fetchedCryptos[\"USDT\"] = { latest: 1, percent_change: 0 };\n    setLoading(false);\n    return fetchedCryptos;\n  }\n\n  useEffect(() => {\n    filteredPortfolio.forEach((d, i) => {\n      let precision = assets.filter((asset) => asset.symbol.includes(d.name));\n      Object.assign(filteredPortfolio[i], { pre: precision[0].precision });\n    });\n    setLists(filteredPortfolio);\n  }, [filteredPortfolio, assets, data]);\n\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    \"&:last-child td, &:last-child th\": {\n      border: 0,\n    },\n  }));\n\n  const currencyValue = (datas) => {\n    let assetValue = data[datas.name].latest;\n    if (datas.name === \"META1\") {\n      return (data[\"META1\"].latest * datas?.qty).toFixed(datas.pre);\n    } else if (assetValue * data?.qty === 0) {\n      return \"0.00\";\n    } else {\n      return (assetValue * datas?.qty).toFixed(datas.pre);\n    }\n  };\n\n  const currencyPrice = (datass) => {\n    return Number(data[datass.name].latest).toFixed(8);\n  };\n\n  const calculateCurrencyPrice = (value) => {\n    if (isCurrencySelected) {\n      if (isCurrencySelected === 'META1') {\n        return value / Number(data[\"META1\"].latest)\n      }\n      return JSON.parse(sessionStorage.getItem('currencyResult'))[isCurrencySelected] * value\n    } else {\n      return value\n    }\n  }\n\n  if (isLoading && loading) return <MetaLoader size={\"small\"} />;\n\n  return (\n    <TableContainer\n      component={Paper}\n      style={{\n        borderRadius: \"4px\",\n        boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, .11)\",\n      }}\n    >\n      <Table sx={{ minWidth: 700 }} aria-label=\"customized table\" className=\"custom_table_head\" >\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>\n              <div className=\"table_title\" style={{ width: \"6rem\", textAlign: 'center' }}>ASSET</div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"table_flex\">\n                <div className=\"table_title\">QTY</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"text-left\" style={{ width: \"6rem\" }}>\n                <div className=\"table_title\" id={\"valueTitle\"}>\n                  {`VALUE (${isCurrencySelected ? isCurrencySelected : userCurrencyState.split(\" \")[1]})`}\n                </div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"text-left\" style={{ width: \"6rem\" }}>\n                <div className=\"table_title\">24hr CHANGE</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className=\"text-left\" style={{ width: \"6rem\" }}>\n                <div className=\"table_title\" id={\"priceTitle\"}>\n                  {`PRICE (${isCurrencySelected ? isCurrencySelected : userCurrencyState.split(\" \")[1]})`}\n                </div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">TRADE</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">SEND</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">DEPOSIT</div>\n              </div>\n            </StyledTableCell>\n            <StyledTableCell>\n              <div className={\"text-left\"}>\n                <div className=\"table_title\">WITHDRAW</div>\n              </div>\n            </StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data && lists?.map((datas) => (\n            <StyledTableRow key={datas?.name}>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {\n                  <div className=\"asset-image dashboard\">\n                    <Image size=\"mini\" src={datas?.image} />\n                    <div className=\"asset-name\">{datas?.name}</div>\n                  </div>\n                }\n              </StyledTableCell>\n              <StyledTableCell align=\"center\" className={\"bodyCell\"}>\n                {datas?.qty > 0 ? (datas?.qty * 1).toFixed(datas?.pre) : \"0.00\"}\n              </StyledTableCell>\n              <StyledTableCell align=\"center\" className={\"currencyValues\"}>\n                {datas?.qty > 0 ? removeExponent(Number((datas?.qty * 1)) * Number(\n                  (\n                    calculateCurrencyPrice(currencyPrice(datas, data[datas.name]) *\n                      Number(userCurrencyState.split(\" \")[2])\n                    ))\n                )) : removeExponent(0)}\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                {\n                  <div\n                    className={\n                      Number(data[datas.name].percent_change) >= 0\n                        ? \"plus\"\n                        : \"minus\"\n                    }\n                  >\n                    {data[datas.name].percent_change >= 0\n                      ? \"+\" + data[datas.name].percent_change\n                      : data[datas.name].percent_change}\n                    %\n                  </div>\n                }\n              </StyledTableCell>\n              <StyledTableCell align=\"right\" className={\"currencyPrices\"}>\n                {removeExponent(Number(\n                  (\n                    calculateCurrencyPrice(currencyPrice(datas, data[datas.name]) *\n                      Number(userCurrencyState.split(\" \")[2]))\n                  )\n                ))}\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                <button\n                  onClick={() => {\n                    onAssetSelect(datas?.name);\n                  }}\n                  className={\"tradeButton\"}\n                >\n                  Trade\n                </button>\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                <button\n                  onClick={() => {\n                    onSendClick(datas?.name);\n                  }}\n                  className={\n                    datas.qty > 0 ? \"sendButton\" : \"sendButtonDisabled\"\n                  }\n                  disabled={datas.qty <= 0}\n                >\n                  Send\n                </button>\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                {datas.name !== \"XLM\" && datas.name !== \"BNB\" && datas.name !== \"EOS\" && datas.name !== \"META1\" && (\n                  <button\n                    onClick={() => {\n                      onDepositClick(datas.name);\n                    }}\n                    className={\"depositButton\"}\n                  >\n                    Deposit\n                  </button>\n                )}\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">\n                {(datas.name == \"ETH\" || datas.name === \"USDT\") && (\n                  <button\n                    onClick={() => {\n                      onWithdrawClick(datas.name);\n                    }}\n                    className={\"withdrawButton\"}\n                  >\n                    Withdraw\n                  </button>\n                )}\n              </StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nexport default PortfolioTable;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/config/help.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/string.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/AccountApi.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/signature.js",["493"],"import Meta1 from \"meta1-vision-dex\";\nimport { generateKeyFromPassword } from \"../lib/createAccountWithPassword\";\nconst {Login, PrivateKey, Signature} = require(\"meta1-vision-js\");\n\n\nexport async function buildSignature(accountName, password) {\n    let publicKey, signature;\n\n    // Connect & Login\n    await Meta1.connect(process.env.REACT_APP_MAIA);\n    const loginResult = await Meta1.login(accountName, password);\n\n    if (loginResult) {\n        try {\n            const signerPkey = PrivateKey.fromWif(password);\n            publicKey = signerPkey.toPublicKey().toString();\n            signature = Signature.sign(accountName, signerPkey).toHex();\n        } catch(err) {\n            const account = await Login.generateKeys(accountName, password, ['owner'], 'DEV11');\n            const ownerPrivateKey = account.privKeys.owner.toWif();\n            publicKey = account.pubKeys.owner;\n            const signerPkey = PrivateKey.fromWif(ownerPrivateKey);\n            signature = Signature.sign(accountName, signerPkey).toHex();\n        }\n    }\n\n    return { accountName, publicKey, signature };\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/utility.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/TransactionHash.jsx",["494"],"import React, { useEffect, useState } from 'react';\nimport {Apis} from 'meta1-vision-ws';\n\nconst TrxHash = ({trx}) => {\n    const [data, setData] = useState('');\n    const getBlock = async (height) => {\n        Apis.instance()\n            .db_api()\n            .exec('get_block', [height])\n            .then((result) => {\n                if (!result) {\n                    return false;\n                }\n                result.id = height; // The returned object for some reason does not include the block height..\n                setData(result.transaction_merkle_root);\n            })\n            .catch((error) => {\n                console.log('Error in BlockchainActions.getBlock: ', error);\n            });\n    }\n\n    useEffect(()=>{\n        getBlock(trx);\n    },[]);\n\treturn <div>{data}</div>;\n};\n\nexport default TrxHash;","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/useAssets.js",["495"],"import React from 'react';\nimport axios from 'axios';\nimport store from '../store';\n\nconst UseAsset = async (assetId) => {\n  const EXPLORER_URL = `${process.env.REACT_APP_EXPLORER_META1_URL}/api/v1/explorer`;\n  const state = store.getState();\n  const activeAssets = state.explorer?.assets?.active_assets;\n  if (activeAssets) {\n    const assets = activeAssets.map((item) => {\n      const { asset } = item;\n      return {\n        data: asset,\n      };\n    });\n    const filteredAssets = assets.filter(\n      (asset) => asset.data.id === assetId || asset.data.symbol === assetId,\n    );\n    if (filteredAssets.length) {\n      return Promise.resolve(filteredAssets[0]);\n    } else {\n      return await axios.get(EXPLORER_URL + '/asset?asset_id=' + assetId);\n    }\n  } else {\n    return await axios.get(EXPLORER_URL + '/asset?asset_id=' + assetId);\n  }\n};\n\nexport default UseAsset;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/UseAccount.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/helpers/Cache.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/common.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/FaceKiForm.js",["496","497","498","499","500","501","502"],"import React, { useState, useRef } from \"react\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport Webcam from 'react-webcam';\nimport { liveLinessCheck, verify, enroll, getUserKycProfile, postUserKycProfile } from \"../../API/API\";\nimport { Button, Form, Grid, Input, Popup } from \"semantic-ui-react\";\n\nimport \"./SignUpForm.css\";\n\nexport default function FaceKiForm(props) {\n  const webcamRef = useRef(null);\n  const [faceKISuccess, setFaceKISuccess] = useState(false);\n\n  const dataURLtoFile = (dataurl, filename) => {\n    var arr = dataurl.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, { type: mime });\n  }\n\n  const videoEnroll = async () => {\n    const { privKey, email } = props;\n    const imageSrc = webcamRef.current.getScreenshot();\n\n    if (!imageSrc) {\n      alert('Check your camera');\n      return; \n    };\n\n    var file = dataURLtoFile(imageSrc, 'a.jpg');\n\n    const response = await liveLinessCheck(file);\n\n    if (response.data.liveness === 'Spoof') alert('try again!');\n    else {\n      const response_verify = await verify(file);\n      if (\n        response_verify.status === 'Verify OK' &&\n        response_verify.name === `${email}${privKey}`\n      ) {\n        alert('You already enrolled');\n        setFaceKISuccess(true);\n      } else {\n        const response_enroll = await enroll(\n          file,\n          `${email}${privKey}`\n        );\n        if (response_enroll.status === 'Enroll OK') {\n          alert('Successfully enrolled');\n          const add_response = await postUserKycProfile(email, `usr_${privKey}`);\n          setFaceKISuccess(true);\n        }\n      }\n    }\n  }\n\n  return (\n    <div style={{ marginLeft: \"3rem\" }} className={\"totalSumBlock\"}>\n      <div className='under-div'>\n        <div className='header_tag'>\n          <div style={{\n            height: \"550px\",\n            width: \"550px\",\n            background: \"#fff\"\n          }}>\n            <div className='header_p'>\n              <h6 style={{ fontSize: '24px' }}>Bio-Metric 2 Factor Authentication</h6>\n              <p className='header_ptag'>Next, we will setup your Biometric two factor authentication, to ensure the security of your wallet</p>\n            </div>\n            <div className='child-div'>\n              <div style={{ width: '100%', display: 'flex', height: '30px' }}>\n                <div className=\"position-head\">Position your face in the oval</div>\n                <button className='btn_x'>X</button>\n              </div>\n              <Webcam\n                audio={false}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                videoConstraints={{\n                  facingMode: 'user',\n                  width: 500,\n                  height: 400,\n                }}\n                width={500}\n                height={400}\n                mirrored\n              />\n              <div className='btn-div'>\n                <p className='span-class'>Press record and follow the instructions</p>\n                <div className=\"btn-grp\">\n                  <button className='btn-1' onClick={videoEnroll}>Verify</button>\n                  <Button\n                    onClick={()=>props.onClick()}\n                    className=\"btn-2\"\n                    disabled={faceKISuccess === false}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/OpenOrder/index.jsx",["503","504","505","506"],"import { useQuery } from \"react-query\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport Paper from \"@mui/material/Paper\";\nimport { useEffect, useState } from \"react\";\nimport './OpenOrder.css';\nimport { Button, Grid, Popover, Typography } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { accountsSelector } from \"../../store/account/selector\";\nimport getOpenOrder from \"../../lib/fetchOpenOrder\";\nimport { ChainStore } from \"meta1-vision-js\";\nimport PopupState, { bindTrigger, bindPopover } from 'material-ui-popup-state';\nimport moment from \"moment\";\n\nconst OpenOrder = (props) => {\n\tconst accountNameState = useSelector(accountsSelector);\n\tconst { column, direction } = props;\n\tconst [filterCollection, setFilterCollection] = useState([]);\n\tconst [isInvent, setIsInvent] = useState({\n\t\tcurrent: false,\n\t\tsymbol: []\n\t});\n\n\tconst { data, isLoading, error } = useQuery([\"openOrder\", accountNameState, isInvent], getOpenOrder, {\n\t\trefetchInterval: 10000\n\t});\n\tuseEffect(() => {\n\t\tif (Array.isArray(data)) {\n\t\t\tdata.sort((a, b) => {\n\t\t\t\treturn a.order.getPrice() - b.order.getPrice();\n\t\t\t});\n\n\t\t\tdata.sort((a, b) => {\n\t\t\t\tif (a.marketName > b.marketName) {\n\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (a.marketName < b.marketName) {\n\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t});\n\t\t\tdata.sort((a, b) => {\n\t\t\t\treturn (\n\t\t\t\tmoment(b.order.expiration).valueOf() -\n\t\t\t\tmoment(a.order.expiration).valueOf()\n\t\t\t\t);\n\t\t\t});\n\t\t\tsetFilterCollection(data);\n\t\t}\n\t}, [data]);\n\n\tconst inventHandler = (currentValue, symbol) => {\n\t\tlet symbolArr = isInvent.symbol;\n\n\t\tif (currentValue) {\n\t\t\tsymbolArr.splice(symbolArr.indexOf(symbol),1);\t\n\t\t} else {\n\t\t\tsymbolArr.push(symbol)\n\t\t}\t\n\n\t\tsetIsInvent(prev => {\n\t\t\treturn {\n\t\t\t\tcurrent: !currentValue,\n\t\t\t\tsymbol : symbolArr\n\t\t\t}\n\t\t});\n\t}\n\n\tconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n\t\t[`&.${tableCellClasses.head}`]: {\n\t\t\tbackgroundColor: theme.palette.common.white,\n\t\t\tcolor: theme.palette.common.black,\n\t\t\tfontWeight: 600,\n\t\t\tfontSize: 15,\n\t\t},\n\t\t[`&.${tableCellClasses.body}`]: {\n\t\t\tfontSize: 14,\n\t\t\tpadding: 8,\n\t\t\tcolor: \"#240000\",\n\t\t},\n\t}));\n\n\tconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n\t\t\"&:nth-of-type(odd)\": {\n\t\t\tbackgroundColor: theme.palette.action.hover,\n\t\t},\n\t\t// hide last border\n\t\t\"&:last-child td, &:last-child th\": {\n\t\t\tborder: 0,\n\t\t},\n\t}));\n\n\tif (isLoading) return <MetaLoader size={\"small\"} />;\n\n\treturn (\n\t\t<>\n\t\t\t<TableContainer style={{ overflow: \"auto\" }} component={Paper}>\n\t\t\t\t<Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow style={{ display: \"table-row\" }}>\n\t\t\t\t\t\t\t<StyledTableCell\n\t\t\t\t\t\t\t\tsorted={column === \"id\" ? direction : null}\n\t\t\t\t\t\t\t\tonClick={() => { }}\n\t\t\t\t\t\t\t\talign=\"left\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tBuy / Sell\n\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t<StyledTableCell align=\"left\">\n\t\t\t\t\t\t\t\tFrom / To\n\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t<StyledTableCell align=\"left\">Price</StyledTableCell>\n\t\t\t\t\t\t\t<StyledTableCell align=\"left\">Market Price</StyledTableCell>\n\t\t\t\t\t\t\t<StyledTableCell align=\"left\">Order Date</StyledTableCell>\n\t\t\t\t\t\t\t<StyledTableCell align=\"left\">Expiry Date</StyledTableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{filterCollection && filterCollection.map((el, index) => (\n\t\t\t\t\t\t\t<StyledTableRow key={index}>\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"center\">\n\t\t\t\t\t\t\t\t\t<span className={`${el.isInverted ? 'danger-title' : 'success-title'}`}>\n\t\t\t\t\t\t\t\t\t\t{el.isInverted ? 'Sell' : 'Buy'}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"left\">\n\t\t\t\t\t\t\t\t\t<h6 style={{ margin: \"0\" }}>{el.fromTo}</h6>\n\t\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"left\">\n\t\t\t\t\t\t\t\t<PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n\t\t\t\t\t\t\t\t\t{(popupState) => (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<h6 {...bindTrigger(popupState)} style={{ margin: \"0\" }}>{el.price}<span className=\"price_symbol\">{el.priceSymbol}</span></h6>\n\t\t\t\t\t\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"price_symbol_model\"\n\t\t\t\t\t\t\t\t\t\t\t\t{...bindPopover(popupState)}\n\t\t\t\t\t\t\t\t\t\t\t\tanchorOrigin={{\n\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal: 'center',\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\ttransformOrigin={{\n\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal: 'center',\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Typography className=\"price_symbol_model\" sx={{ p: 2 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className=\"inside_model_btn\" onClick={() => inventHandler(el.isInverted, el.marketName)} >Invert the price</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</PopupState>\n\t\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"left\">\n\t\t\t\t\t\t\t\t\t<h6 style={{ margin: \"0\" }}>{el.marketPrice}</h6>\n\t\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"left\">\n\t\t\t\t\t\t\t\t\t<h6 style={{ margin: \"0\" }}>{el.creationDate}</h6>\n\t\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t\t<StyledTableCell align=\"left\">\n\t\t\t\t\t\t\t\t\t<h6 style={{ margin: \"0\" }}>{el.expiration}</h6>\n\t\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t\t</StyledTableRow>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t{filterCollection && filterCollection.length === 0 && <StyledTableRow>\n\t\t\t\t\t\t\t<StyledTableCell align=\"center\" colSpan={4}>\n\t\t\t\t\t\t\t\t<span>No record found</span>\n\t\t\t\t\t\t\t</StyledTableCell>\n\t\t\t\t\t\t</StyledTableRow>}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t{filterCollection.length > 0 && <Grid container spacing={2}>\n\t\t\t\t<Grid item md={12}>\n\t\t\t\t\t<div className=\"page_sec\">\n\t\t\t\t\t\t<span>Total of {filterCollection.length} operations</span>\n\t\t\t\t\t</div>\n\t\t\t\t</Grid>\n\t\t\t</Grid>}\n\n\t\t</>\n\t);\n};\nexport default OpenOrder;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchOpenOrder.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/MarketClasses.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/utils.js",["507"],"import asset_utils from \"./asset_utils\";\n\nimport {ChainTypes} from \"meta1-vision-js\";\n\nvar numeral = require(\"numeral\");\nlet id_regex = /\\b\\d+\\.\\d+\\.(\\d+)\\b/;\nvar {object_type} = ChainTypes;\n\nvar Utils = {\n    is_object_id: obj_id => {\n        if (\"string\" != typeof obj_id) return false;\n        let match = id_regex.exec(obj_id);\n        return match !== null && obj_id.split(\".\").length === 3;\n    },\n\n    is_object_type: (obj_id, type) => {\n        let prefix = object_type[type];\n        if (!prefix || !obj_id) return null;\n        prefix = \"1.\" + prefix.toString();\n        return obj_id.substring(0, prefix.length) === prefix;\n    },\n\n    get_asset_precision: precision => {\n        precision = precision.toJS ? precision.get(\"precision\") : precision;\n        return Math.pow(10, precision);\n    },\n\n    get_asset_amount: function(amount, asset) {\n        if (amount === 0) return amount;\n        if (!amount) return null;\n        return (\n            amount /\n            this.get_asset_precision(\n                asset.toJS ? asset.get(\"precision\") : asset.precision\n            )\n        );\n    },\n\n    convert_satoshi_to_typed: function(amount, asset) {\n        if (amount === 0) return amount;\n        if (!amount) return null;\n        return (\n            amount /\n            this.get_asset_precision(\n                asset.toJS ? asset.get(\"precision\") : asset.precision\n            )\n        );\n    },\n\n    convert_typed_to_satoshi: function(amount, asset) {\n        return (\n            amount *\n            this.get_asset_precision(\n                asset.toJS ? asset.get(\"precision\") : asset.precision\n            )\n        );\n    },\n\n    get_asset_price: function(\n        quoteAmount,\n        quoteAsset,\n        baseAmount,\n        baseAsset,\n        inverted = false\n    ) {\n        if (!quoteAsset || !baseAsset) {\n            return 1;\n        }\n        var price =\n            this.get_asset_amount(quoteAmount, quoteAsset) /\n            this.get_asset_amount(baseAmount, baseAsset);\n        return inverted ? 1 / price : price;\n    },\n\n    format_volume(amount, precision = 3) {\n        if (amount < 10000) {\n            return this.format_number(amount, precision);\n        } else if (amount < 1000000) {\n            return (Math.round(amount / 10) / 100).toFixed(2) + \"k\";\n        } else {\n            return (Math.round(amount / 10000) / 100).toFixed(2) + \"M\";\n        }\n    },\n\n    format_number: (number, decimals, trailing_zeros = true) => {\n        if (\n            isNaN(number) ||\n            !isFinite(number) ||\n            number === undefined ||\n            number === null\n        )\n            return \"\";\n        let zeros = \".\";\n        for (var i = 0; i < decimals; i++) {\n            zeros += \"0\";\n        }\n        let num = numeral(number).format(\"0,0\" + zeros);\n        if (num.indexOf(\".\") > 0 && !trailing_zeros)\n            return num.replace(/0+$/, \"\").replace(/\\.$/, \"\");\n        return num;\n    },\n\n    format_asset: function(amount, asset, noSymbol, trailing_zeros = true) {\n        let symbol;\n        let digits = 0;\n        if (asset === undefined) return undefined;\n        if (\"symbol\" in asset) {\n            // console.log( \"asset: \", asset )\n            symbol = asset.symbol;\n            digits = asset.precision;\n        } else {\n            // console.log( \"asset: \", asset.toJS() )\n            symbol = asset.get(\"symbol\");\n            digits = asset.get(\"precision\");\n        }\n        let precision = this.get_asset_precision(digits);\n        // console.log( \"precision: \", precision )\n\n        return `${this.format_number(\n            amount / precision,\n            digits,\n            trailing_zeros\n        )}${!noSymbol ? \" \" + symbol : \"\"}`;\n    },\n\n    price_text: function(price, base, quote) {\n        let maxDecimals = 8;\n        let priceText;\n        let quoteID = quote.toJS ? quote.get(\"id\") : quote.id;\n        let quotePrecision = quote.toJS\n            ? quote.get(\"precision\")\n            : quote.precision;\n        let baseID = base.toJS ? base.get(\"id\") : base.id;\n        let basePrecision = base.toJS ? base.get(\"precision\") : base.precision;\n        let fixedPrecisionAssets = {\n            \"1.3.113\": 5, // bitCNY\n            \"1.3.121\": 5 // bitUSD\n        };\n        if (quoteID === \"1.3.0\") {\n            priceText = this.format_number(price, quotePrecision);\n        } else if (baseID === \"1.3.0\") {\n            priceText = this.format_number(\n                price,\n                Math.min(maxDecimals, quotePrecision + 2)\n            );\n        } else if (fixedPrecisionAssets[quoteID]) {\n            priceText = this.format_number(\n                price,\n                fixedPrecisionAssets[quoteID]\n            );\n        } else {\n            priceText = this.format_number(\n                price,\n                Math.min(\n                    maxDecimals,\n                    Math.max(quotePrecision + basePrecision, 2)\n                )\n            );\n        }\n        return priceText;\n    },\n\n    price_to_text: function(price, base, quote, forcePrecision = null) {\n        if (typeof price !== \"number\" || !base || !quote) {\n            return;\n        }\n\n        if (price === Infinity) {\n            price = 0;\n        }\n        let priceText;\n\n        if (forcePrecision) {\n            priceText = this.format_number(price, forcePrecision);\n        } else {\n            priceText = this.price_text(price, base, quote);\n        }\n        let price_split = priceText.split(\".\");\n        let int = price_split[0];\n        let dec = price_split[1];\n        let i;\n\n        let zeros = 0;\n        if (dec) {\n            if (price > 1) {\n                let l = dec.length;\n                for (i = l - 1; i >= 0; i--) {\n                    if (dec[i] !== \"0\") {\n                        break;\n                    }\n                    zeros++;\n                }\n            } else {\n                let l = dec.length;\n                for (i = 0; i < l; i++) {\n                    if (dec[i] !== \"0\") {\n                        i--;\n                        break;\n                    }\n                    zeros++;\n                }\n            }\n        }\n\n        let trailing = zeros\n            ? dec.substr(Math.max(0, i + 1), dec.length)\n            : null;\n\n        if (trailing) {\n            if (trailing.length === dec.length) {\n                dec = null;\n            } else if (trailing.length) {\n                dec = dec.substr(0, i + 1);\n            }\n        }\n\n        return {\n            text: priceText,\n            int: int,\n            dec: dec,\n            trailing: trailing,\n            full: price\n        };\n    },\n\n    check_market_stats: function(\n        newStats = {close: {}},\n        oldStats = {close: {}}\n    ) {\n        let statsChanged =\n            newStats.volumeBase !== oldStats.volumeBase ||\n            !this.are_equal_shallow(\n                newStats.close && newStats.close.base,\n                oldStats.close && oldStats.close.base\n            ) ||\n            !this.are_equal_shallow(\n                newStats.close && newStats.close.quote,\n                oldStats.close && oldStats.close.quote\n            );\n        return statsChanged;\n    },\n\n    are_equal_shallow: function(a, b) {\n        if ((!a && b) || (a && !b)) {\n            return false;\n        }\n        if (Array.isArray(a) && Array.isArray(a)) {\n            if (a.length > b.length) {\n                return false;\n            }\n        }\n        if (typeof a === \"string\" && typeof b === \"string\") {\n            return a === b;\n        } else if (\n            (typeof a === \"string\" && typeof b !== \"string\") ||\n            (typeof a !== \"string\" && typeof b === \"string\")\n        ) {\n            return false;\n        }\n\n        if (a && a.toJS && b && b.toJS) return a === b;\n        for (var key in a) {\n            if ((a.hasOwnProperty(key) && !(key in b)) || a[key] !== b[key]) {\n                return false;\n            }\n        }\n        for (var key in b) {\n            if ((b.hasOwnProperty(key) && !(key in a)) || a[key] !== b[key]) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    makeISODateString(date_str) {\n        if (typeof date_str === \"string\" && !/Z$/.test(date_str)) {\n            date_str += \"Z\";\n        }\n        return date_str;\n    },\n\n    format_date: function(date_str) {\n        date_str = this.makeISODateString(date_str);\n        let date = new Date(date_str);\n        return date.toLocaleDateString();\n    },\n\n    format_time: function(time_str) {\n        time_str = this.makeISODateString(time_str);\n        let date = new Date(time_str);\n        return date.toLocaleString();\n    },\n\n    limitByPrecision: function(value, assetPrecision) {\n        let valueString = value.toString();\n        let splitString = valueString.split(\".\");\n        if (\n            splitString.length === 1 ||\n            (splitString.length === 2 &&\n                splitString[1].length <= assetPrecision)\n        ) {\n            return valueString;\n        } else {\n            return (\n                splitString[0] + \".\" + splitString[1].substr(0, assetPrecision)\n            );\n        }\n    },\n\n    convertPrice: function(fromRate, toRate, fromID, toID) {\n        if (!fromRate || !toRate) {\n            return null;\n        }\n        // Handle case of input simply being a fromAsset and toAsset\n        if (fromRate.toJS && this.is_object_type(fromRate.get(\"id\"), \"asset\")) {\n            fromID = fromRate.get(\"id\");\n            fromRate = fromRate.get(\"bitasset\")\n                ? asset_utils.extractRawFeedPrice(fromRate).toJS()\n                : fromRate.getIn([\"options\", \"core_exchange_rate\"]).toJS();\n        }\n\n        if (toRate.toJS && this.is_object_type(toRate.get(\"id\"), \"asset\")) {\n            toID = toRate.get(\"id\");\n            toRate = toRate.get(\"bitasset\")\n                ? asset_utils.extractRawFeedPrice(toRate).toJS()\n                : toRate.getIn([\"options\", \"core_exchange_rate\"]).toJS();\n        }\n\n        let fromRateQuoteID = fromRate.quote.asset_id;\n        let toRateQuoteID = toRate.quote.asset_id;\n\n        let fromRateQuoteAmount, fromRateBaseAmount;\n        if (fromRateQuoteID === fromID) {\n            fromRateQuoteAmount = fromRate.quote.amount;\n            fromRateBaseAmount = fromRate.base.amount;\n        } else {\n            fromRateQuoteAmount = fromRate.base.amount;\n            fromRateBaseAmount = fromRate.quote.amount;\n        }\n\n        let toRateQuoteAmount, toRateBaseAmount;\n        if (toRateQuoteID === toID) {\n            toRateQuoteAmount = toRate.quote.amount;\n            toRateBaseAmount = toRate.base.amount;\n        } else {\n            toRateQuoteAmount = toRate.base.amount;\n            toRateBaseAmount = toRate.quote.amount;\n        }\n\n        let baseRatio, finalQuoteAmount, finalBaseAmount;\n        if (toRateBaseAmount > fromRateBaseAmount) {\n            baseRatio = toRateBaseAmount / fromRateBaseAmount;\n            finalQuoteAmount = fromRateQuoteAmount * baseRatio;\n            finalBaseAmount = toRateQuoteAmount;\n        } else {\n            baseRatio = fromRateBaseAmount / toRateBaseAmount;\n            finalQuoteAmount = fromRateQuoteAmount;\n            finalBaseAmount = toRateQuoteAmount * baseRatio;\n        }\n\n        return {\n            quote: {\n                amount: finalQuoteAmount,\n                asset_id: toID\n            },\n            base: {\n                amount: finalBaseAmount,\n                asset_id: fromID\n            }\n        };\n    },\n\n    convertValue: function(priceObject, amount, fromAsset, toAsset) {\n        priceObject = priceObject.toJS ? priceObject.toJS() : priceObject;\n        let quotePrecision = this.get_asset_precision(\n            fromAsset.get(\"precision\")\n        );\n        let basePrecision = this.get_asset_precision(toAsset.get(\"precision\"));\n\n        let assetPrice = this.get_asset_price(\n            priceObject.quote.amount,\n            fromAsset,\n            priceObject.base.amount,\n            toAsset\n        );\n\n        let eqValue =\n            fromAsset.get(\"id\") !== toAsset.get(\"id\")\n                ? (basePrecision * (amount / quotePrecision)) / assetPrice\n                : amount;\n\n        if (isNaN(eqValue) || !isFinite(eqValue)) {\n            return null;\n        }\n        return eqValue;\n    },\n\n    sortText(a, b, inverse = false) {\n        if (a > b) {\n            return inverse ? 1 : -1;\n        } else if (a < b) {\n            return inverse ? -1 : 1;\n        } else {\n            return 0;\n        }\n    },\n\n    sortID(a, b, inverse = false) {\n        // inverse = false => low to high\n        let intA = parseInt(a.split(\".\")[2], 10);\n        let intB = parseInt(b.split(\".\")[2], 10);\n\n        return inverse ? intB - intA : intA - intB;\n    },\n\n    calc_block_time(\n        block_number,\n        globalObject,\n        dynGlobalObject,\n        estimate = false\n    ) {\n        let block_interval = null;\n        let head_block = null;\n        let head_block_time = null;\n        if (!estimate && (!globalObject || !dynGlobalObject)) {\n            return null;\n        }\n        // estimate what is unknown, i.e. fix a block and assume interval and constant production with equal parameters\n        if (!globalObject) {\n            block_interval = 3;\n        } else {\n            block_interval = globalObject\n                .get(\"parameters\")\n                .get(\"block_interval\");\n        }\n        if (!dynGlobalObject) {\n            // mainnet estimation\n            head_block = 37025190;\n            head_block_time = new Date(\"2019-04-30T07:55:24Z\");\n        } else {\n            head_block = dynGlobalObject.get(\"head_block_number\");\n            head_block_time = new Date(dynGlobalObject.get(\"time\") + \"Z\");\n        }\n        const seconds_below = (head_block - block_number) * block_interval;\n        return new Date(head_block_time - seconds_below * 1000);\n    },\n\n    get_translation_parts(str) {\n        let re = /{(.*?)}/g;\n        return str.split(re);\n    },\n\n    get_percentage(a, b) {\n        return Math.round((a / b) * 100) + \"%\";\n    },\n};\n\nexport default Utils;","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/asset_utils.js",["508"],"import assetConstants from \"./asset_constants\";\r\nimport sanitize from \"sanitize\";\r\n\r\nexport default class AssetUtils {\r\n    static getFlagBooleans(mask, isBitAsset = false) {\r\n        let booleans = {\r\n            charge_market_fee: false,\r\n            white_list: false,\r\n            override_authority: false,\r\n            transfer_restricted: false,\r\n            disable_force_settle: false,\r\n            global_settle: false,\r\n            disable_confidential: false,\r\n            witness_fed_asset: false,\r\n            committee_fed_asset: false\r\n        };\r\n\r\n        if (mask === \"all\") {\r\n            for (let flag in booleans) {\r\n                if (\r\n                    !isBitAsset &&\r\n                    assetConstants.uia_permission_mask.indexOf(flag) === -1\r\n                ) {\r\n                    delete booleans[flag];\r\n                } else {\r\n                    booleans[flag] = true;\r\n                }\r\n            }\r\n            return booleans;\r\n        }\r\n\r\n        for (let flag in booleans) {\r\n            if (\r\n                !isBitAsset &&\r\n                assetConstants.uia_permission_mask.indexOf(flag) === -1\r\n            ) {\r\n                delete booleans[flag];\r\n            } else {\r\n                if (mask & assetConstants.permission_flags[flag]) {\r\n                    booleans[flag] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return booleans;\r\n    }\r\n\r\n    static getFlags(flagBooleans) {\r\n        let keys = Object.keys(assetConstants.permission_flags);\r\n\r\n        let flags = 0;\r\n\r\n        keys.forEach(key => {\r\n            if (flagBooleans[key] && key !== \"global_settle\") {\r\n                flags += assetConstants.permission_flags[key];\r\n            }\r\n        });\r\n\r\n        return flags;\r\n    }\r\n\r\n    static getPermissions(flagBooleans, isBitAsset = false) {\r\n        let permissions = isBitAsset\r\n            ? Object.keys(assetConstants.permission_flags)\r\n            : assetConstants.uia_permission_mask;\r\n        let flags = 0;\r\n        permissions.forEach(permission => {\r\n            if (flagBooleans[permission] && permission !== \"global_settle\") {\r\n                flags += assetConstants.permission_flags[permission];\r\n            }\r\n        });\r\n\r\n        if (isBitAsset && flagBooleans[\"global_settle\"]) {\r\n            flags += assetConstants.permission_flags[\"global_settle\"];\r\n        }\r\n\r\n        return flags;\r\n    }\r\n\r\n    static parseDescription(description) {\r\n        let parsed;\r\n        description = sanitize(description, {\r\n            whiteList: [], // empty, means filter out all tags\r\n            stripIgnoreTag: true // filter out all HTML not in the whilelist\r\n        });\r\n        try {\r\n            parsed = JSON.parse(description);\r\n        } catch (error) {}\r\n        for (let key in parsed) {\r\n            parsed[key] = sanitize(parsed[key], {\r\n                whiteList: [], // empty, means filter out all tags\r\n                stripIgnoreTag: true // filter out all HTML not in the whilelist\r\n            });\r\n        }\r\n        return parsed ? parsed : {main: description};\r\n    }\r\n\r\n    static extractRawFeedPrice(asset) {\r\n        /**\r\n         * The naming convention is confusing!\r\n         *\r\n         * bitshares-core knows only settlement_price, which is the feed price as known from UI!\r\n         *\r\n         * UI definition:\r\n         *  - Feed Price: Witness fed price, given by backend as settlement_price\r\n         *  - Settlement Price: feed price * force settlement offset factor\r\n         *\r\n         */\r\n        if (!!asset.bitasset) {\r\n            return asset.bitasset.current_feed.settlement_price;\r\n        }\r\n        if (!!asset.current_feed) {\r\n            return asset.current_feed.settlement_price;\r\n        }\r\n        if (!!asset.settlement_price) {\r\n            return asset.settlement_price;\r\n        }\r\n        if (!!asset.get(\"bitasset\")) {\r\n            return asset.getIn([\r\n                \"bitasset\",\r\n                \"current_feed\",\r\n                \"settlement_price\"\r\n            ]);\r\n        }\r\n        if (!!asset.get(\"settlement_price\")) {\r\n            return asset.getIn([\"settlement_price\"]);\r\n        }\r\n        if (!!asset.get(\"current_feed\")) {\r\n            return asset.getIn([\"current_feed\", \"settlement_price\"]);\r\n        }\r\n        throw \"Feed price not found!\";\r\n    }\r\n}\r\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/asset_constants.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/MigrationForm.js",["509","510","511"],{"ruleId":"512","replacedBy":"513"},{"ruleId":"514","replacedBy":"515"},{"ruleId":"516","severity":1,"message":"517","line":1,"column":8,"nodeType":"518","messageId":"519","endLine":1,"endColumn":13},{"ruleId":"516","severity":1,"message":"520","line":2,"column":10,"nodeType":"518","messageId":"519","endLine":2,"endColumn":20},{"ruleId":"516","severity":1,"message":"521","line":2,"column":22,"nodeType":"518","messageId":"519","endLine":2,"endColumn":31},{"ruleId":"516","severity":1,"message":"522","line":8,"column":10,"nodeType":"518","messageId":"519","endLine":8,"endColumn":26},{"ruleId":"516","severity":1,"message":"523","line":8,"column":28,"nodeType":"518","messageId":"519","endLine":8,"endColumn":40},{"ruleId":"516","severity":1,"message":"524","line":10,"column":10,"nodeType":"518","messageId":"519","endLine":10,"endColumn":21},{"ruleId":"516","severity":1,"message":"525","line":10,"column":43,"nodeType":"518","messageId":"519","endLine":10,"endColumn":58},{"ruleId":"516","severity":1,"message":"526","line":19,"column":8,"nodeType":"518","messageId":"519","endLine":19,"endColumn":18},{"ruleId":"516","severity":1,"message":"527","line":20,"column":8,"nodeType":"518","messageId":"519","endLine":20,"endColumn":18},{"ruleId":"516","severity":1,"message":"528","line":32,"column":26,"nodeType":"518","messageId":"519","endLine":32,"endColumn":40},{"ruleId":"516","severity":1,"message":"529","line":34,"column":59,"nodeType":"518","messageId":"519","endLine":34,"endColumn":74},{"ruleId":"516","severity":1,"message":"530","line":43,"column":9,"nodeType":"518","messageId":"519","endLine":43,"endColumn":19},{"ruleId":"516","severity":1,"message":"531","line":49,"column":9,"nodeType":"518","messageId":"519","endLine":49,"endColumn":18},{"ruleId":"516","severity":1,"message":"532","line":50,"column":9,"nodeType":"518","messageId":"519","endLine":50,"endColumn":19},{"ruleId":"516","severity":1,"message":"533","line":54,"column":9,"nodeType":"518","messageId":"519","endLine":54,"endColumn":20},{"ruleId":"516","severity":1,"message":"534","line":55,"column":9,"nodeType":"518","messageId":"519","endLine":55,"endColumn":30},{"ruleId":"516","severity":1,"message":"535","line":56,"column":9,"nodeType":"518","messageId":"519","endLine":56,"endColumn":23},{"ruleId":"516","severity":1,"message":"536","line":79,"column":19,"nodeType":"518","messageId":"519","endLine":79,"endColumn":29},{"ruleId":"516","severity":1,"message":"537","line":81,"column":10,"nodeType":"518","messageId":"519","endLine":81,"endColumn":18},{"ruleId":"516","severity":1,"message":"538","line":84,"column":18,"nodeType":"518","messageId":"519","endLine":84,"endColumn":27},{"ruleId":"516","severity":1,"message":"539","line":97,"column":10,"nodeType":"518","messageId":"519","endLine":97,"endColumn":23},{"ruleId":"540","severity":1,"message":"541","line":112,"column":6,"nodeType":"542","endLine":112,"endColumn":8,"suggestions":"543"},{"ruleId":"540","severity":1,"message":"544","line":170,"column":5,"nodeType":"542","endLine":170,"endColumn":40,"suggestions":"545"},{"ruleId":"516","severity":1,"message":"546","line":172,"column":9,"nodeType":"518","messageId":"519","endLine":172,"endColumn":12},{"ruleId":"540","severity":1,"message":"547","line":189,"column":5,"nodeType":"542","endLine":189,"endColumn":22,"suggestions":"548"},{"ruleId":"540","severity":1,"message":"549","line":199,"column":5,"nodeType":"542","endLine":199,"endColumn":39,"suggestions":"550"},{"ruleId":"540","severity":1,"message":"551","line":225,"column":6,"nodeType":"542","endLine":225,"endColumn":68,"suggestions":"552"},{"ruleId":"540","severity":1,"message":"553","line":282,"column":6,"nodeType":"542","endLine":282,"endColumn":24,"suggestions":"554"},{"ruleId":"516","severity":1,"message":"555","line":301,"column":18,"nodeType":"518","messageId":"519","endLine":301,"endColumn":34},{"ruleId":"516","severity":1,"message":"556","line":11,"column":10,"nodeType":"518","messageId":"519","endLine":11,"endColumn":18},{"ruleId":"516","severity":1,"message":"557","line":11,"column":20,"nodeType":"518","messageId":"519","endLine":11,"endColumn":31},{"ruleId":"516","severity":1,"message":"558","line":13,"column":10,"nodeType":"518","messageId":"519","endLine":13,"endColumn":24},{"ruleId":"516","severity":1,"message":"559","line":16,"column":29,"nodeType":"518","messageId":"519","endLine":16,"endColumn":39},{"ruleId":"516","severity":1,"message":"560","line":35,"column":30,"nodeType":"518","messageId":"519","endLine":35,"endColumn":36},{"ruleId":"516","severity":1,"message":"561","line":35,"column":38,"nodeType":"518","messageId":"519","endLine":35,"endColumn":45},{"ruleId":"516","severity":1,"message":"562","line":40,"column":28,"nodeType":"518","messageId":"519","endLine":40,"endColumn":33},{"ruleId":"516","severity":1,"message":"536","line":14,"column":19,"nodeType":"518","messageId":"519","endLine":14,"endColumn":29},{"ruleId":"516","severity":1,"message":"563","line":16,"column":10,"nodeType":"518","messageId":"519","endLine":16,"endColumn":23},{"ruleId":"516","severity":1,"message":"564","line":17,"column":10,"nodeType":"518","messageId":"519","endLine":17,"endColumn":24},{"ruleId":"540","severity":1,"message":"565","line":39,"column":6,"nodeType":"542","endLine":39,"endColumn":33,"suggestions":"566"},{"ruleId":"516","severity":1,"message":"567","line":42,"column":9,"nodeType":"518","messageId":"519","endLine":42,"endColumn":22},{"ruleId":"516","severity":1,"message":"568","line":6,"column":8,"nodeType":"518","messageId":"519","endLine":6,"endColumn":22},{"ruleId":"569","severity":1,"message":"570","line":117,"column":19,"nodeType":"571","endLine":124,"endColumn":20},{"ruleId":"569","severity":1,"message":"570","line":183,"column":21,"nodeType":"571","endLine":190,"endColumn":22},{"ruleId":"516","severity":1,"message":"517","line":3,"column":8,"nodeType":"518","messageId":"519","endLine":3,"endColumn":13},{"ruleId":"516","severity":1,"message":"572","line":6,"column":3,"nodeType":"518","messageId":"519","endLine":6,"endColumn":8},{"ruleId":"516","severity":1,"message":"573","line":11,"column":3,"nodeType":"518","messageId":"519","endLine":11,"endColumn":8},{"ruleId":"516","severity":1,"message":"574","line":12,"column":3,"nodeType":"518","messageId":"519","endLine":12,"endColumn":8},{"ruleId":"516","severity":1,"message":"575","line":14,"column":10,"nodeType":"518","messageId":"519","endLine":14,"endColumn":26},{"ruleId":"516","severity":1,"message":"576","line":19,"column":58,"nodeType":"518","messageId":"519","endLine":19,"endColumn":79},{"ruleId":"516","severity":1,"message":"577","line":20,"column":5,"nodeType":"518","messageId":"519","endLine":20,"endColumn":10},{"ruleId":"516","severity":1,"message":"578","line":25,"column":5,"nodeType":"518","messageId":"519","endLine":25,"endColumn":22},{"ruleId":"516","severity":1,"message":"579","line":26,"column":5,"nodeType":"518","messageId":"519","endLine":26,"endColumn":17},{"ruleId":"516","severity":1,"message":"580","line":27,"column":5,"nodeType":"518","messageId":"519","endLine":27,"endColumn":20},{"ruleId":"516","severity":1,"message":"581","line":28,"column":5,"nodeType":"518","messageId":"519","endLine":28,"endColumn":21},{"ruleId":"516","severity":1,"message":"582","line":29,"column":5,"nodeType":"518","messageId":"519","endLine":29,"endColumn":22},{"ruleId":"516","severity":1,"message":"583","line":32,"column":9,"nodeType":"518","messageId":"519","endLine":32,"endColumn":27},{"ruleId":"540","severity":1,"message":"584","line":65,"column":6,"nodeType":"542","endLine":65,"endColumn":54,"suggestions":"585"},{"ruleId":"516","severity":1,"message":"586","line":4,"column":8,"nodeType":"518","messageId":"519","endLine":4,"endColumn":12},{"ruleId":"516","severity":1,"message":"587","line":16,"column":5,"nodeType":"518","messageId":"519","endLine":16,"endColumn":30},{"ruleId":"516","severity":1,"message":"588","line":17,"column":5,"nodeType":"518","messageId":"519","endLine":17,"endColumn":29},{"ruleId":"516","severity":1,"message":"556","line":5,"column":10,"nodeType":"518","messageId":"519","endLine":5,"endColumn":18},{"ruleId":"516","severity":1,"message":"589","line":35,"column":5,"nodeType":"518","messageId":"519","endLine":35,"endColumn":16},{"ruleId":"516","severity":1,"message":"590","line":36,"column":5,"nodeType":"518","messageId":"519","endLine":36,"endColumn":20},{"ruleId":"516","severity":1,"message":"579","line":37,"column":5,"nodeType":"518","messageId":"519","endLine":37,"endColumn":17},{"ruleId":"516","severity":1,"message":"538","line":41,"column":18,"nodeType":"518","messageId":"519","endLine":41,"endColumn":27},{"ruleId":"516","severity":1,"message":"591","line":46,"column":10,"nodeType":"518","messageId":"519","endLine":46,"endColumn":15},{"ruleId":"516","severity":1,"message":"562","line":48,"column":28,"nodeType":"518","messageId":"519","endLine":48,"endColumn":33},{"ruleId":"592","severity":1,"message":"593","line":114,"column":20,"nodeType":"594","messageId":"595","endLine":114,"endColumn":22},{"ruleId":"540","severity":1,"message":"596","line":120,"column":6,"nodeType":"542","endLine":120,"endColumn":23,"suggestions":"597"},{"ruleId":"516","severity":1,"message":"598","line":146,"column":9,"nodeType":"518","messageId":"519","endLine":146,"endColumn":15},{"ruleId":"516","severity":1,"message":"599","line":156,"column":11,"nodeType":"518","messageId":"519","endLine":156,"endColumn":17},{"ruleId":"516","severity":1,"message":"600","line":23,"column":10,"nodeType":"518","messageId":"519","endLine":23,"endColumn":34},{"ruleId":"516","severity":1,"message":"601","line":33,"column":5,"nodeType":"518","messageId":"519","endLine":33,"endColumn":12},{"ruleId":"516","severity":1,"message":"602","line":39,"column":21,"nodeType":"518","messageId":"519","endLine":39,"endColumn":33},{"ruleId":"540","severity":1,"message":"603","line":78,"column":5,"nodeType":"542","endLine":78,"endColumn":53,"suggestions":"604"},{"ruleId":"592","severity":1,"message":"593","line":133,"column":27,"nodeType":"594","messageId":"595","endLine":133,"endColumn":29},{"ruleId":"540","severity":1,"message":"605","line":138,"column":6,"nodeType":"542","endLine":138,"endColumn":38,"suggestions":"606"},{"ruleId":"540","severity":1,"message":"607","line":178,"column":6,"nodeType":"542","endLine":178,"endColumn":37,"suggestions":"608"},{"ruleId":"592","severity":1,"message":"609","line":192,"column":31,"nodeType":"594","messageId":"595","endLine":192,"endColumn":33},{"ruleId":"592","severity":1,"message":"609","line":194,"column":19,"nodeType":"594","messageId":"595","endLine":194,"endColumn":21},{"ruleId":"540","severity":1,"message":"610","line":265,"column":6,"nodeType":"542","endLine":265,"endColumn":44,"suggestions":"611"},{"ruleId":"592","severity":1,"message":"593","line":919,"column":38,"nodeType":"594","messageId":"595","endLine":919,"endColumn":40},{"ruleId":"612","severity":1,"message":"613","line":948,"column":36,"nodeType":"614","messageId":"615","endLine":948,"endColumn":38},{"ruleId":"612","severity":1,"message":"613","line":968,"column":36,"nodeType":"614","messageId":"615","endLine":968,"endColumn":38},{"ruleId":"516","severity":1,"message":"616","line":31,"column":10,"nodeType":"518","messageId":"519","endLine":31,"endColumn":18},{"ruleId":"540","severity":1,"message":"617","line":44,"column":6,"nodeType":"542","endLine":44,"endColumn":8,"suggestions":"618"},{"ruleId":"516","severity":1,"message":"619","line":8,"column":17,"nodeType":"518","messageId":"519","endLine":8,"endColumn":21},{"ruleId":"516","severity":1,"message":"620","line":8,"column":37,"nodeType":"518","messageId":"519","endLine":8,"endColumn":43},{"ruleId":"516","severity":1,"message":"621","line":10,"column":10,"nodeType":"518","messageId":"519","endLine":10,"endColumn":20},{"ruleId":"516","severity":1,"message":"622","line":10,"column":22,"nodeType":"518","messageId":"519","endLine":10,"endColumn":32},{"ruleId":"516","severity":1,"message":"623","line":10,"column":34,"nodeType":"518","messageId":"519","endLine":10,"endColumn":42},{"ruleId":"516","severity":1,"message":"624","line":10,"column":44,"nodeType":"518","messageId":"519","endLine":10,"endColumn":52},{"ruleId":"592","severity":1,"message":"593","line":40,"column":53,"nodeType":"594","messageId":"595","endLine":40,"endColumn":55},{"ruleId":"516","severity":1,"message":"625","line":43,"column":9,"nodeType":"518","messageId":"519","endLine":43,"endColumn":12},{"ruleId":"516","severity":1,"message":"626","line":44,"column":10,"nodeType":"518","messageId":"519","endLine":44,"endColumn":21},{"ruleId":"516","severity":1,"message":"627","line":44,"column":23,"nodeType":"518","messageId":"519","endLine":44,"endColumn":37},{"ruleId":"516","severity":1,"message":"628","line":48,"column":19,"nodeType":"518","messageId":"519","endLine":48,"endColumn":29},{"ruleId":"516","severity":1,"message":"629","line":55,"column":10,"nodeType":"518","messageId":"519","endLine":55,"endColumn":26},{"ruleId":"516","severity":1,"message":"630","line":58,"column":19,"nodeType":"518","messageId":"519","endLine":58,"endColumn":29},{"ruleId":"516","severity":1,"message":"631","line":59,"column":10,"nodeType":"518","messageId":"519","endLine":59,"endColumn":17},{"ruleId":"516","severity":1,"message":"583","line":66,"column":9,"nodeType":"518","messageId":"519","endLine":66,"endColumn":27},{"ruleId":"540","severity":1,"message":"632","line":99,"column":5,"nodeType":"542","endLine":99,"endColumn":53,"suggestions":"633"},{"ruleId":"540","severity":1,"message":"634","line":148,"column":6,"nodeType":"542","endLine":148,"endColumn":16,"suggestions":"635"},{"ruleId":"540","severity":1,"message":"636","line":169,"column":6,"nodeType":"542","endLine":169,"endColumn":24,"suggestions":"637"},{"ruleId":"516","severity":1,"message":"638","line":197,"column":9,"nodeType":"518","messageId":"519","endLine":197,"endColumn":20},{"ruleId":"540","severity":1,"message":"639","line":268,"column":6,"nodeType":"542","endLine":268,"endColumn":32,"suggestions":"640"},{"ruleId":"516","severity":1,"message":"641","line":274,"column":9,"nodeType":"518","messageId":"519","endLine":274,"endColumn":14},{"ruleId":"540","severity":1,"message":"642","line":310,"column":6,"nodeType":"542","endLine":310,"endColumn":23,"suggestions":"643"},{"ruleId":"516","severity":1,"message":"644","line":311,"column":9,"nodeType":"518","messageId":"519","endLine":311,"endColumn":21},{"ruleId":"516","severity":1,"message":"645","line":328,"column":9,"nodeType":"518","messageId":"519","endLine":328,"endColumn":18},{"ruleId":"516","severity":1,"message":"646","line":5,"column":3,"nodeType":"518","messageId":"519","endLine":5,"endColumn":8},{"ruleId":"516","severity":1,"message":"619","line":6,"column":3,"nodeType":"518","messageId":"519","endLine":6,"endColumn":7},{"ruleId":"516","severity":1,"message":"647","line":7,"column":3,"nodeType":"518","messageId":"519","endLine":7,"endColumn":9},{"ruleId":"516","severity":1,"message":"648","line":8,"column":3,"nodeType":"518","messageId":"519","endLine":8,"endColumn":7},{"ruleId":"516","severity":1,"message":"620","line":9,"column":3,"nodeType":"518","messageId":"519","endLine":9,"endColumn":9},{"ruleId":"516","severity":1,"message":"561","line":17,"column":20,"nodeType":"518","messageId":"519","endLine":17,"endColumn":27},{"ruleId":"540","severity":1,"message":"649","line":46,"column":6,"nodeType":"542","endLine":46,"endColumn":26,"suggestions":"650"},{"ruleId":"516","severity":1,"message":"651","line":2,"column":10,"nodeType":"518","messageId":"519","endLine":2,"endColumn":25},{"ruleId":"516","severity":1,"message":"520","line":5,"column":10,"nodeType":"518","messageId":"519","endLine":5,"endColumn":20},{"ruleId":"516","severity":1,"message":"572","line":7,"column":3,"nodeType":"518","messageId":"519","endLine":7,"endColumn":8},{"ruleId":"516","severity":1,"message":"646","line":7,"column":10,"nodeType":"518","messageId":"519","endLine":7,"endColumn":15},{"ruleId":"516","severity":1,"message":"648","line":7,"column":25,"nodeType":"518","messageId":"519","endLine":7,"endColumn":29},{"ruleId":"516","severity":1,"message":"619","line":7,"column":31,"nodeType":"518","messageId":"519","endLine":7,"endColumn":35},{"ruleId":"516","severity":1,"message":"573","line":7,"column":37,"nodeType":"518","messageId":"519","endLine":7,"endColumn":42},{"ruleId":"516","severity":1,"message":"652","line":40,"column":21,"nodeType":"518","messageId":"519","endLine":40,"endColumn":33},{"ruleId":"516","severity":1,"message":"653","line":53,"column":10,"nodeType":"518","messageId":"519","endLine":53,"endColumn":23},{"ruleId":"516","severity":1,"message":"654","line":56,"column":10,"nodeType":"518","messageId":"519","endLine":56,"endColumn":25},{"ruleId":"516","severity":1,"message":"655","line":56,"column":27,"nodeType":"518","messageId":"519","endLine":56,"endColumn":45},{"ruleId":"540","severity":1,"message":"656","line":91,"column":6,"nodeType":"542","endLine":91,"endColumn":37,"suggestions":"657"},{"ruleId":"540","severity":1,"message":"658","line":111,"column":6,"nodeType":"542","endLine":111,"endColumn":38,"suggestions":"659"},{"ruleId":"592","severity":1,"message":"609","line":173,"column":31,"nodeType":"594","messageId":"595","endLine":173,"endColumn":33},{"ruleId":"540","severity":1,"message":"660","line":222,"column":6,"nodeType":"542","endLine":222,"endColumn":22,"suggestions":"661"},{"ruleId":"516","severity":1,"message":"662","line":1,"column":8,"nodeType":"518","messageId":"519","endLine":1,"endColumn":13},{"ruleId":"516","severity":1,"message":"663","line":20,"column":11,"nodeType":"518","messageId":"519","endLine":20,"endColumn":18},{"ruleId":"516","severity":1,"message":"664","line":20,"column":9,"nodeType":"518","messageId":"519","endLine":20,"endColumn":19},{"ruleId":"516","severity":1,"message":"665","line":21,"column":9,"nodeType":"518","messageId":"519","endLine":21,"endColumn":18},{"ruleId":"516","severity":1,"message":"666","line":24,"column":9,"nodeType":"518","messageId":"519","endLine":24,"endColumn":19},{"ruleId":"516","severity":1,"message":"667","line":25,"column":9,"nodeType":"518","messageId":"519","endLine":25,"endColumn":22},{"ruleId":"612","severity":1,"message":"613","line":85,"column":49,"nodeType":"614","messageId":"615","endLine":85,"endColumn":51},{"ruleId":"540","severity":1,"message":"668","line":16,"column":9,"nodeType":"542","endLine":16,"endColumn":16,"suggestions":"669"},{"ruleId":"516","severity":1,"message":"670","line":2,"column":17,"nodeType":"518","messageId":"519","endLine":2,"endColumn":22},{"ruleId":"516","severity":1,"message":"647","line":2,"column":24,"nodeType":"518","messageId":"519","endLine":2,"endColumn":30},{"ruleId":"516","severity":1,"message":"671","line":6,"column":10,"nodeType":"518","messageId":"519","endLine":6,"endColumn":27},{"ruleId":"516","severity":1,"message":"672","line":6,"column":29,"nodeType":"518","messageId":"519","endLine":6,"endColumn":46},{"ruleId":"516","severity":1,"message":"673","line":6,"column":48,"nodeType":"518","messageId":"519","endLine":6,"endColumn":59},{"ruleId":"516","severity":1,"message":"600","line":10,"column":10,"nodeType":"518","messageId":"519","endLine":10,"endColumn":34},{"ruleId":"516","severity":1,"message":"674","line":11,"column":10,"nodeType":"518","messageId":"519","endLine":11,"endColumn":27},{"ruleId":"516","severity":1,"message":"675","line":26,"column":10,"nodeType":"518","messageId":"519","endLine":26,"endColumn":19},{"ruleId":"516","severity":1,"message":"676","line":26,"column":21,"nodeType":"518","messageId":"519","endLine":26,"endColumn":33},{"ruleId":"516","severity":1,"message":"677","line":27,"column":10,"nodeType":"518","messageId":"519","endLine":27,"endColumn":24},{"ruleId":"516","severity":1,"message":"678","line":27,"column":26,"nodeType":"518","messageId":"519","endLine":27,"endColumn":43},{"ruleId":"540","severity":1,"message":"660","line":56,"column":5,"nodeType":"542","endLine":56,"endColumn":49,"suggestions":"679"},{"ruleId":"516","severity":1,"message":"680","line":294,"column":7,"nodeType":"518","messageId":"519","endLine":294,"endColumn":30},{"ruleId":"516","severity":1,"message":"681","line":389,"column":7,"nodeType":"518","messageId":"519","endLine":389,"endColumn":17},{"ruleId":"516","severity":1,"message":"586","line":4,"column":8,"nodeType":"518","messageId":"519","endLine":4,"endColumn":12},{"ruleId":"516","severity":1,"message":"587","line":14,"column":5,"nodeType":"518","messageId":"519","endLine":14,"endColumn":30},{"ruleId":"516","severity":1,"message":"588","line":15,"column":5,"nodeType":"518","messageId":"519","endLine":15,"endColumn":29},{"ruleId":"516","severity":1,"message":"682","line":5,"column":66,"nodeType":"518","messageId":"519","endLine":5,"endColumn":75},{"ruleId":"516","severity":1,"message":"517","line":4,"column":8,"nodeType":"518","messageId":"519","endLine":4,"endColumn":13},{"ruleId":"516","severity":1,"message":"683","line":18,"column":9,"nodeType":"518","messageId":"519","endLine":18,"endColumn":17},{"ruleId":"516","severity":1,"message":"684","line":25,"column":10,"nodeType":"518","messageId":"519","endLine":25,"endColumn":14},{"ruleId":"540","severity":1,"message":"685","line":30,"column":13,"nodeType":"614","endLine":36,"endColumn":4},{"ruleId":"540","severity":1,"message":"686","line":36,"column":6,"nodeType":"542","endLine":36,"endColumn":8,"suggestions":"687"},{"ruleId":"516","severity":1,"message":"688","line":1,"column":38,"nodeType":"518","messageId":"519","endLine":1,"endColumn":48},{"ruleId":"516","severity":1,"message":"574","line":7,"column":37,"nodeType":"518","messageId":"519","endLine":7,"endColumn":42},{"ruleId":"516","severity":1,"message":"689","line":37,"column":22,"nodeType":"518","messageId":"519","endLine":37,"endColumn":35},{"ruleId":"540","severity":1,"message":"690","line":85,"column":6,"nodeType":"542","endLine":85,"endColumn":28,"suggestions":"691"},{"ruleId":"516","severity":1,"message":"692","line":4,"column":10,"nodeType":"518","messageId":"519","endLine":4,"endColumn":27},{"ruleId":"516","severity":1,"message":"693","line":5,"column":10,"nodeType":"518","messageId":"519","endLine":5,"endColumn":16},{"ruleId":"516","severity":1,"message":"694","line":4,"column":58,"nodeType":"518","messageId":"519","endLine":4,"endColumn":75},{"ruleId":"516","severity":1,"message":"695","line":4,"column":77,"nodeType":"518","messageId":"519","endLine":4,"endColumn":96},{"ruleId":"516","severity":1,"message":"579","line":29,"column":5,"nodeType":"518","messageId":"519","endLine":29,"endColumn":17},{"ruleId":"516","severity":1,"message":"562","line":33,"column":28,"nodeType":"518","messageId":"519","endLine":33,"endColumn":33},{"ruleId":"516","severity":1,"message":"696","line":77,"column":9,"nodeType":"518","messageId":"519","endLine":77,"endColumn":22},{"ruleId":"592","severity":1,"message":"593","line":247,"column":30,"nodeType":"594","messageId":"595","endLine":247,"endColumn":32},{"ruleId":"516","severity":1,"message":"697","line":2,"column":10,"nodeType":"518","messageId":"519","endLine":2,"endColumn":33},{"ruleId":"540","severity":1,"message":"698","line":24,"column":7,"nodeType":"542","endLine":24,"endColumn":9,"suggestions":"699"},{"ruleId":"516","severity":1,"message":"700","line":1,"column":8,"nodeType":"518","messageId":"519","endLine":1,"endColumn":13},{"ruleId":"516","severity":1,"message":"701","line":2,"column":8,"nodeType":"518","messageId":"519","endLine":2,"endColumn":18},{"ruleId":"516","severity":1,"message":"702","line":4,"column":43,"nodeType":"518","messageId":"519","endLine":4,"endColumn":60},{"ruleId":"516","severity":1,"message":"703","line":5,"column":18,"nodeType":"518","messageId":"519","endLine":5,"endColumn":22},{"ruleId":"516","severity":1,"message":"648","line":5,"column":24,"nodeType":"518","messageId":"519","endLine":5,"endColumn":28},{"ruleId":"516","severity":1,"message":"670","line":5,"column":30,"nodeType":"518","messageId":"519","endLine":5,"endColumn":35},{"ruleId":"516","severity":1,"message":"574","line":5,"column":37,"nodeType":"518","messageId":"519","endLine":5,"endColumn":42},{"ruleId":"516","severity":1,"message":"704","line":54,"column":17,"nodeType":"518","messageId":"519","endLine":54,"endColumn":29},{"ruleId":"516","severity":1,"message":"705","line":14,"column":10,"nodeType":"518","messageId":"519","endLine":14,"endColumn":21},{"ruleId":"516","severity":1,"message":"706","line":17,"column":10,"nodeType":"518","messageId":"519","endLine":17,"endColumn":20},{"ruleId":"516","severity":1,"message":"562","line":30,"column":27,"nodeType":"518","messageId":"519","endLine":30,"endColumn":32},{"ruleId":"612","severity":1,"message":"707","line":39,"column":21,"nodeType":"614","messageId":"708","endLine":39,"endColumn":23},{"ruleId":"709","severity":1,"message":"710","line":267,"column":18,"nodeType":"518","messageId":"711","endLine":267,"endColumn":21},{"ruleId":"712","severity":1,"message":"713","line":131,"column":9,"nodeType":"714","messageId":"715","endLine":131,"endColumn":39},{"ruleId":"516","severity":1,"message":"716","line":1,"column":27,"nodeType":"518","messageId":"519","endLine":1,"endColumn":36},{"ruleId":"516","severity":1,"message":"701","line":2,"column":8,"nodeType":"518","messageId":"519","endLine":2,"endColumn":18},{"ruleId":"516","severity":1,"message":"574","line":4,"column":37,"nodeType":"518","messageId":"519","endLine":4,"endColumn":42},"no-native-reassign",["717"],"no-negated-in-lhs",["718"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'PrivateKey' is defined but never used.","'Signature' is defined but never used.","'getCryptosChange' is defined but never used.","'loginRequest' is defined but never used.","'getUserData' is defined but never used.","'getLastLocation' is defined but never used.","'logoNavbar' is defined but never used.","'logoDefalt' is defined but never used.","'setAccessToken' is defined but never used.","'isLoginSelector' is defined but never used.","'tokenState' is assigned a value but never used.","'demoState' is assigned a value but never used.","'meta1State' is assigned a value but never used.","'traderState' is assigned a value but never used.","'checkPasswordObjState' is assigned a value but never used.","'senderApiState' is assigned a value but never used.","'setAccount' is assigned a value but never used.","'password' is assigned a value but never used.","'setOrders' is assigned a value but never used.","'tokenModalMsg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'onLogin'. Either include them or remove the dependency array.","ArrayExpression",["719"],"React Hook useEffect has missing dependencies: 'dispatch', 'fromSignUp', and 'onLogin'. Either include them or remove the dependency array.",["720"],"'loc' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'crypt', 'dispatch', and 'userDataState?.message?.currency'. Either include them or remove the dependency array.",["721"],"React Hook useEffect has missing dependencies: 'dispatch' and 'errorMsgState'. Either include them or remove the dependency array.",["722"],"React Hook useEffect has a missing dependency: 'accountNameState'. Either include it or remove the dependency array.",["723"],"React Hook useEffect has missing dependencies: 'dispatch' and 'metaUrl'. Either include them or remove the dependency array.",["724"],"'chngLastLocation' is defined but never used.","'getAsset' is defined but never used.","'getFullName' is defined but never used.","'removeExponent' is defined but never used.","'InputLabel' is defined but never used.","'assets' is assigned a value but never used.","'account' is assigned a value but never used.","'error' is assigned a value but never used.","'readyToCreate' is assigned a value but never used.","'accountChecked' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'portfolioReceiverState'. Either include it or remove the dependency array.",["725"],"'getPrivateKey' is assigned a value but never used.","'WidgetOnRamper' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Image' is defined but never used.","'Label' is defined but never used.","'Popup' is defined but never used.","'saveUserCurrency' is defined but never used.","'setUserCurrencyAction' is defined but never used.","'isSet' is assigned a value but never used.","'getAvatarFromBack' is assigned a value but never used.","'userCurrency' is assigned a value but never used.","'setUserCurrency' is assigned a value but never used.","'setTokenModalMsg' is assigned a value but never used.","'setTokenModalOpen' is assigned a value but never used.","'checkPasswordState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accountNameState', 'dispatch', and 'isRemoveBtn'. Either include them or remove the dependency array.",["726"],"'user' is defined but never used.","'onClickPaperWalletHandler' is assigned a value but never used.","'onClickOrderTableHandler' is assigned a value but never used.","'accountName' is assigned a value but never used.","'setFullPorfolio' is assigned a value but never used.","'check' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'currencyValue' and 'totalSum'. Either include them or remove the dependency array.",["727"],"'chosen' is assigned a value but never used.","'crypto' is assigned a value but never used.","'checkPasswordObjSelector' is defined but never used.","'metaUrl' is assigned a value but never used.","'setPortfolio' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'performTradeSubmit'. Either include them or remove the dependency array.",["728"],"React Hook useEffect has missing dependencies: 'clickedInputs', 'portfolio', and 'userCurrencyState'. Either include them or remove the dependency array.",["729"],"React Hook useEffect has missing dependencies: 'asset', 'assets', 'options', 'selectedFrom.value', and 'selectedTo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedFrom' needs the current value of 'selectedFrom.value'.",["730"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'handleCalculateSelectedFrom' and 'handleCalculateSelectedTo'. Either include them or remove the dependency array.",["731"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'authData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isSignatureProcessing'. Either include it or remove the dependency array.",["732"],"'Icon' is defined but never used.","'Header' is defined but never used.","'helpSendTo' is defined but never used.","'helpAmount' is defined but never used.","'helpMax1' is defined but never used.","'helpSwap' is defined but never used.","'pre' is assigned a value but never used.","'chosenCrypt' is assigned a value but never used.","'setChosenCrypt' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'accountIsLoading' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'performTransferSubmit'. Either include them or remove the dependency array.",["733"],"React Hook useEffect has a missing dependency: 'newOptions'. Either include it or remove the dependency array.",["734"],"React Hook useEffect has missing dependencies: 'balance' and 'clickedInputs'. Either include them or remove the dependency array.",["735"],"'setSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'balance', 'clickedInputs', 'portfolioReceiverState', 'receiver', and 'sender'. Either include them or remove the dependency array.",["736"],"'asset' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'portfolio'. Either include it or remove the dependency array.",["737"],"'PasswordForm' is assigned a value but never used.","'ariaLabel' is assigned a value but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has a missing dependency: 'fetcher'. Either include it or remove the dependency array.",["738"],"'CopyToClipboard' is defined but never used.","'setIsLoading' is assigned a value but never used.","'clickedInputs' is assigned a value but never used.","'isValidCurrency' is assigned a value but never used.","'setIsValidCurrency' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'asset', 'assets', 'options', and 'selectedFrom.value'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedFrom' needs the current value of 'selectedFrom.value'.",["739"],"React Hook useEffect has missing dependencies: 'selectedFrom' and 'userCurrencyState'. Either include them or remove the dependency array.",["740"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["741"],"'Meta1' is defined but never used.","'op_type' is assigned a value but never used.","'qrRightPos' is assigned a value but never used.","'textWidth' is assigned a value but never used.","'logoHeight' is assigned a value but never used.","'logoPositionX' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.",["742"],"'Input' is defined but never used.","'removeAccessToken' is defined but never used.","'removeLoginDetail' is defined but never used.","'setLocation' is defined but never used.","'validateSignature' is defined but never used.","'openModal' is assigned a value but never used.","'setOpenModal' is assigned a value but never used.","'openVideoModal' is assigned a value but never used.","'setOpenVideoModal' is assigned a value but never used.",["743"],"'ModalWalletInstructions' is assigned a value but never used.","'VideoModal' is assigned a value but never used.","'portfolio' is assigned a value but never used.","'isMobile' is assigned a value but never used.","'paid' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'props.email'. Either include it or remove the dependency array.",["744"],"'useContext' is defined but never used.","'setPhoneError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isVowelsNotExistAndHasNumber'. Either include it or remove the dependency array.",["745"],"'checkTokenRequest' is defined but never used.","'Avatar' is defined but never used.","'meta1ConnectError' is defined but never used.","'meta1ConnectSuccess' is defined but never used.","'currencyValue' is assigned a value but never used.","'generateKeyFromPassword' is defined but never used.","React Hook useEffect has a missing dependency: 'trx'. Either include it or remove the dependency array.",["746"],"'React' is defined but never used.","'MetaLoader' is defined but never used.","'getUserKycProfile' is defined but never used.","'Form' is defined but never used.","'add_response' is assigned a value but never used.","'useDispatch' is defined but never used.","'ChainStore' is defined but never used.","Array.prototype.sort() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-redeclare","'key' is already defined.","redeclared","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"747","fix":"748"},{"desc":"749","fix":"750"},{"desc":"751","fix":"752"},{"desc":"753","fix":"754"},{"desc":"755","fix":"756"},{"desc":"757","fix":"758"},{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"763","fix":"764"},{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},{"desc":"769","fix":"770"},{"desc":"771","fix":"772"},{"desc":"773","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},{"desc":"785","fix":"786"},{"desc":"787","fix":"788"},{"desc":"789","fix":"790"},{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},"Update the dependencies array to be: [login, onLogin]",{"range":"803","text":"804"},"Update the dependencies array to be: [accountNameState, dispatch, fromSignUp, loginErrorState, onLogin]",{"range":"805","text":"806"},"Update the dependencies array to be: [crypt, cryptoDataState, dispatch, userDataState?.message?.currency]",{"range":"807","text":"808"},"Update the dependencies array to be: [userDataState, isTokenValidState, errorMsgState, dispatch]",{"range":"809","text":"810"},"Update the dependencies array to be: [portfolioReceiverState, portfolio, accountName, refreshData, accountNameState]",{"range":"811","text":"812"},"Update the dependencies array to be: [accountNameState, dispatch, metaUrl]",{"range":"813","text":"814"},"Update the dependencies array to be: [debouncedAccount, account, portfolioReceiverState]",{"range":"815","text":"816"},"Update the dependencies array to be: [accountNameState, dispatch, isRemoveBtn, isValidPasswordKeyState, passwordKeyErrorState]",{"range":"817","text":"818"},"Update the dependencies array to be: [portfolio, data, totalSum, currencyValue]",{"range":"819","text":"820"},"Update the dependencies array to be: [dispatch, isValidPasswordKeyState, passwordKeyErrorState, performTradeSubmit]",{"range":"821","text":"822"},"Update the dependencies array to be: [selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrencyState]",{"range":"823","text":"824"},"Update the dependencies array to be: [asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",{"range":"825","text":"826"},"Update the dependencies array to be: [handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",{"range":"827","text":"828"},"Update the dependencies array to be: [isSignatureProcessing]",{"range":"829","text":"830"},"Update the dependencies array to be: [dispatch, isValidPasswordKeyState, passwordKeyErrorState, performTransferSubmit]",{"range":"831","text":"832"},"Update the dependencies array to be: [newOptions, receiver]",{"range":"833","text":"834"},"Update the dependencies array to be: [amount, balance, clickedInputs, receiver]",{"range":"835","text":"836"},"Update the dependencies array to be: [debouncedAccount, amount, clickedInputs, balance, portfolioReceiverState, receiver, sender]",{"range":"837","text":"838"},"Update the dependencies array to be: [assetCh, assets, portfolio]",{"range":"839","text":"840"},"Update the dependencies array to be: [asset, fetcher, refreshData]",{"range":"841","text":"842"},"Update the dependencies array to be: [asset, assets, options, props.assets, props.portfolio, selectedFrom.value]",{"range":"843","text":"844"},"Update the dependencies array to be: [selectedFromAmount, blockPrice, selectedFrom, userCurrencyState]",{"range":"845","text":"846"},"Update the dependencies array to be: [dispatch, sendEmailState]",{"range":"847","text":"848"},"Update the dependencies array to be: [delay, value]",{"range":"849","text":"850"},"Update the dependencies array to be: [signatureErrorState, isSignatureValidState, dispatch]",{"range":"851","text":"852"},"Update the dependencies array to be: [props.email]",{"range":"853","text":"854"},"Update the dependencies array to be: [debouncedAccountName, isVowelsNotExistAndHasNumber]",{"range":"855","text":"856"},"Update the dependencies array to be: [trx]",{"range":"857","text":"858"},[5417,5419],"[login, onLogin]",[6925,6960],"[accountNameState, dispatch, fromSignUp, loginErrorState, onLogin]",[7627,7644],"[crypt, cryptoDataState, dispatch, userDataState?.message?.currency]",[7869,7903],"[userDataState, isTokenValidState, errorMsgState, dispatch]",[8722,8784],"[portfolioReceiverState, portfolio, accountName, refreshData, accountNameState]",[10545,10563],"[accountNameState, dispatch, metaUrl]",[1522,1549],"[debouncedAccount, account, portfolioReceiverState]",[2637,2685],"[accountNameState, dispatch, isRemoveBtn, isValidPasswordKeyState, passwordKeyErrorState]",[3667,3684],"[portfolio, data, totalSum, currencyValue]",[3189,3237],"[dispatch, isValidPasswordKeyState, passwordKeyErrorState, performTradeSubmit]",[5034,5066],"[selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrencyState]",[6252,6283],"[asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",[8860,8898],"[handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",[1636,1638],"[isSignatureProcessing]",[4248,4296],"[dispatch, isValidPasswordKeyState, passwordKeyErrorState, performTransferSubmit]",[5556,5566],"[newOptions, receiver]",[6134,6152],"[amount, balance, clickedInputs, receiver]",[8861,8887],"[debouncedAccount, amount, clickedInputs, balance, portfolioReceiverState, receiver, sender]",[9820,9837],"[assetCh, assets, portfolio]",[1294,1314],"[asset, fetcher, refreshData]",[3313,3344],"[asset, assets, options, props.assets, props.portfolio, selectedFrom.value]",[3986,4018],"[selectedFromAmount, blockPrice, selectedFrom, userCurrencyState]",[7155,7171],"[dispatch, sendEmailState]",[402,409],"[delay, value]",[2292,2336],"[signatureErrorState, isSignatureValidState, dispatch]",[1143,1145],"[props.email]",[2886,2908],"[debouncedAccountName, isVowelsNotExistAndHasNumber]",[769,771],"[trx]"]