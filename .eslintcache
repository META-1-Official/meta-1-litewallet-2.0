[{"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/index.js":"1","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/App.js":"2","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js":"3","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/SendWithPassword.js":"4","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/Portfolio.js":"5","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js":"6","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/API/API.js":"7","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js":"8","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Settings/Settings.js":"9","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js":"10","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Footer/Footer.js":"11","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js":"12","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js":"13","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js":"14","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/UI/loader/Loader.js":"15","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/index.js":"16","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SendForm/index.js":"17","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js":"18","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/index.js":"19","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/DepositForm/index.js":"20","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchHistory.js":"21","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js":"22","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js":"23","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js":"24","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/useDebounce.js":"25","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js":"26","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx":"27","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js":"28","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js":"29","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js":"30","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js":"31","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js":"32","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js":"33","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js":"34","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/config/help.js":"35","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js":"36","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/AccountApi.js":"37","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/WithdrawForm/index.js":"38","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/account_utils.js":"39","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/trxHelper.js":"40","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/utils.js":"41","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/scamAccounts.js":"42","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/asset_utils.js":"43","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/MarketClasses.js":"44"},{"size":538,"mtime":1648107434556,"results":"45","hashOfConfig":"46"},{"size":26039,"mtime":1648867429349,"results":"47","hashOfConfig":"46"},{"size":609,"mtime":1648107434557,"results":"48","hashOfConfig":"46"},{"size":709,"mtime":1648107434556,"results":"49","hashOfConfig":"46"},{"size":2386,"mtime":1648107434556,"results":"50","hashOfConfig":"46"},{"size":798,"mtime":1648107434556,"results":"51","hashOfConfig":"46"},{"size":1278,"mtime":1648198941813,"results":"52","hashOfConfig":"46"},{"size":6717,"mtime":1648826984684,"results":"53","hashOfConfig":"46"},{"size":10408,"mtime":1648794786969,"results":"54","hashOfConfig":"46"},{"size":4471,"mtime":1648794786970,"results":"55","hashOfConfig":"46"},{"size":16346,"mtime":1648825321992,"results":"56","hashOfConfig":"46"},{"size":3679,"mtime":1648107434541,"results":"57","hashOfConfig":"46"},{"size":4926,"mtime":1648794786969,"results":"58","hashOfConfig":"46"},{"size":7329,"mtime":1648107434540,"results":"59","hashOfConfig":"46"},{"size":1348,"mtime":1648107434538,"results":"60","hashOfConfig":"46"},{"size":12492,"mtime":1648867315742,"results":"61","hashOfConfig":"46"},{"size":22459,"mtime":1648794786969,"results":"62","hashOfConfig":"46"},{"size":33225,"mtime":1648794786967,"results":"63","hashOfConfig":"46"},{"size":3554,"mtime":1648198941816,"results":"64","hashOfConfig":"46"},{"size":3999,"mtime":1648107434538,"results":"65","hashOfConfig":"46"},{"size":2434,"mtime":1648794786970,"results":"66","hashOfConfig":"46"},{"size":2226,"mtime":1648107434544,"results":"67","hashOfConfig":"46"},{"size":546,"mtime":1648794786968,"results":"68","hashOfConfig":"46"},{"size":4261,"mtime":1648198941816,"results":"69","hashOfConfig":"46"},{"size":2141,"mtime":1648107434557,"results":"70","hashOfConfig":"46"},{"size":4021,"mtime":1648107434541,"results":"71","hashOfConfig":"46"},{"size":9247,"mtime":1648825321992,"results":"72","hashOfConfig":"46"},{"size":2698,"mtime":1648107434542,"results":"73","hashOfConfig":"46"},{"size":6449,"mtime":1648794786968,"results":"74","hashOfConfig":"46"},{"size":2111,"mtime":1648107434539,"results":"75","hashOfConfig":"46"},{"size":9794,"mtime":1648112964355,"results":"76","hashOfConfig":"46"},{"size":3308,"mtime":1648107434543,"results":"77","hashOfConfig":"46"},{"size":8332,"mtime":1648867391410,"results":"78","hashOfConfig":"46"},{"size":464,"mtime":1648107434545,"results":"79","hashOfConfig":"46"},{"size":1293,"mtime":1648107434545,"results":"80","hashOfConfig":"46"},{"size":3631,"mtime":1648825321993,"results":"81","hashOfConfig":"46"},{"size":526,"mtime":1648107434556,"results":"82","hashOfConfig":"46"},{"size":2018,"mtime":1648870824512,"results":"83","hashOfConfig":"46"},{"size":3873,"mtime":1648869450309,"results":"84","hashOfConfig":"46"},{"size":12052,"mtime":1648870187284,"results":"85","hashOfConfig":"46"},{"size":14130,"mtime":1648869888388,"results":"86","hashOfConfig":"46"},{"size":22020,"mtime":1648870156654,"results":"87","hashOfConfig":"46"},{"size":4341,"mtime":1648869732198,"results":"88","hashOfConfig":"46"},{"size":41990,"mtime":1648870156671,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1veouaz",{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"92"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"92"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"92"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/index.js",[],["196","197"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/App.js",["198","199","200","201","202","203","204","205","206"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/SendWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/Portfolio.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/API/API.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js",["207","208"],"import React from \"react\";\nimport styles from \"./Navbar.module.scss\";\nimport \"./styles.css\";\nimport logo from \"../../images/Logo.png\";\nimport LeftPanelAdapt from \"../LeftPanelAdapt/LeftPanelAdapt\";\nimport WidgetOnRamper from \"./WidgetOnRamper\";\n\nconst Navbar = (props) => {\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name,\n    userIcon,\n    userIconDefault,\n  } = props;\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  return (\n    <>\n      <div\n        className=\"modal fade\"\n        id=\"fund\"\n        tabIndex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\n          <div className=\"modal-content\">\n            <div className={\"modal-body onramper-wallet\"}>\n              <button\n                style={{ margin: \"0 0 0 97%\" }}\n                type=\"button\"\n                className=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              />\n              <iframe\n                src=\"https://widget.onramper.com/?color=ffc000&amp;defaultAmount=1000&amp;defaultFiat=USD&amp;defaultCrypto=BTC&amp;apiKey=pk_prod_k6LKERIMdGDE8geCxOApKSCy6mnfF5CuhI4TLZj55Wc0\"\n                title=\"myFrame\"\n                style={{ border: \"0\" }}\n                allowFullScreen=\"\"\n                aria-hidden=\"false\"\n                tabIndex=\"0\"\n                width=\"100%\"\n                height=\"600\"\n                frameBorder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <nav\n        className={\n          styles.navbar + \" navbar navbar-expand-lg navbar-dark bg-dark\"\n        }\n      >\n        <div className=\"container-fluid\">\n          <img\n            className={styles.img}\n            onClick={() => {\n              window.open(\"https://meta1.vision\");\n            }}\n            style={{ cursor: \"pointer\" }}\n            src={logo}\n            alt=\"logo\"\n          />\n          {isMobile && portfolio ? (\n            <div className={styles.mobileName}>\n              <p>\n                <strong>Hello, {name}</strong>\n              </p>\n            </div>\n          ) : null}\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <div className={\"navbar-nav me-auto\"} />\n            <div className=\"d-flex\">\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <div className={styles.blockhelp}>\n                  <i\n                    className=\"far fa-question-circle\"\n                    style={{ marginRight: \".2rem\" }}\n                  />\n                  <span\n                    onClick={() => {\n                      window.open(\"https://support.meta1.vision\");\n                    }}\n                  >\n                    Get help\n                  </span>\n                </div>\n                <button\n                  className={\n                    name && portfolio ? styles.btn : styles.btnDisabled\n                  }\n                  disabled={!name && !portfolio}\n                  data-bs-toggle=\"modal\"\n                  data-bs-target=\"#fund\"\n                >\n                  Fund Account\n                </button>\n                <div className={styles.line + styles.adaptNeed} />\n                <div\n                  className={styles.adaptNeed}\n                  style={{\n                    marginRight: \"1rem\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <div className=\"nav-item dropdown\">\n                    <a\n                      className=\"nav-link dropdown-toggle\"\n                      href=\"#\"\n                      id=\"navbarScrollingDropdown\"\n                      role=\"button\"\n                      data-bs-toggle=\"dropdown\"\n                      aria-expanded=\"false\"\n                    >\n                      <div\n                        className={\"imgUser\"}\n                        style={{ marginLeft: \".3rem\" }}\n                      >\n                        <img\n                          className={styles.userImg}\n                          id=\"avatarNavbar\"\n                          src={userIcon}\n                          alt=\"user\"\n                        />\n                      </div>\n                    </a>\n                    {name && portfolio ? (\n                      <ul\n                        className=\"dropdown-menu\"\n                        aria-labelledby=\"navbarScrollingDropdown\"\n                        style={{ marginLeft: \"-4rem\", width: \"8rem\" }}\n                      >\n                        <li>\n                          <p\n                            className=\"dropdown-item\"\n                            style={{ textAlign: \"center\" }}\n                            onClick={() => {\n                              localStorage.removeItem(\"login\");\n                              sessionStorage.setItem(\"location\", \"wallet\");\n                              window.location.reload();\n                            }}\n                          >\n                            Log Out\n                          </p>\n                        </li>\n                      </ul>\n                    ) : null}\n                  </div>\n                </div>\n              </div>\n            </div>\n            {isMobile ? (\n              <LeftPanelAdapt\n                onClickHomeHandler={onClickHomeHandler}\n                onClickPortfolioHandler={onClickPortfolioHandler}\n                onClickExchangeHandler={onClickExchangeHandler}\n                onClickPaperWalletHandler={onClickPaperWalletHandler}\n                onClickOrderTableHandler={onClickOrderTableHandler}\n                onClickSettingsHandler={onClickSettingsHandler}\n                onClickHistoryHandler={onClickHistoryHandler}\n                portfolio={portfolio}\n                name={name}\n                userIcon={userIconDefault}\n              />\n            ) : null}\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Settings/Settings.js",["209"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"./Settings.module.scss\";\nimport axios from \"axios\";\nimport RightSideHelpMenuThirdType from \"../RightSideHelpMenuThirdType/RightSideHelpMenuThirdType\";\nimport env from \"react-dotenv\";\nimport { Modal, Button } from \"semantic-ui-react\";\nimport { saveUserCurrency, deleteAvatar } from \"../../API/API\";\nimport logoNavbar from \"../../images/default-pic2.png\";\nimport logoDefalt from \"../../images/default-pic1.png\";\n\nconst Settings = (props) => {\n  const {\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    account,\n    cryptoData,\n    userIcon,\n    getAvatarFromBack,\n    userCurrency,\n    setUserCurrency,\n    setUserImageDefault,\n    setUserImageNavbar,\n  } = props;\n\n  const [currency, setCurrency] = useState(userCurrency);\n  const [modalOpened, setModalOpened] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      document.getElementById(\"mainBlock\").style.height = \"auto\";\n    }, 50);\n  }, []);\n\n  const changeCurrencyHandler = async (e) => {\n    e.preventDefault();\n    await saveUserCurrency(\n      localStorage.getItem(\"login\"),\n      currency.split(\" \")[1]\n    );\n    setUserCurrency(currency);\n    setModalOpened(true);\n  };\n\n  async function removePhoto() {\n    await deleteAvatar(localStorage.getItem(\"login\"));\n    setUserImageDefault(logoDefalt);\n    setUserImageNavbar(logoNavbar);\n  }\n\n  async function uploadFile(e) {\n    e.preventDefault();\n    if (e.target?.files[0]?.name) {\n      let type = e.target?.files[0]?.name.split(\".\")[1];\n      if (type === \"png\" || type === \"jpeg\" || type === \"jpg\") {\n        if (\n          e.target?.files[0]?.size > 70000 &&\n          e.target?.files[0]?.size < 1000000\n        ) {\n          const formData = new FormData();\n          formData.append(\"login\", account);\n          formData.append(\n            \"file\",\n            document.getElementById(\"file_upload\")?.files[0]\n          );\n          const { data } = await axios.post(\n            `https://${env.BACK_URL_DEV}/saveAvatar`,\n            formData,\n            {\n              headers: {\n                \"Content-Type\": \"multipart/form-data\",\n              },\n            }\n          );\n          setUserImageDefault(\n            `https://${env.BACK_URL_DEV}/public/${data.message}`\n          );\n          setUserImageNavbar(\n            `https://${env.BACK_URL_DEV}/public/${data.message}`\n          );\n        } else {\n          alert(\"Invalid file size\");\n        }\n      } else {\n        alert(\"Invalid file format\");\n      }\n    } else {\n      alert(\"Please select a file\");\n    }\n    document.getElementById(\"file_upload\").value = \"\";\n  }\n\n  return (\n    <>\n      <Modal\n        size=\"mini\"\n        open={modalOpened}\n        onClose={() => {\n          setModalOpened(false);\n        }}\n        id={\"modalExch\"}\n      >\n        <Modal.Header>Currency change</Modal.Header>\n        <Modal.Content style={{ height: \"55%\" }}>\n          <div\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <h3 style={{ textAlign: \"center\" }}>\n              You have successfully changed the currency to{\" \"}\n              {currency.split(\" \")[0]}\n            </h3>\n          </div>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n            onClick={() => {\n              setModalOpened(false);\n            }}\n          >\n            OK\n          </Button>\n        </Modal.Actions>\n      </Modal>\n      <div>\n        <div style={{ background: \"#fff\", padding: \"1.05rem 2rem\" }}>\n          <h3 style={{ fontWeight: \"600\" }}>\n            <strong>Account Settings</strong>\n          </h3>\n        </div>\n        <div className={styles.adaptNeed}>\n          <div className={styles.mainBlockAdapt} style={{ width: \"70%\" }}>\n            <div className={styles.mainBlock}>\n              <div className={styles.mainHeader}>\n                <h3 style={{ fontWeight: \"700\" }}>Edit Profile</h3>\n              </div>\n              <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n              <div className={styles.changeDataBlock}>\n                <div className={styles.imgChangeBlock}>\n                  <div className={styles.userNewImgBlock}>\n                    <img\n                      src={userIcon}\n                      id=\"imageUser\"\n                      style={{\n                        width: \"140px\",\n                        height: \"140px\",\n                        borderRadius: \"100px\",\n                      }}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className={styles.extraInfoBlock}>\n                    <div style={{ fontFamily: \"Poppins, sans-serif\" }}>\n                      <h4 style={{ margin: \"0\" }}>Upload a Photo</h4>\n                      <div className={styles.buttonAdapt}>\n                        <div\n                          className={styles.blockForUpload}\n                          style={{ position: \"relative\" }}\n                        >\n                          <p className={styles.pUpload}>Choose a File</p>\n                          <input\n                            type=\"file\"\n                            id=\"file_upload\"\n                            onChange={(e) => {\n                              uploadFile(e);\n                            }}\n                            className={styles.uploadButton}\n                          />\n                        </div>\n                        <button\n                          className={styles.Button}\n                          style={{ marginLeft: \"1rem\" }}\n                          onClick={removePhoto}\n                        >\n                          Remove the Photo\n                        </button>\n                      </div>\n                    </div>\n                    <div className={styles.extraText}>\n                      <span>Acceptable formates: jpg, png only</span>\n                      <span>\n                        Maximum file size is 1mb and minimum size 70kb\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n                <div className={styles.extraInfoChangeBlock}>\n                  <h3 style={{ fontWeight: \"400\", margin: \"0 0 .3rem 0\" }}>\n                    Account Profile\n                  </h3>\n                  <span>\n                    You can update an login wallet associated with your account\n                    using the form below.\n                  </span>\n                </div>\n                <form className={styles.changeDataForm}>\n                  <div className={styles.changeDataInput}>\n                    <label\n                      style={{\n                        color: \"rgb(90, 103, 118)!important\",\n                        margin: \".5rem 0\",\n                      }}\n                      htmlFor=\"email\"\n                    >\n                      Login<span style={{ color: \"red\" }}>*</span>\n                    </label>\n                    <input\n                      type={\"text\"}\n                      className={styles.input}\n                      placeholder={account}\n                      name={\"login\"}\n                      disabled\n                    />\n                  </div>\n                  <div className={styles.blockButton}>\n                    <button\n                      type={\"submit\"}\n                      style={{ width: \"10rem\", marginBottom: \"2rem\" }}\n                      className={styles.Button + \" \" + styles.disabled}\n                      disabled\n                    >\n                      Update\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <div className={styles.changeCurrencyBlock}>\n              <div className={styles.changeCurrencyHeader}>\n                <h3>Currency Preference</h3>\n              </div>\n              <hr style={{ color: \"rgba(80, 83, 97, 0.47)\" }} />\n              <form\n                onSubmit={changeCurrencyHandler}\n                className={styles.changeCurrencyForm}\n              >\n                <div\n                  style={{ margin: \"0 0 1rem 0\", color: \"rgb(90, 103, 118)\" }}\n                >\n                  <span>\n                    Select your preferred display currency for all markets.\n                  </span>\n                </div>\n                <div className={styles.changeDataInput}>\n                  <select\n                    className={styles.currencySelect}\n                    onChange={(e) => setCurrency(e.target.value)}\n                    name=\"currencies\"\n                    id=\"currenciesChoose\"\n                    value={currency}\n                  >\n                    <option value=\"$ USD 1\">$ (USD)</option>\n                    <option value={`€ EUR ${cryptoData.ExchangeRate[0].rate}`}>\n                      € (EUR)\n                    </option>\n                    <option value={`£ GBP ${cryptoData.ExchangeRate[1].rate}`}>\n                      £ (GBP)\n                    </option>\n                    <option value={`₽ RUB ${cryptoData.ExchangeRate[2].rate}`}>\n                      ₽ (RUB)\n                    </option>\n                    <option\n                      value={`CA$ CAD ${cryptoData.ExchangeRate[3].rate}`}\n                    >\n                      CA$ (CAD)\n                    </option>\n                  </select>\n                </div>\n                <div className={styles.blockButton}>\n                  <button\n                    type={\"submit\"}\n                    style={{ width: \"10rem\" }}\n                    className={styles.Button}\n                  >\n                    Update\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n          <div className={styles.helpBlockAdapt} style={{ width: \"30%\" }}>\n            <RightSideHelpMenuThirdType\n              onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n              onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Settings;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js",["210","211","212","213"],"import { useQuery } from \"react-query\";\nimport Meta1 from \"meta1dex\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport Paper from \"@mui/material/Paper\";\nimport { getAsset, getFullName } from \"./cryptoChooser\";\nimport getHistory from \"../../lib/fetchHistory\";\n\nexport const OrdersTable = (props) => {\n  const { column, direction, assets, account } = props;\n\n  const { data, isLoading, error } = useQuery(\"history\", getHistory, {\n    refetchInterval: 1500,\n  });\n\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.common.black,\n      fontWeight: 600,\n      fontSize: 15,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n      padding: 8,\n      color: \"#240000\",\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    \"&:last-child td, &:last-child th\": {\n      border: 0,\n    },\n  }));\n\n  if (isLoading) return <MetaLoader size={\"small\"} />;\n\n  return (\n    <>\n      <TableContainer style={{ overflow: \"auto\" }} component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow style={{ display: \"table-row\" }}>\n              <StyledTableCell\n                sorted={column === \"id\" ? direction : null}\n                onClick={() => {}}\n                align=\"left\"\n              >\n                Assets\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">Type</StyledTableCell>\n              <StyledTableCell align=\"center\">\n                Sender / Receiver\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">Volume</StyledTableCell>\n              <StyledTableCell align=\"left\">Status</StyledTableCell>\n              <StyledTableCell align=\"left\">Time</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.map((el, index) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell\n                  component=\"th\"\n                  style={{ width: \"20%\" }}\n                  scope=\"row\"\n                >\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                    }}\n                  >\n                    {getAsset(el.asset.abbr)}\n                    <div style={{ marginLeft: \".5rem\" }}>\n                      <p style={{ margin: 0, fontSize: \"1rem\" }}>\n                        {el.asset.abbr}\n                      </p>\n                      <p style={{ margin: 0, fontSize: \".7rem\" }}>\n                        {getFullName(el.asset.abbr)}\n                      </p>\n                    </div>\n                  </div>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.type}</h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <h6 style={{ margin: \"0\" }}>{el.usersData}</h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <h6 style={{ margin: \"0\" }}>\n                    <strong>{Number(el.volume)}</strong>\n                  </h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6\n                    style={\n                      el.status === \"Done\"\n                        ? { margin: \"0\", color: \"#00aa08\" }\n                        : { margin: \"0\", color: \"rgb(248, 0, 0)\" }\n                    }\n                  >\n                    {el.status}\n                  </h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.time}</h6>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Footer/Footer.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js",["214","215","216","217"],"/* eslint-disable array-callback-return */\nimport React, { useEffect, useState } from \"react\";\nimport { generateKeyFromPassword } from \"../../lib/createAccountWithPassword\";\nimport { Button, Form, FormField } from \"semantic-ui-react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { PrivateKey } from \"meta1js\";\nimport { createPaperWalletAsPDF } from \"./CreatePdfWallet\";\nimport Meta1 from \"meta1dex\";\nimport \"./style.css\";\n\nexport default function PaperWalletLogin({ portfolioReceiver, accountName }) {\n  const [account, setAccount] = useState(accountName);\n  const [password, setPassword] = useState(\"\");\n  const [readyToCreate, setReadyToCreate] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(true);\n  const [check, setCheck] = useState(false);\n  const debouncedAccount = useDebounce(account, 500);\n  useEffect(() => {\n    if (account?.length > 0) {\n      async function fetchAccount(debouncedAccount) {\n        // Сделать запрос к АП\n        try {\n          await portfolioReceiver.fetch(debouncedAccount);\n          setAccountChecked(true);\n        } catch (e) {\n          setAccountChecked(false);\n        }\n      }\n\n      if (debouncedAccount) {\n        fetchAccount(debouncedAccount);\n      } else {\n        setAccountChecked(false);\n      }\n    }\n  }, [debouncedAccount, account]);\n\n  // getting the privateKey\n  const getPrivateKey = (password) => PrivateKey.fromSeed(password).toWif();\n\n  const handleSubmit = () => {\n    setReadyToCreate(true);\n  };\n\n  // Generate owner, memo and active Key\n  let { privKey: owner_private } = generateKeyFromPassword(\n    account,\n    \"owner\",\n    password\n  );\n  let { privKey: active_private } = generateKeyFromPassword(\n    account,\n    \"active\",\n    password\n  );\n  let { privKey: memo_private } = generateKeyFromPassword(\n    account,\n    \"memo\",\n    password\n  );\n\n  let privateKey = getPrivateKey(password);\n  let ownerKey = owner_private.toPublicKey().toPublicKeyString();\n  let activeKey = active_private.toPublicKey().toPublicKeyString();\n  let memoKey = memo_private.toPublicKey().toPublicKeyString();\n  const handleCreatePaperWallet = async () => {\n    try {\n      await Meta1.login(localStorage.getItem(\"login\"), password);\n      createPaperWalletAsPDF(\n        localStorage.getItem(\"login\"),\n        ownerKey,\n        activeKey,\n        memoKey,\n        privateKey\n      );\n    } catch {\n      setCheck(true);\n    }\n  };\n\n  return (\n    <div className=\"login-width\">\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Login With\n          </label>\n          <input disabled value={\"Account Name (Cloud Wallet)\"} />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Account Name\n          </label>\n          <input\n            value={localStorage.getItem(\"login\") || accountName}\n            disabled\n            placeholder={\"Account Name\"}\n          />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          {check !== false && <p style={{ color: \"red\" }}>Invalid Password</p>}\n        </FormField>\n        <Button\n          color=\"yellow\"\n          type=\"submit\"\n          fluid\n          onClick={handleCreatePaperWallet}\n          disabled={!password}\n        >\n          {\" \"}\n          Create Paper Wallet\n        </Button>\n      </Form>\n    </div>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js",["218"],"import * as React from \"react\";\nimport styles from \"./LeftPanel.module.scss\";\nimport { useEffect } from \"react\";\nimport user from \"../../images/default-pic1.png\";\nimport firstPart from \"../../images/assetsForSidebar/Shape 2.png\";\nimport secondPart from \"../../images/assetsForSidebar/Shape 2 copy.png\";\nimport homeIcon from \"../../images/assetsForSidebar/Shape 5.png\";\n\nconst LeftPanel = (props) => {\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name,\n    activeScreen,\n    userIcon,\n  } = props;\n\n  useEffect(() => {\n    if (name && portfolio) {\n      setTimeout(() => {\n        let allEvents = document.getElementsByClassName(\"event\");\n        for (let i = 0; i < allEvents.length; i++) {\n          allEvents[i].addEventListener(\"mouseover\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"block\";\n          });\n          allEvents[i].addEventListener(\"mouseout\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"none\";\n          });\n        }\n      }, 25);\n    }\n  }, [name, portfolio]);\n\n  return (\n    <ul id={\"mainBlock\"} className={styles.mainBlock + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              src={userIcon}\n              id=\"leftAvatar\"\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <img style={{ padding: \".47rem .5rem\" }} src={homeIcon} alt=\"\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"login\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <div\n        id={\"modalBlock\"}\n        style={{ display: \"none\" }}\n        className={styles.modalBlock + \" event\"}\n      >\n        <div className={styles.modalContent + \" event\"}>\n          <h1 className={\"event\"}>Portfolio</h1>\n          <ul className={\"event\"}>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPortfolioHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Show All Balance\n            </li>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickOrderTableHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Open Orders\n            </li>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPaperWalletHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Paper Wallet\n            </li>\n          </ul>\n        </div>\n      </div>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item event\"\n            : styles.LiDisabled + \" nav-item event\"\n        }\n        onClick={portfolio ? onClickPortfolioHandler : null}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div\n              className={styles.textSpan + \" event\"}\n              style={\n                activeScreen === \"portfolio\" ||\n                activeScreen === \"sendFunds\" ||\n                activeScreen === \"deposit\" ||\n                activeScreen === \"wallet\" ||\n                activeScreen === \"paperWallet\"\n                  ? { color: \"#FFC000\" }\n                  : null\n              }\n            >\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickExchangeHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <div\n              style={{ position: \"relative\", width: \"30px\", height: \"30px\" }}\n            >\n              <img\n                src={firstPart}\n                style={{ position: \"absolute\", top: \"10px\", left: \"6.5px\" }}\n                alt=\"\"\n              />\n              <img\n                src={secondPart}\n                style={{ position: \"absolute\", top: \"14px\", left: \"14.5px\" }}\n                alt=\"\"\n              />\n            </div>\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"exchange\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickHistoryHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"orderTable\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickSettingsHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"settings\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanel;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/UI/loader/Loader.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/index.js",["219","220","221","222","223","224","225","226"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SendForm/index.js",["227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247"],"import MetaLoader from \"../../UI/loader/Loader\";\nimport React, { useState, useEffect } from \"react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport styles from \"./SendForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport { Modal, Icon, Button, Grid, Header, Popup } from \"semantic-ui-react\";\nimport Input from \"@mui/material/Input\";\nimport { helpSendTo, helpAmount, helpMax1, helpSwap } from \"../../config/help\";\nimport \"./style.css\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport Meta1 from \"meta1dex\";\n\nconst FEE = 0.0035;\n\nconst SendForm = React.memo((props) => {\n  const {\n    portfolio,\n    onBackClick,\n    sender,\n    sendApi,\n    asset,\n    onSuccessTransfer,\n    portfolioReceiver,\n    assets,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    userCurrency,\n  } = props;\n  const feeAsset = portfolio.find((asset) => asset.name === \"META1\");\n  const amountHold =\n    portfolio.find((cur) => cur.name === asset).qty == undefined\n      ? 0\n      : portfolio.find((cur) => cur.name === asset).qty;\n  const pre = assets.find((el) => el.symbol === asset).precision;\n  const [chosenCrypt, setChosenCrypt] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [assetCh, setAssetCh] = useState(asset);\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [repeat, setRepeat] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [askForPassword, setAskForPassword] = useState(false);\n  const [inProgress, setInProgress] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(false);\n  const [accountIsLoading, setAccountIsLoading] = useState(false);\n  const debouncedAccount = useDebounce(receiver, 500);\n  const [assetData, setAssetData] = useState({});\n  const [balance, setBalance] = useState(amountHold);\n  const [options, setOptions] = useState([]);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState(0);\n  const [precisionAssets, setPrecisionAssets] = useState();\n  const [password, setPassword] = useState(\"\");\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [feeAlert, setFeeAlert] = useState(false);\n\n  useEffect(() => {\n    async function getData() {\n      if (asset !== \"USDT\" && asset !== \"META1\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        await setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"META1\") {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      } else {\n        setPriceForAsset(1);\n      }\n    }\n    getData();\n  }, [asset]);\n\n  useEffect(() => {\n    function filterPrec() {\n      let preObj = {};\n      for (let i = 0; i < assets.length; i++) {\n        preObj[assets[i].symbol] = assets[i].precision;\n      }\n      setPrecisionAssets(preObj);\n    }\n    filterPrec();\n  }, [assets]);\n\n  useEffect(() => {\n    if (parseFloat(feeAsset?.qty) < FEE && feeAsset) {\n      setError(\"Not enough FEE\");\n    }\n  }, [feeAsset]);\n\n  useEffect(() => {\n    if (receiver.length > 0) {\n      setError(\"\");\n      setAccountIsLoading(true);\n      setAccountChecked(false);\n    }\n    setOptions(newOptions.sort((a, b) => (a.name > b.name ? 1 : -1)));\n  }, [receiver]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      let allInputs = document.getElementsByClassName(\n        \"css-1pw81iq-MuiInputBase-root-MuiFilledInput-root\"\n      );\n      for (let i = 0; i < allInputs.length; i++) {\n        allInputs[i].style.borderRadius = \"8px\";\n      }\n    }, 50);\n  }, []);\n\n  useEffect(() => {\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [amount, receiver]);\n\n  const RedditTextField = React.memo(\n    styled((props) => (\n      <TextField InputProps={{ disableUnderline: true }} {...props} />\n    ))(({ theme }) => ({\n      \"& .MuiFilledInput-root\": {\n        border: \"1px solid #e2e2e1\",\n        overflow: \"hidden\",\n        backgroundColor: theme.palette.mode === \"light\" ? \"#fcfcfb\" : \"#2b2b2b\",\n        borderRadius: \"8px !important\",\n        transition: theme.transitions.create([\n          \"border-color\",\n          \"background-color\",\n          \"box-shadow\",\n        ]),\n        \"&:hover\": {\n          backgroundColor: \"transparent\",\n        },\n        \"&.Mui-focused\": {\n          backgroundColor: \"transparent\",\n          boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n          borderColor: theme.palette.primary.main,\n        },\n      },\n    }))\n  );\n\n  const setSelected = (value) => {\n    setAssetCh(value.value);\n    portfolio.map((el) =>\n      el.name === value.value\n        ? setAssetData({\n            balance: el.qty,\n            image: el.image,\n            label: el.name,\n            value: el.name,\n          })\n        : null\n    );\n  };\n  const calculateUsdPriceHandler = (e) => {\n    let priceForOne = Number(e.target.value) * priceForAsset;\n    setBlockPrice(\n      Number(priceForOne).toFixed(precisionAssets[asset]) *\n        Number(userCurrency.split(\" \")[2])\n    );\n  };\n\n  const newOptions = portfolio.map((asset) => {\n    return {\n      image: asset.image,\n      value: asset.name,\n      label: asset.name,\n      balance: asset.qty || 0,\n    };\n  });\n\n  const calculateCryptoPriceHandler = (e) => {\n    let priceForOne = (\n      Number(e.target.value.split(\"$\")[0]) /\n      priceForAsset /\n      Number(userCurrency.split(\" \")[2])\n    ).toFixed(precisionAssets[asset]);\n    setAmount(priceForOne);\n    setBlockPrice(e.target.value);\n  };\n\n  useEffect(() => {\n    async function fetchAccount(debouncedAccount) {\n      // Сделать запрос к АП\n      try {\n        await portfolioReceiver.fetch(debouncedAccount);\n        setAccountChecked(true);\n        setAccountIsLoading(false);\n        if (receiver === sender) {\n          setError(\"Can't transfer to self\");\n        }\n      } catch (e) {\n        setAccountChecked(false);\n        setAccountIsLoading(false);\n        setError(\"Invalid receiver\");\n      }\n    }\n\n    if (debouncedAccount) {\n      fetchAccount(debouncedAccount);\n    } else {\n      setAccountChecked(false);\n      setAccountIsLoading(false);\n    }\n\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [debouncedAccount, amount]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const performTransfer = async (params) => {\n    let asset = assetCh;\n    setError(null);\n    setInProgress(true);\n    const { password, to, amount, message } = params;\n    const result = await sendApi.perform({\n      password,\n      to,\n      amount,\n      message,\n      asset,\n    });\n    if (result.error) {\n      if (result.error === \"Invalid credentials\") {\n        setError(result.error);\n      } else if ((asset === \"META1\" && feeAsset.qty === amount) || !feeAsset) {\n        setError(\"You don't have enough cryptocurrency to pay FEE\");\n      } else {\n        setError(\"Invalid Receiver\");\n      }\n      setRepeat(true);\n    } else {\n      setModalOpened(true);\n    }\n    setInProgress(false);\n  };\n\n  const setAssetMax = () => {\n    setAmount(assetData.balance);\n    setBlockPrice(\n      Number(assetData.balance * priceForAsset).toFixed(\n        precisionAssets[asset]\n      ) * Number(userCurrency.split(\" \")[2])\n    );\n  };\n\n  useEffect(() => {\n    if (repeat) {\n      setTimeout(() => {\n        setError(null);\n        setRepeat(false);\n      }, 2000);\n    }\n  }, [repeat]);\n\n  useEffect(() => {\n    portfolio.map((el) =>\n      el.name === assetCh\n        ? setAssetData({\n            balance: el.qty,\n            image: el.image,\n            label: el.name,\n            value: el.name,\n          })\n        : null\n    );\n  }, [assetCh, assets]);\n  const PasswordForm = (props) => {\n    const [password, setPassword] = useState(\"\");\n    return (\n      <div class=\"ui large fluid labeled input action\">\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value.trim())}\n        />\n        <Button color=\"yellow\" onClick={(e) => props.onSubmit(password)}>\n          {\" \"}\n          Send{\" \"}\n        </Button>\n      </div>\n    );\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  return (\n    <>\n      <div>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the send of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Send</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"tiny\"\n          id={\"modal\"}\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n          }}\n        >\n          <Modal.Header>Transfer Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={1}>\n                <Grid.Column>\n                  <h3>\n                    {amount} of {assetCh} sent to {receiver}\n                  </h3>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              positive\n              onClick={() => {\n                setModalOpened(false);\n                onSuccessTransfer();\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"justFlexAndDirect\"}>\n          <div className={\"widthh100\"}>\n            <div className={styles.containerMain}>\n              <div className={styles.mainBlock}>\n                <div className={styles.leftBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Send</h2>\n                  <RedditTextField\n                    label=\"From\"\n                    defaultValue={sender}\n                    className={styles.input}\n                    disabled\n                    id=\"reddit-input\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div\n                    className={styles.inputForAmount}\n                    style={{ marginBottom: \"1rem\" }}\n                  >\n                    <span\n                      style={{\n                        fontSize: \".8rem\",\n                        color: \"#505361\",\n                        marginBottom: \".3rem\",\n                      }}\n                    >\n                      Amount {assetData.label}\n                    </span>\n                    <Input\n                      id={\"inputForAmount\"}\n                      type=\"number\"\n                      value={amount ? amount : \"\"}\n                      min=\"0\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          {assetData.label}\n                        </InputAdornment>\n                      }\n                      onChange={(e) => {\n                        const amountOut = e.target.value;\n                        if (\n                          e.target.value.length < 11 &&\n                          /[-+]?[0-9]*\\.?[0-9]*/.test(e.target.value) &&\n                          Number(e.target.value) >= 0\n                        ) {\n                          setClickedInputs(true);\n                          setAmount(amountOut);\n                          calculateUsdPriceHandler(e);\n                        }\n                      }}\n                      placeholder={balance}\n                    />\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        marginTop: \".1rem\",\n                        fontSize: \"1rem\",\n                        color: \"#505361\",\n                      }}\n                    >\n                      <input\n                        type=\"number\"\n                        className={styles.inputDollars}\n                        min=\"0\"\n                        inputmode=\"numeric\"\n                        pattern=\"\\d*\"\n                        onChange={(e) => {\n                          if (Number(e.target.value) >= 0) {\n                            setClickedInputs(true);\n                            calculateCryptoPriceHandler(e);\n                          }\n                        }}\n                        placeholder={`Amount ${userCurrency.split(\" \")[1]}`}\n                        value={amount ? blockPrice : \"\"}\n                      />\n                      <span>{userCurrency.split(\" \")[0]}</span>\n                    </div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        position: \"relative\",\n                      }}\n                    >\n                      <span style={{ color: \"#505361\", paddingTop: \"2rem\" }}>\n                        FEE: 0.00035 META1\n                      </span>\n                      <div\n                        className=\"max-button-new\"\n                        style={{\n                          position: \"absolute\",\n                          right: \"0\",\n                          bottom: \"-3px\",\n                        }}\n                      >\n                        <Popup\n                          content={`Click this button to sell all your ${assetData.label}`}\n                          position={isMobile ? \"bottom left\" : \"bottom center\"}\n                          trigger={\n                            <Button\n                              className={\"btn\"}\n                              secondary\n                              onClick={setAssetMax}\n                              floated=\"right\"\n                              size=\"mini\"\n                            >\n                              MAX\n                            </Button>\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <Grid.Column>\n                    <TextField\n                      InputProps={{ disableUnderline: true }}\n                      label=\"Password\"\n                      className={styles.input}\n                      type={\"password\"}\n                      id=\"reddit-input pass\"\n                      variant=\"filled\"\n                      style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                      value={password}\n                      onChange={({ target }) => setPassword(target.value)}\n                    />\n                  </Grid.Column>\n                </div>\n                <div\n                  style={{\n                    marginTop: \"4rem\",\n                    marginLeft: \".3rem\",\n                    width: \"40px\",\n                    height: \"40px\",\n                    background: \"#fdc000\",\n                    borderRadius: \"40px\",\n                    padding: \".7rem .85rem\",\n                  }}\n                  className=\"text-center-s\"\n                >\n                  <i\n                    style={{ color: \"#fff\" }}\n                    className={\n                      isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                    }\n                  />\n                </div>\n                <div className={styles.rightBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                  <TextField\n                    InputProps={{ disableUnderline: true }}\n                    label=\"To\"\n                    value={receiver}\n                    onChange={(e) => {\n                      setReceiver(e.target.value);\n                    }}\n                    className={styles.input}\n                    id=\"reddit-input receiver\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div className={styles.blockInfoCrypto}>\n                    <img\n                      style={{ width: \"60px\", height: \"60px\" }}\n                      src={assetData.image}\n                      alt=\"cryptImg\"\n                    />\n                    <div className={styles.blockInfoText}>\n                      <span>You will Send {assetData.label} Coin</span>\n                      <h3>\n                        {Number(amount) ? amount : 0} {assetData.label}\n                      </h3>\n                      <span>\n                        {blockPrice || 0} {userCurrency.split(\" \")[1]}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {!askForPassword && !inProgress && (\n                <Grid.Row className={\"buttonSend\"} columns={1}>\n                  <Popup\n                    disabled\n                    trigger={\n                      <button\n                        className={\"btnSend ui button yellow buttSend\"}\n                        style={{\n                          marginLeft: \"2rem\",\n                          marginTop: \"1rem\",\n                          boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, .11)\",\n                        }}\n                        disabled={\n                          !accountChecked ||\n                          amount === \"\" ||\n                          password === \"\" ||\n                          error\n                        }\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (Number(amount) > Number(amountHold)) {\n                            setAskForPassword(false);\n                            setError(`your balance is not enough `);\n                            setRepeat(true);\n                          } else {\n                            let password =\n                              document.getElementById(\n                                \"reddit-input pass\"\n                              ).value;\n                            if (receiver !== \"\" && password !== \"\" && amount) {\n                              if (parseFloat(feeAsset?.qty) < FEE) {\n                                setError(\"Not enough FEE\");\n                              } else {\n                                if (\n                                  assetCh === \"META1\" &&\n                                  Number(amount) === Number(feeAsset.qty)\n                                ) {\n                                  setFeeAlert(true);\n                                } else {\n                                  performTransfer({\n                                    ...{ to: receiver },\n                                    ...{\n                                      password,\n                                      amount,\n                                      assetCh,\n                                      message,\n                                    },\n                                  });\n                                }\n                              }\n                            } else {\n                              setError(\n                                \"You have entered incorrect data, please check it.\"\n                              );\n                            }\n                          }\n                        }}\n                      >\n                        Confirm\n                      </button>\n                    }\n                  />\n                </Grid.Row>\n              )}\n\n              {inProgress && <MetaLoader size={\"small\"} />}\n\n              {error && (\n                <Grid>\n                  <Grid.Row centered>\n                    <h5 style={{ color: \"red\" }}>{error}</h5>\n                  </Grid.Row>\n                </Grid>\n              )}\n            </div>\n          </div>\n          <div className={\"bottomBlockAdapt\"}>\n            <RightSideHelpMenuSecondType\n              onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n              onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default SendForm;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js",["248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"./ExchangeForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport ExchangeSelect from \"./ExchangeSelect.js\";\nimport {\n  Image,\n  Modal,\n  Button,\n  Grid,\n  Icon,\n  Label,\n  Popup,\n} from \"semantic-ui-react\";\nimport { helpInput, helpMax1, helpSwap } from \"../../config/help\";\nimport Input from \"@mui/material/Input\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport \"./ExchangeForm.css\";\nimport Meta1 from \"meta1dex\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport leftArrow from \"../../images/exchangeAssets/Shape Left.png\";\nimport rightArrow from \"../../images/exchangeAssets/Shape 2 copy 2.png\";\n\nexport default function ExchangeForm(props) {\n  const {\n    onSuccessModal,\n    trader,\n    asset,\n    onBackClick,\n    metaUrl,\n    portfolioReceiver,\n    onSuccessTrade,\n    userCurrency,\n  } = props;\n  const [portfolio, setPortfolio] = useState(props.portfolio);\n  const [passwordShouldBeProvided, setPasswordShouldBeProvided] =\n    useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [assets, setAssets] = useState(props.assets);\n  const [options, setOptions] = useState([]);\n  const [selectedFrom, setSelectedFrom] = useState(props.selectedFrom);\n  const [selectedTo, setSelectedTo] = useState(props.selectedTo);\n  const [selectedFromAmount, setSelectedFromAmount] = useState(\"\");\n  const [selectedToAmount, setSelectedToAmount] = useState(0);\n  const [pair, setPair] = useState(null);\n  const [invalidEx, setInvalidEx] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [tradeError, setTradeError] = useState(null);\n  const [tradeInProgress, setTradeInProgress] = useState(false);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState();\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [error, setError] = useState();\n  const [feeAlert, setFeeAlert] = useState(false);\n\n  useEffect(() => {\n    console.log(pair);\n  }, [pair]);\n\n  useEffect(() => {\n    async function getPriceForAsset() {\n      if (asset !== \"META1\" && asset !== \"USDT\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"USDT\") {\n        setPriceForAsset(1);\n      } else {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      }\n    }\n    getPriceForAsset();\n  }, [asset, portfolio]);\n\n  useEffect(() => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    if (Number(selectedFromAmount) <= 0 && clickedInputs) {\n      setError(\n        `The amount must be greater than ${(\n          0.003 * Number(userCurrency.split(\" \")[2])\n        ).toFixed(4)} ${userCurrency.split(\" \")[1]}`\n      );\n    } else {\n      setError(\"\");\n    }\n    if (Number(blockPrice) < 0.003 * Number(userCurrency.split(\" \")[2])) {\n      setError(\n        `The amount must be greater than ${Number(\n          (0.003 * Number(userCurrency.split(\" \")[2])).toFixed(4)\n        )} ${userCurrency.split(\" \")[1]}`\n      );\n      console.log(feeAsset);\n    } else if (feeAsset == undefined) {\n      setError(\"Not enough FEE\");\n    } else {\n      setError(\"\");\n    }\n  }, [selectedFromAmount, blockPrice]);\n\n  useEffect(() => {\n    const currentPortfolio = props.portfolio || [];\n    setAssets(props.assets);\n    const getBalance = (symbol) => {\n      const assetInWallet = currentPortfolio.find((el) => el.name === symbol);\n      if (assetInWallet) {\n        return assetInWallet.qty;\n      } else {\n        return 0;\n      }\n    };\n    const newOptions = assets.map((asset) => {\n      return {\n        image: asset.image,\n        value: asset.symbol,\n        label: asset.symbol,\n        pre: asset.precision,\n        balance: getBalance(asset.symbol) || 0,\n      };\n    });\n\n    setOptions(newOptions);\n    if (selectedTo == null && options !== []) {\n      const from = asset\n        ? newOptions.find((el) => el.value === asset)\n        : newOptions[0];\n      let to = asset\n        ? newOptions.find((el) => el.value === \"META1\")\n        : newOptions[1];\n      if (asset === \"META1\") {\n        to = newOptions.find((el) => el.value === \"USDT\");\n      }\n      setSelectedTo(to);\n      setSelectedFrom(from);\n    } else {\n      setSelectedTo(newOptions.find((o) => o.value === selectedTo.value));\n      setSelectedFrom(newOptions.find((o) => o.value === selectedFrom.value));\n    }\n  }, [props.assets, props.portfolio]);\n\n  useEffect(() => {\n    if (!isMobile) {\n      setTimeout(() => {\n        document.getElementById(\"mainBlock\").style.height = \"92vh\";\n      }, 25);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n  }, [pair]);\n\n  const calculateUsdPriceHandler = (e) => {\n    if (e.target.value.length != 0) {\n      let priceForOne = (Number(e.target.value) * priceForAsset).toFixed(2);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    } else {\n      setBlockPrice(NaN);\n    }\n  };\n\n  const calculateCryptoPriceHandler = (e) => {\n    setBlockPrice(e.target.value);\n    let priceForOne = (\n      Number(e.target.value) /\n      priceForAsset /\n      Number(userCurrency.split(\" \")[2])\n    ).toFixed(selectedFrom.label === \"USDT\" ? 3 : selectedFrom.pre);\n    setSelectedFromAmount(priceForOne);\n  };\n\n  const handleCalculateSelectedTo = () => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedToAmount(NaN);\n      setSelectedFromAmount(NaN);\n      setBlockPrice(NaN);\n      return;\n    }\n    setInvalidEx(false);\n    if (selectedFromAmount !== \"\" && selectedFromAmount) {\n      const amount =\n        (selectedFromAmount / pair.lowest_ask).toString().substr(0, 11) * 1;\n      setSelectedToAmount(amount);\n    } else {\n      setSelectedToAmount(0);\n    }\n  };\n  const handleCalculateSelectedFrom = () => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n    const amount = selectedToAmount * pair.lowest_ask;\n    setSelectedFromAmount(amount);\n  };\n\n  useEffect(() => {\n    if (selectedFromAmount > 0) {\n      setSelectedToAmount(0);\n    }\n    if (selectedFromAmount?.length) {\n      handleCalculateSelectedTo();\n    }\n    if (selectedToAmount?.length) {\n      handleCalculateSelectedFrom();\n    }\n    if (selectedToAmount === \"\") {\n      setSelectedFromAmount(\"\");\n    }\n  }, [selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    setPasswordShouldBeProvided(false);\n  }, [selectedFrom, selectedTo, selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    async function fetchPair(selectedTo, selectedFrom) {\n      if (\n        selectedTo != null &&\n        selectedFrom != null &&\n        selectedFrom.value !== undefined\n      ) {\n        const newPair = await Meta1.ticker(\n          selectedFrom.value,\n          selectedTo.value\n        );\n        setPair(newPair);\n      }\n    }\n    fetchPair(selectedTo, selectedFrom);\n  }, [selectedFrom, selectedTo]);\n\n  const changeAssetHandler = async (val) => {\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      );\n    }\n  };\n\n  const changeAssetHandlerSwap = async (val) => {\n    if (val.label !== \"META1\" && val.label !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val.label}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val.label === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      );\n    }\n  };\n\n  const swapAssets = (e) => {\n    e.preventDefault();\n    const oldFrom = selectedFrom;\n    setSelectedFrom(selectedTo);\n    setSelectedTo(oldFrom);\n  };\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const prepareTrade = () => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    localStorage.setItem(\"selectFrom\", selectedFromAmount);\n    localStorage.setItem(\"selectTo\", selectedToAmount);\n    if (\n      selectedFrom.label === \"META1\" &&\n      Number(selectedFromAmount) === Number(feeAsset.qty)\n    ) {\n      setFeeAlert(true);\n    } else {\n      setPasswordShouldBeProvided(true);\n    }\n  };\n\n  const performTrade = async () => {\n    try {\n      setTradeInProgress(true);\n      setPassword(\"\");\n      setPasswordShouldBeProvided(false);\n\n      const buyResult = await trader.perform({\n        from: selectedFrom.value,\n        to: selectedTo.value.trim(),\n        amount: selectedToAmount,\n        password: password,\n      });\n\n      if (buyResult.error) {\n        setTradeError(buyResult.error);\n      } else {\n        setModalOpened(true);\n      }\n\n      setTradeInProgress(false);\n    } catch (e) {\n      setTradeInProgress(false);\n    }\n  };\n\n  const setAssetMax = (e) => {\n    e.preventDefault();\n    setSelectedFromAmount(selectedFrom.balance);\n    handleCalculateSelectedTo();\n    setTimeout(() => {\n      let priceForOne = (\n        Number(document.getElementById(\"inputAmount\").value) * priceForAsset\n      ).toFixed(3);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    }, 25);\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  // const getAssets = (except) => options.filter((el) => el.value !== except);\n  if (selectedFrom == null && selectedTo == null) return null;\n\n  const getAssets = (except) => options.filter((el) => el.value !== except);\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Exchange</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"mini\"\n          open={tradeError !== null}\n          onClose={() => setTradeError(null)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Error occured</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={2}>\n                <Grid.Column width={4}>\n                  <Icon disabled name=\"warning sign\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column width={10}>\n                  <div className=\"trade-error\">{tradeError}</div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button positive onClick={() => setTradeError(null)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the swap of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n            onSuccessModal();\n            onSuccessTrade();\n          }}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Trade Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={3}>\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedFrom.image} />\n                    <p>\n                      {\" \"}\n                      {(localStorage.getItem(\"selectFrom\") * 1).toFixed(\n                        selectedFrom.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n\n                <Grid.Column width={3}>\n                  <Icon disabled name=\"arrow right\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedTo.image} />\n                    <p>\n                      {(localStorage.getItem(\"selectTo\") * 1).toFixed(\n                        selectedTo.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n              onClick={() => {\n                onSuccessModal();\n                setModalOpened(false);\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"adaptForMainExchange\"}>\n          <div className={styles.mainBlock}>\n            <div className={styles.mainBlockExchange}>\n              <div className={styles.leftBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Exchange</h2>\n                <div id=\"from\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedFrom(val);\n                            changeAssetHandler(val.value);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedTo.value)}\n                          selectedValue={selectedFrom}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            content={helpInput(\n                              selectedFrom?.value,\n                              selectedTo?.value\n                            )}\n                            position=\"bottom center\"\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  placeholder=\"Amount crypto\"\n                                  value={selectedFromAmount}\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    console.log(e);\n                                    if (\n                                      e.target.value.length < 11 &&\n                                      /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                        e.target.value\n                                      ) &&\n                                      Number(e.target.value) >= 0\n                                    ) {\n                                      setSelectedFromAmount(e.target.value);\n                                      handleCalculateSelectedTo();\n                                      calculateUsdPriceHandler(e);\n                                      setClickedInputs(true);\n                                    }\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedFrom.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  id={\"inputAmount\"}\n                                  disabled={invalidEx}\n                                  min=\"0\"\n                                  inputmode=\"numeric\"\n                                  pattern=\"\\d*\"\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                  }}\n                                >\n                                  <input\n                                    className={styles.inputDollars}\n                                    onChange={(e) => {\n                                      if (\n                                        e.target.value.length < 11 &&\n                                        /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                          e.target.value\n                                        ) &&\n                                        Number(e.target.value) >= 0\n                                      ) {\n                                        calculateCryptoPriceHandler(e);\n                                        setClickedInputs(true);\n                                      }\n                                    }}\n                                    min=\"0\"\n                                    inputmode=\"numeric\"\n                                    pattern=\"\\d*\"\n                                    type={\"number\"}\n                                    placeholder={`Amount ${\n                                      userCurrency.split(\" \")[1]\n                                    }`}\n                                    disabled={invalidEx}\n                                    style={\n                                      invalidEx ? { opacity: \"0.5\" } : null\n                                    }\n                                    value={blockPrice}\n                                  />\n                                  <span>{userCurrency.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                          <div className=\"max-button\">\n                            <Popup\n                              content={helpMax1(selectedFrom?.value)}\n                              position=\"bottom center\"\n                              trigger={\n                                <Button\n                                  secondary\n                                  className={\"btn\"}\n                                  onClick={setAssetMax}\n                                  floated=\"right\"\n                                  size=\"mini\"\n                                >\n                                  MAX\n                                </Button>\n                              }\n                            />\n                          </div>\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n              <div\n                style={{ marginTop: \"2.3rem\", marginLeft: \".3rem\" }}\n                className=\"padding-y-large text-center-s\"\n              >\n                <Popup\n                  content={helpSwap(selectedFrom?.value, selectedTo?.value)}\n                  position=\"top center\"\n                  trigger={\n                    <Button\n                      className={styles.button}\n                      style={{ width: \"3rem\", height: \"3rem\" }}\n                      onClick={(e) => {\n                        changeAssetHandlerSwap(selectedTo);\n                        setSelectedToAmount(NaN);\n                        setSelectedFromAmount(NaN);\n                        setBlockPrice(NaN);\n                        swapAssets(e);\n                      }}\n                    >\n                      <div className={styles.blockArrows}>\n                        <img\n                          src={leftArrow}\n                          className={styles.leftArrow}\n                          alt=\"\"\n                        />\n                        <img\n                          src={rightArrow}\n                          className={styles.rightArrow}\n                          alt=\"\"\n                        />\n                      </div>\n                    </Button>\n                  }\n                />\n              </div>\n              <div className={styles.rightBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                <div id=\"to\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedTo(val);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedFrom.value)}\n                          selectedValue={selectedTo}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            wide\n                            content={helpInput(\n                              selectedTo?.value,\n                              selectedFrom?.value\n                            )}\n                            position=\"bottom center\"\n                            disabled\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  style={isMobile ? { width: \"100%\" } : null}\n                                  placeholder=\"Amount crypto\"\n                                  value={\n                                    selectedFromAmount ? selectedToAmount : 0\n                                  }\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    setSelectedToAmount(\n                                      Number(e.target.value).toFixed(\n                                        selectedTo.pre\n                                      )\n                                    );\n                                    handleCalculateSelectedFrom();\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedTo.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  disabled\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                  }}\n                                >\n                                  <span>\n                                    {!invalidEx && selectedFromAmount\n                                      ? blockPrice\n                                      : 0}\n                                  </span>\n                                  <span>{userCurrency.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                        </div>\n                        <div style={{ marginTop: \"1px\" }}>\n                          {invalidEx && (\n                            <Label pointing color=\"red\">\n                              Trade is currently unavailable\n                            </Label>\n                          )}\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n            </div>\n            <div className={styles.absoluteBottomBlock}>\n              <div className={styles.centeredBlock}>\n                <div className={styles.leftBlockCrypt}>\n                  <div\n                    className={styles.textBlockLeft}\n                    style={{ marginRight: \"1rem\" }}\n                  >\n                    <span>You are exchanging</span>\n                    <h4>\n                      {selectedFromAmount || 0} {selectedFrom.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrency.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedFrom.image}\n                      alt=\"\"\n                    />\n                  </div>\n                </div>\n                <div className={styles.centeredBlockCrypt}>\n                  <div className={styles.iconBlock}>\n                    <i\n                      style={{ color: \"#fff\" }}\n                      className={\n                        isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                      }\n                    />\n                  </div>\n                </div>\n                <div className={styles.rightBlockCrypt}>\n                  <div className={\"imgToCenter\"} style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedTo.image}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className={styles.textBlockRight}>\n                    <span>You will Receive</span>\n                    <h4>\n                      {selectedFromAmount ? selectedToAmount : 0}{\" \"}\n                      {selectedTo.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrency.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {error && !invalidEx && selectedFromAmount ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>{error}</h5>\n              </Grid.Row>\n            ) : null}\n            {Number(selectedFrom.balance) < Number(selectedFromAmount) ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>\n                  You don't have enough crypto\n                </h5>\n              </Grid.Row>\n            ) : null}\n            <div className=\"hidden-pass ui input\">\n              {passwordShouldBeProvided && (\n                <>\n                  <Input\n                    size=\"medium\"\n                    type=\"password\"\n                    placeholder=\"password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                    value={password}\n                  />\n\n                  <Button\n                    disabled={password.length === 0}\n                    onClick={performTrade}\n                    size=\"medium\"\n                    color=\"yellow\"\n                    ui\n                  >\n                    Submit\n                  </Button>\n                </>\n              )}\n\n              {tradeInProgress && <MetaLoader size={\"small\"} />}\n\n              {!passwordShouldBeProvided && !tradeInProgress && (\n                <Button\n                  className={\"btnExch\"}\n                  disabled={\n                    tradeInProgress ||\n                    selectedToAmount == null ||\n                    selectedToAmount == 0 ||\n                    selectedToAmount === 0.0 ||\n                    selectedFrom.balance === 0 ||\n                    Number(selectedFrom.balance) < Number(selectedFromAmount) ||\n                    !selectedFromAmount ||\n                    !selectedToAmount ||\n                    blockPrice == 0 ||\n                    error\n                  }\n                  onClick={prepareTrade}\n                  color=\"yellow\"\n                  size=\"large\"\n                >\n                  Exchange\n                </Button>\n              )}\n            </div>\n          </div>\n          <div className={\"flexNeed\"}>\n            <RightSideHelpMenuSecondType\n              onClickExchangeEOSHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/EOS.fb40b8e0.svg\",\n                  value: \"EOS\",\n                  label: \"EOS\",\n                  pre: 4,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"EOS\") {\n                    setSelectedFrom({\n                      image: \"/static/media/EOS.fb40b8e0.svg\",\n                      value: \"EOS\",\n                      label: \"EOS\",\n                      pre: 4,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n              onClickExchangeUSDTHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/USDT.004b5e55.svg\",\n                  value: \"USDT\",\n                  label: \"USDT\",\n                  pre: 2,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"USDT\") {\n                    setSelectedFrom({\n                      image: \"/static/media/USDT.004b5e55.svg\",\n                      value: \"USDT\",\n                      label: \"USDT\",\n                      pre: 2,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/index.js",["261","262"],"import React, { useState } from \"react\";\nimport { UserInformationForm } from \"./UserInformationForm.js\";\nimport SubmitForm from \"./SubmitForm.js\";\nimport createAccountWithPassword from \"../../lib/createAccountWithPassword.js\";\nimport { Button, Grid, Icon } from \"semantic-ui-react\";\nimport RightSideHelpMenuFirstType from \"../RightSideHelpMenuFirstType/RightSideHelpMenuFirstType\";\n\nimport \"./SignUpForm.css\";\n\nexport default function SignUpForm(props) {\n  const {\n    onRegistration,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    portfolio,\n  } = props;\n  const [accountName, setAccountName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [step, setStep] = useState(1);\n\n  const stepFirstSubmit = (\n    accName,\n    pass,\n    newEmail,\n    newPhone,\n    newLastName,\n    newFirstName\n  ) => {\n    setAccountName(accName);\n    setFirstName(newFirstName);\n    setPassword(pass);\n    setEmail(newEmail);\n    setLastName(newLastName);\n    setPhone(newPhone);\n    setStep(2);\n  };\n\n  const stepSecondSubmit = async () => {\n    try {\n      await createAccountWithPassword(\n        accountName,\n        password,\n        false,\n        \"\",\n        1,\n        \"\",\n        phone,\n        email,\n        lastName,\n        firstName\n      );\n      localStorage.setItem(\"login\", accountName);\n      window.location.reload();\n      onRegistration(accountName, password, email);\n    } catch (e) {}\n  };\n\n  const stepForm =\n    step === 1 ? (\n      <UserInformationForm\n        {...props}\n        onSubmit={stepFirstSubmit}\n        accountName={accountName}\n        lastName={lastName}\n        firstName={firstName}\n        password={password}\n        email={email}\n        phone={phone}\n      />\n    ) : (\n      <SubmitForm onSubmit={stepSecondSubmit} password={password} />\n    );\n\n  return (\n    <>\n      <div>\n        <div\n          style={{\n            background: \"#fff\",\n            width: \"100%\",\n            height: \"3.7rem\",\n            padding: \"1.1rem 2rem\",\n            boxShadow: \"0 9px 10px 0 rgba(0,0,0,0.11)\",\n            fontSize: \"1.3rem\",\n            fontWeight: \"bold\",\n          }}\n        >\n          <span style={{ color: \"#240000\" }}>META Lite Wallet</span>\n        </div>\n        <div className={\"createWalletForm\"}>\n          <div className={\"justFlexAndDirect\"}>\n            <div className={\"regForm\"}>\n              <Button\n                onClick={step === 1 ? props.onBackClick : () => setStep(1)}\n                style={{ color: \"#fdc000\", fontSize: \".9rem\" }}\n                labelPosition=\"left\"\n              >\n                <i\n                  className=\"fal fa-arrow-left\"\n                  style={{ marginRight: \".5rem\" }}\n                />\n                <span\n                  style={{\n                    borderBottom: \"1px solid #fdc000\",\n                    color: \"#fdc000\",\n                  }}\n                >\n                  Back\n                </span>\n              </Button>\n              {stepForm}\n            </div>\n            <div className={\"adaptThing\"}>\n              <RightSideHelpMenuFirstType\n                onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n                onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n                portfolio={portfolio}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/DepositForm/index.js",["263","264","265","266","267","268","269"],"import { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Message,\n  Modal,\n  Icon,\n  Button,\n  Grid,\n  Header,\n  Input,\n} from \"semantic-ui-react\";\nimport QRCode from \"react-qr-code\";\n\nimport \"./style.css\";\n\nexport default function DepositForm(props) {\n  const { fetcher, account, onBackClick, asset } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [address, setAddress] = useState(props.address);\n  const canDeposit = address.length > 0;\n  useEffect(() => {\n    async function fetchAddress(asset) {\n      try {\n        setIsLoading(true);\n        const fetchedAsset = asset === \"USDT\" ? \"eth\" : asset;\n        const resp = await fetcher(fetchedAsset);\n        const body = await resp.body.getReader().read();\n        if (resp.status === 200) {\n          const addr = JSON.parse(\n            new TextDecoder(\"utf-8\").decode(body.value)\n          ).address;\n          setAddress(addr);\n        }\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n      }\n    }\n\n    if (asset !== undefined) fetchAddress(asset);\n  }, [asset]);\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Deposit</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n\n        <div className=\"qr-section\">\n          <div\n            style={{\n              background: \"#F0F1F4\",\n              padding: \"1rem\",\n              width: \"96%\",\n              margin: \"0 auto\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <span\n              style={{\n                color: \"#000\",\n                fontWeight: \"bold\",\n                fontSize: \".8rem\",\n                margin: \"1rem\",\n              }}\n            >\n              DEPOSIT <span style={{ color: \"#FFC000\" }}>{asset}</span>\n            </span>\n            <div className={\"needAdaptToQR\"}>\n              {!isLoading && !canDeposit && <p> Cannot deposit </p>}\n              {!isLoading && canDeposit && (\n                <QRCode value={address} size={200} />\n              )}\n            </div>\n          </div>\n          <p\n            style={{\n              margin: \"1rem\",\n              color: \"#505361\",\n              fontWeight: \"600\",\n              fontSize: \".8rem\",\n            }}\n          >\n            Minimum deposit: 0.001 {asset}\n          </p>\n          <div>\n            {!isLoading && canDeposit && (\n              <CopyToClipboard text={address} onCopy={() => {}}>\n                <div style={{ width: \"100%\" }}>\n                  <Input\n                    style={{ width: \"100%\" }}\n                    action={{\n                      color: \"yellow\",\n                      labelPosition: \"right\",\n                      icon: \"copy\",\n                      content: \"Copy\",\n                    }}\n                    value={address}\n                  />\n                </div>\n              </CopyToClipboard>\n            )}\n          </div>\n\n          <Message\n            className={\"messageRed\"}\n            icon=\"attention\"\n            header=\"Important information\"\n            content={`Send only ${asset} to this address. Sending less than 0.001 ${asset} or any other currency to this address may result in the loss of your deposit`}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchHistory.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/useDebounce.js",["270"],"import { useState, useEffect } from 'react'\n\n// Наш хук\nexport default function useDebounce(value, delay) {\n    // Состояние и сеттер для отложенного значения\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(\n        () => {\n            // Выставить debouncedValue равным value (переданное значение)\n            // после заданной задержки\n            const handler = setTimeout(() => {\n                setDebouncedValue(value)\n            }, delay)\n\n            // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n            // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n            // ... value будет изменено (смотри ниже массив зависимостей).\n            // Так мы избегаем изменений debouncedValue, если значение value ...\n            // ... поменялось в рамках интервала задержки.\n            // Таймаут очищается и стартует снова.\n            // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n            // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n            // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n            return () => {\n                clearTimeout(handler)\n            }\n        },\n        // Вызывается снова, только если значение изменится\n        // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n        // ... если вы собираетесь менять ее динамически.\n        [value]\n    )\n\n    return debouncedValue\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js",["271","272"],"import jsPDF from 'jspdf'\nimport QRCode from 'qrcode'\n\nimport image from './img.png'\n\nconst isLocked = () => true\n\nconst _createPaperWalletAsPDF = function (\n    ownerkeys,\n    activeKeys,\n    memoKey,\n    accountName,\n    privateKey\n) {\n    const width = 300,\n        height = 450, //mm\n        lineMargin = 5,\n        qrSize = 50,\n        textMarginLeft = qrSize + 7,\n        qrMargin = 5,\n        qrRightPos = width - qrSize - qrMargin,\n        textWidth = width - qrSize * 2 - qrMargin * 2 - 3,\n        textHeight = 8,\n        logoWidth = (width * 3) / 4,\n        logoHeight = logoWidth / 2.8, //  logo original width/height=2.8\n        logoPositionX = (width - logoWidth) / 2\n    let rowHeight = logoHeight + 50\n    const keys = [activeKeys, ownerkeys, memoKey]\n    const keysName = ['Active Key', 'Owner Key', 'Memo Key']\n\n    let locked = isLocked()\n\n    const pdf = new jsPDF({\n        orientation: 'portrait',\n        format: [width, height],\n        compressPdf: true\n    })\n\n    const checkPageH = (pdfInstance, currentPageH, maxPageH) => {\n        if (currentPageH >= maxPageH) {\n            pdfInstance.addPage()\n            rowHeight = 10\n        }\n        return pdf.internal.getNumberOfPages()\n    }\n\n    const keyRow = (publicKey) => {\n        let currentPage = checkPageH(pdf, rowHeight, 400)\n        gQrcode(publicKey, qrMargin, rowHeight + 10, currentPage)\n        if (locked && !!privateKey) {\n            gQrcode(privateKey, qrRightPos, rowHeight + 10, currentPage)\n        }\n        pdf.text('PublicKey', textMarginLeft, rowHeight + 20)\n        pdf.text(publicKey, textMarginLeft, rowHeight + 30)\n        pdf.rect(textMarginLeft - 1, rowHeight + 24, textWidth, textHeight)\n        pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n        if (locked) {\n            pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n            if (!!privateKey) {\n                pdf.text(privateKey, textMarginLeft, rowHeight + 50)\n            } else {\n                pdf.text('Not found.', textMarginLeft, rowHeight + 50)\n            }\n            pdf.rect(textMarginLeft - 1, rowHeight + 44, textWidth, textHeight)\n        }\n        rowHeight += 50\n    }\n\n    const gQrcode = (qrcode, rowWidth, rowHeight, currentPage) => {\n        QRCode.toDataURL(qrcode)\n            .then((url) => {\n                pdf.setPage(currentPage)\n                pdf.addImage(url, 'JPEG', rowWidth, rowHeight, qrSize, qrSize)\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n    }\n\n    let img = new Image()\n    img.src = image\n    pdf.addImage(\n        img,\n        'PNG',\n        logoPositionX,\n        30,\n        logoWidth,\n        logoHeight,\n        '',\n        'MEDIUM'\n    )\n    pdf.text('Account:', 18, rowHeight - 10)\n    pdf.text(accountName, 42, rowHeight - 10)\n\n    let content = keys.map((publicKeys, index) => {\n        if (index >= 1) {\n            rowHeight += 25 // add margin-top for block\n        }\n        checkPageH(pdf, rowHeight, 400)\n        pdf.text('Public', 22, rowHeight + 7)\n        pdf.text(keysName[index], 120, rowHeight + 7)\n        if (locked) {\n            pdf.text('Private', 260, rowHeight + 7)\n        }\n        pdf.line(lineMargin, rowHeight + 1, width - lineMargin, rowHeight + 1)\n        pdf.line(lineMargin, rowHeight + 9, width - lineMargin, rowHeight + 9)\n        if (typeof publicKeys === 'string') {\n            keyRow(publicKeys)\n        } else {\n            publicKeys.map((publicKey) => {\n                keyRow(publicKey)\n            })\n        }\n    })\n\n    Promise.all(content).then(() => {\n        pdf.save(\n            'meta' +\n                '-paper-wallet-' +\n                (locked ? 'public-' : 'private-') +\n                accountName +\n                '.pdf'\n        )\n    })\n}\n\nconst createPaperWalletAsPDF = function (\n    account,\n    ownerKey,\n    activeKey,\n    memoKey,\n    privateKey\n) {\n    _createPaperWalletAsPDF(ownerKey, activeKey, memoKey, account, privateKey)\n}\n\nexport { createPaperWalletAsPDF }\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx",["273","274","275","276","277","278","279","280"],"import React, { useState, useEffect } from \"react\";\nimport { Modal, Input, Button } from \"semantic-ui-react\";\nimport \"./login.css\";\nimport styles from \"./login.module.scss\";\nimport RightSideHelpMenuFirstType from \"../RightSideHelpMenuFirstType/RightSideHelpMenuFirstType\";\n\nexport default function LoginScreen(props) {\n  const {\n    error,\n    onSubmit,\n    onSignUpClick,\n    portfolio,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n  } = props;\n  const [login, setLogin] = useState(\"\");\n  const [openModal, setOpenModal] = useState(false);\n  const [openVideoModal, setOpenVideoModal] = useState(false);\n  const handleSignUpClick = (e) => {\n    e.preventDefault();\n    onSignUpClick();\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (login.length !== 0) {\n      onSubmit(login, true);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      document.getElementById(\"mainBlock\").style.height = \"92vh\";\n    }, 5);\n  }, []);\n\n  return (\n    <div className={styles.body}>\n      <header className={styles.header}>\n        <div className={styles.headerM}>\n          <span>META Lite Wallet</span>\n        </div>\n      </header>\n      <div className={styles.mainBlockContent}>\n        <div className={styles.leftBlockContent}>\n          <div className={styles.createMeta}>\n            <h5>\n              <strong>\n                This section provides access to your META Lite Wallet.\n              </strong>\n            </h5>\n            <span>\n              If you have not yet created a META wallet, please click the Get\n              Started button to on the right hand side of the screen. Then click\n              the 'Create META Wallet' button below to create your wallet\n            </span>\n            <br />\n            <button\n              onClick={handleSignUpClick}\n              style={{ marginTop: \"1rem\" }}\n              className={styles.Button}\n            >\n              Create {portfolio != null ? \"new\" : null} META Wallet\n            </button>\n          </div>\n\n          {portfolio === null ? (\n            <div className={styles.linkMeta}>\n              <span>\n                For those already having a META Wallet, to enable functionality,\n                you must 'link' your wallet by typing in your wallet 'Wallet\n                Name' in the box below and clicking the 'Link META Wallet'\n                button.\n              </span>\n              <form className={styles.FormLink}>\n                <input\n                  className={styles.input}\n                  onChange={(e) => {\n                    e.preventDefault();\n                    setLogin(e.target.value);\n                  }}\n                  placeholder={\"Wallet Name\"}\n                  value={login}\n                  type=\"text\"\n                />\n                <p\n                  className={styles.ErrorP}\n                  style={error ? null : { display: \"none\" }}\n                >\n                  Invalid Account Name\n                </p>\n                <button\n                  className={styles.Button}\n                  style={{ fontSize: \"100%\", marginTop: \"0\" }}\n                  onClick={handleSubmit}\n                  type={\"submit\"}\n                >\n                  Link META Wallet\n                </button>\n              </form>\n            </div>\n          ) : (\n            <div className={styles.linkMeta}>\n              <h5>\n                <strong>To unlink your wallet, click here</strong>\n              </h5>\n              <br />\n              <button\n                className={styles.Button}\n                onClick={() => {\n                  localStorage.removeItem(\"login\");\n                  sessionStorage.setItem(\"location\", \"wallet\");\n                  window.location.reload();\n                }}\n                type={\"button\"}\n                style={{ marginTop: \"0\" }}\n              >\n                Unlink META Wallet\n              </button>\n            </div>\n          )}\n        </div>\n        <div className={styles.rightBlockContent}>\n          <RightSideHelpMenuFirstType\n            onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n            onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            portfolio={portfolio}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst ModalWalletInstructions = ({ setOpenModal, openModal }) => {\n  return (\n    <Modal\n      style={{ padding: 20 }}\n      open={openModal}\n      onClose={() => setOpenModal(false)}\n    >\n      <h3>META Wallet Creation</h3>\n      <p>\n        The META 1 Coin Digital Wallet can be created and accessed from your\n        meta1.vision Dashboard account OR on meta-exchange.io.\n      </p>\n      <br />\n      <h3>GET STARTED: Create a META Lite Wallet on meta1.vision Dashboard</h3>\n      <p>\n        1. Click the White ‘Create META Wallet’ button to start the process.\n        <br />\n        2. Fill in your information. Some fields may already be auto-filled.\n        Make sure the fields are filled in properly. You may need to clear the\n        fields and re-enter correctly.\n        <br />\n        3. Account Box – Create your wallet name <br />\n        Note: the ‘Wallet Account Name’ you choose is visible on the\n        meta-exchange.io platform. For optimum security, avoid using your name\n        or personal information as a part of your META Wallet Account name (do\n        not use an email address or your personal name. Your META Wallet Account\n        Name must contain from 4 to 63 characters and must consist of a\n        combination of lowercase Latin letters, dashes, or numbers. (No capital\n        letters, blank spaces, @, +, !, nor any other non- number/letter\n        characters except a dash)\n        <br />\n        4. Copy the Generated Password / Passphrase (52 characters) Do NOT\n        create your own password. You must use the auto generated password and\n        properly paste it into the confirm password field; You can click the\n        small clipboard under the ‘generated’ password field (lower right side).\n        Be sure to properly record and secure both the password ‘KEY’ and\n        account name in a safe location.\n        <br />\n        5. PASTE password phrase into the confirmation box below.\n        <br />\n        6. Click Submit\n        <br />\n        7. Confirm and check off ALL 4 Boxes to acknowledge you understand about\n        ‘SAVING the Key in a safe place\n        <br />\n        8. Click Submit\n        <br />\n        9. Your wallet will now be created, and it will say it is ‘LINKED’ at\n        the top of the page.\n      </p>\n      <br /> <br />\n      <p>\n        Once you have set up your wallet correctly, and if you have Ready to\n        Claim certificates under the ‘Coin Certificate Tab’ they will change to\n        Receive and Accept.\n      </p>\n      <h3>LOADING META 1 COINS INTO YOUR WALLET</h3>\n      <p>\n        When you are ready to receive your coins, click on the Receive and\n        Accept button and confirm you want to accept them into your wallet. Look\n        on the META Lite wallet tab to see the newly loaded coins.\n      </p>\n      <br /> <br />\n      <p>\n        The META Lite Wallet has the basic essential functionality of the META\n        Wallet (accessible on meta-exchange.io). The two versions access the\n        same account data on the META Blockchain. Nothing is compromised\n        including speed and transactional integrity. Many Coin holders will find\n        it easier to work from the meta1.vision Dashboard. But keep in mind that\n        META Exchange is a powerful leading edge tool with many features and\n        advanced functionality.\n      </p>\n      <p>\n        Your META Wallet can be used for several crypto currencies (select “Show\n        All balances” in the META Lite Wallet section for a complete list).{\" \"}\n        <br />\n        CREATE MULTIPLE WALLETS - You can create more than one META Wallet.{\" \"}\n        <br />\n        First ‘unlink’ your active META Wallet before creating a new one. <br />\n        - Click the word ‘here’ in the phrase, “To unlink your wallet, click\n        here”, to unlink your wallet. <br />\n        Click the ‘Create META Wallet’ button to create an additional wallet.{\" \"}\n        <br />\n        You can switch from one wallet to another by using the ‘unlink’ feature\n        and then entering your additional wallet name and clicking the ‘Link\n        META Wallet’ button. <br />\n        And as a general security measure, always double check that you are on\n        an official META 1 website. <br />\n        And as a general security measure, always double check that you are on\n        an official META 1 website. <br />\n      </p>\n    </Modal>\n  );\n};\n\nconst VideoModal = ({ openVideoModal, setOpenVideoModal }) => {\n  return (\n    <Modal\n      open={openVideoModal}\n      onClose={() => setOpenVideoModal(false)}\n      className={styles.modalDiv}\n      style={{ maxWidth: \"90%\" }}\n    >\n      <iframe\n        title=\"vimeo-player\"\n        src=\"https://player.vimeo.com/video/541858758\"\n        width=\"640\"\n        height=\"360\"\n        frameborder=\"0\"\n        allowfullscreen\n        style={{ width: \"100%\" }}\n      ></iframe>\n    </Modal>\n  );\n};\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js",["281"],"import * as React from \"react\";\nimport styles from \"./RightSideHelpMenuThirdType.module.scss\";\n\nconst RightSideHelpMenuSecondType = (props) => {\n  const { onClickExchangeEOSHandler, onClickExchangeUSDTHandler, portfolio } =\n    props;\n\n  const DateOfStartEOS = 1645998629;\n  const DateOfStartUSDT = 1646085029;\n\n  const calculateDate = (date) => {\n    return Math.floor((new Date() / 1000 - date) / 86400);\n  };\n\n  return (\n    <>\n      <div className={styles.newCrypto}>\n        <h5 style={{ fontWeight: \"bold\", fontSize: \"1rem\" }}>\n          New Crypto on META1\n        </h5>\n        <hr />\n        <div className={styles.newCryptoBlock}>\n          <div className={styles.crypto} onClick={onClickExchangeUSDTHandler}>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/Tether-USDT-icon.png\"\n                alt=\"usdt\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>USDT</h6>\n                <span>Added {calculateDate(DateOfStartUSDT)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n          <hr />\n          <div className={styles.crypto} onClick={onClickExchangeEOSHandler}>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/EOS-icon.png\"\n                alt=\"EOS\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>EOS</h6>\n                <span>Added {calculateDate(DateOfStartEOS)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RightSideHelpMenuSecondType;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js",["282"],"import * as React from \"react\";\nimport styles from \"./LeftPanelAdapt.module.scss\";\nimport \"./LeftPanelAdapt.css\";\nimport user from \"../../images/default-pic1.png\";\n\nconst LeftPanelAdapt = (props) => {\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name,\n    userIcon,\n  } = props;\n\n  return (\n    <ul className={styles.mainBlockAdapt + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              id=\"leftAvatarAdapt\"\n              src={userIcon}\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i\n              style={{ margin: \".55rem .5rem\" }}\n              className=\"fas fa-home-lg-alt\"\n            />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <li className={styles.Li + \" nav-item dropdown\"}>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          id=\"navbarDropdown\"\n          role=\"button\"\n          data-bs-toggle=\"dropdown\"\n          aria-expanded=\"false\"\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div className={styles.textSpan + \" event\"}>\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n        <ul\n          className={\"event dropdown-menu needToBeYellow\"}\n          aria-labelledby=\"navbarDropdown\"\n        >\n          <h1\n            style={{\n              fontSize: \"1.5rem\",\n              fontWeight: \"300\",\n              color: \"#d59900\",\n              textAlign: \"center\",\n            }}\n          >\n            Portfolio\n          </h1>\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPortfolioHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Show All Balance\n          </li>\n          <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickOrderTableHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Open Orders\n          </li>\n          <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPaperWalletHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Paper Wallet\n          </li>\n        </ul>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickExchangeHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fad fa-exchange\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickHistoryHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickSettingsHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={() => {\n          localStorage.removeItem(\"login\");\n          sessionStorage.setItem(\"location\", \"wallet\");\n          window.location.reload();\n        }}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .62rem\" }} className=\"fa fa-sign-out\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Log Out</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanelAdapt;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js",["283","284","285","286","287","288","289","290","291","292","293","294","295","296"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { key, ChainValidation } from \"meta1js\";\nimport AccountApi from \"../../lib/AccountApi\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"./SignUpForm.css\";\n\nimport { Button, Form, Grid, Input, Popup } from \"semantic-ui-react\";\n\nconst useDebounce = (value, timeout) => {\n  const [state, setState] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => setState(value), timeout);\n\n    return () => clearTimeout(handler);\n  }, [value, timeout]);\n\n  return state;\n};\n\nconst UserInformationForm = (props) => {\n  const [generatedPassword, setGeneratedPassword] = useState(\"\");\n  useEffect(() => {\n    if (generatedPassword === \"\") {\n      setGeneratedPassword(`P${key.get_random_key().toWif().toString()}`);\n    }\n  }, [generatedPassword]);\n\n  const [accountName, setAccountName] = useState(props.accountName || \"\");\n  const debouncedAccountName = useDebounce(accountName, 100);\n  const [accountNameErrors, setAccountNameErrors] = useState(null);\n  const [email, setEmail] = useState(props.email || \"\");\n  const [firstName, setFirstName] = useState(props.firstName || \"\");\n  const [lastName, setLastName] = useState(props.lastName || \"\");\n  const [phone, setPhone] = useState(props.phone || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [searchAccount, setSearchAccount] = useState([[\"PM\", \"\"]]);\n  const [touchedAccountName, setTouchedAccountName] = useState(false);\n  const [phoneError, setPhoneError] = useState(null);\n  const [emailError, setEmailError] = useState(null);\n  const [firstNameError, setFirstNameError] = useState(null);\n  const [lastNameError, setLastNameError] = useState(null);\n  useEffect(() => {\n    if (accountName) {\n      AccountApi.lookupAccounts(accountName, 1)\n        .then((res) => setSearchAccount(res))\n        .catch((err) => console.log(err));\n    }\n  }, [accountName]);\n\n  useEffect(() => {\n    const error = ChainValidation.is_account_name_error(debouncedAccountName);\n    if (error) {\n      setAccountNameErrors({\n        content: error,\n        pointing: \"below\",\n      });\n    } else if (!accountName.includes(\"-\") && !/^.*\\d.*$/.test(accountName)) {\n      setAccountNameErrors({\n        content:\n          \"This is a premium name which is more expensive than a name containing a dash (-) or a number.\",\n        pointing: \"below\",\n      });\n    } else {\n      setAccountNameErrors(null);\n    }\n  }, [debouncedAccountName]);\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (isSubmitted) {\n      props.onSubmit(\n        accountName,\n        generatedPassword,\n        email,\n        phone,\n        lastName,\n        firstName\n      );\n    }\n    return () => setIsSubmitted(false);\n  }, [\n    firstName,\n    isSubmitted,\n    accountName,\n    generatedPassword,\n    props,\n    email,\n    lastName,\n    phone,\n  ]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n  return (\n    <>\n      <h2 className=\"head-title\">Create META Wallet</h2>\n      <Grid>\n        <Grid.Column width={16} className=\"singup-grid\">\n          <Form autoComplete=\"off\" onSubmit={setIsSubmitted}>\n            <div className=\"field\">\n              <Grid stackable>\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>First Name</label>\n                    <input\n                      value={firstName}\n                      onChange={(event) => {\n                        setFirstName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setFirstNameError(\n                            \"Your First Name must not contain special characters\"\n                          );\n                        } else {\n                          setFirstNameError(null);\n                        }\n                      }}\n                      placeholder=\"First Name\"\n                      required\n                    />\n                    {firstNameError && (\n                      <p style={{ color: \"red\" }}> {firstNameError}</p>\n                    )}\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Email</label>\n                    <input\n                      onChange={(event) => {\n                        setEmail(event.target.value);\n                        if (\n                          !/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(\n                            event.target.value\n                          )\n                        ) {\n                          setEmailError(\"Invalid Email\");\n                        } else {\n                          setEmailError(null);\n                        }\n                      }}\n                      value={email}\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      required\n                    />\n                    {emailError && (\n                      <p style={{ color: \"red\" }}> {emailError}</p>\n                    )}\n                  </Form.Field>\n                </Grid.Column>\n\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>Last Name</label>\n                    <input\n                      value={lastName}\n                      onChange={(event) => {\n                        setLastName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setLastNameError(\n                            \"Your Last Name must not contain special characters\"\n                          );\n                        } else {\n                          setLastNameError(null);\n                        }\n                      }}\n                      placeholder=\"Last Name\"\n                      required\n                    />\n                    {lastNameError && (\n                      <p style={{ color: \"red\" }}> {lastNameError}</p>\n                    )}\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Phone Number</label>\n                    <input\n                      value={phone}\n                      onChange={(event) => {\n                        setPhone(event.target.value);\n                        if (\n                          !/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/g.test(\n                            event.target.value\n                          )\n                        ) {\n                          setPhoneError(\"Invalid Phone\");\n                        } else {\n                          setPhoneError(null);\n                        }\n                      }}\n                      title=\"+1-234-567-8900\"\n                      placeholder=\"Phone Number\"\n                      pattern=\"+[0-9]{2}-[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                      type=\"tel\"\n                      required\n                    />\n                    {phoneError && (\n                      <p style={{ color: \"red\" }}> {phoneError}</p>\n                    )}\n                  </Form.Field>\n                </Grid.Column>\n              </Grid>\n            </div>\n\n            <Form.Field>\n              <label>Account Name</label>\n              <input\n                control={Input}\n                value={accountName}\n                type=\"text\"\n                error={accountNameErrors}\n                placeholder=\"Account Name\"\n                onChange={({ target }) => {\n                  setAccountName(target.value.toLocaleLowerCase());\n                  setTouchedAccountName(true);\n                }}\n              />\n              {accountNameErrors?.content && touchedAccountName ? (\n                <p style={{ color: \"red\" }}> {accountNameErrors?.content}</p>\n              ) : null}\n            </Form.Field>\n\n            <Form.Field>\n              <label>Password test</label>\n              <div className=\"ui action input\">\n                <input value={generatedPassword} type=\"text\" disabled />\n                <CopyToClipboard text={generatedPassword} onCopy={() => {}}>\n                  <div\n                    name=\"copyToken\"\n                    className=\"ui yellow right icon button brown\"\n                  >\n                    <i className=\"fal fa-copy\" />\n                  </div>\n                </CopyToClipboard>\n              </div>\n            </Form.Field>\n\n            <Form.Field>\n              <label>Password Confirmation</label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </Form.Field>\n            {searchAccount[0][0] === accountName && (\n              <p style={{ color: \"red\" }}>Account is already used </p>\n            )}\n            <Form.Field>\n              <Button\n                // onClick={() => setIsSubmitted(true)}\n                className=\"yellow\"\n                style={{ color: \"#240000\" }}\n                type=\"submit\"\n                disabled={\n                  firstName === \"\" ||\n                  lastName === \"\" ||\n                  email === \"\" ||\n                  phone === \"\" ||\n                  accountNameErrors ||\n                  password !== generatedPassword ||\n                  searchAccount[0][0] === accountName ||\n                  emailError ||\n                  phoneError ||\n                  firstNameError ||\n                  lastNameError\n                }\n              >\n                Submit\n              </Button>\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n};\n\nexport { UserInformationForm };\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js",["297"],"import React, { useState } from \"react\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport {\n  Button,\n  Message,\n  Checkbox,\n  Form,\n  Popup,\n  Grid,\n} from \"semantic-ui-react\";\n\nexport default function SubmitForm(props) {\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const [access, setAccess] = useState(false);\n  const [recover, setRecover] = useState(false);\n  const [stored, setStored] = useState(false);\n  const [living, setLiving] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const isAllChecked = access && recover && stored && living;\n\n  return (\n    <Grid>\n      <Grid.Column style={{ marginTop: \"1rem\" }} width={16}>\n        <Form>\n          <Form.Field>\n            <label>Password</label>\n            <div className=\"ui action input\">\n              <input value={props.password} type=\"text\" disabled />\n              <Popup\n                content=\"Copy to Clipboard.\"\n                trigger={\n                  <CopyToClipboard text={props.password} onCopy={() => {}}>\n                    <button\n                      name=\"copyToken\"\n                      style={{ color: \"#240000\" }}\n                      class=\"ui yellow right icon button\"\n                    >\n                      <i class=\"copy icon\" />\n                    </button>\n                  </CopyToClipboard>\n                }\n              />\n            </div>\n          </Form.Field>\n\n          <Message\n            className={\"messageRed\"}\n            icon=\"attention\"\n            header=\"Important information\"\n            content=\"If you forget your password phrase you will be unable to access your account and your funds. We cannot reset or restore your password! Memorize or write down your username and password!\"\n          />\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setAccess(!access)}\n              checked={access}\n              label=\"I understand that I will lose access to my funds if I lose my password\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setRecover(!recover)}\n              checked={recover}\n              label=\"I understand that no one can recover my password if I lose or forget it\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setStored(!stored)}\n              checked={stored}\n              label=\"I have written down or otherwise stored my password\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setLiving(!living)}\n              checked={living}\n              label=\" I am a living man or woman hence a living being\"\n            />\n          </Form.Field>\n\n          {isSubmitted && <MetaLoader size={\"small\"} />}\n          {!isSubmitted && (\n            <Button\n              className=\"sbBtn\"\n              onClick={() => {\n                setIsSubmitted(true);\n                props.onSubmit();\n              }}\n              disabled={!isAllChecked}\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          )}\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js",["298"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js",["299"],"import axios from 'axios'\nimport env from \"react-dotenv\";\n\nexport const compareCrypto = async (coin) => {\n    const { data } = await axios.get(\n        `https://min-api.cryptocompare.com/data/price?fsym=${coin}&tsyms=USDT`\n    )\n    return data;\n}\n\nexport default async function getAllByOne(tokenNow, tokenFor) {\n    const {data} = await axios.get(\n        `https://min-api.cryptocompare.com/data/price?fsym=${tokenNow}&tsyms=${tokenFor}`\n    )\n    return data;\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/config/help.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/AccountApi.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/WithdrawForm/index.js",["300","301","302","303","304","305","306","307"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/account_utils.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/trxHelper.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/utils.js",["308"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/scamAccounts.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/asset_utils.js",["309"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/utils/MarketClasses.js",[],{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","severity":1,"message":"315","line":8,"column":43,"nodeType":"316","messageId":"317","endLine":8,"endColumn":58},{"ruleId":"314","severity":1,"message":"318","line":52,"column":19,"nodeType":"316","messageId":"317","endLine":52,"endColumn":29},{"ruleId":"314","severity":1,"message":"319","line":60,"column":10,"nodeType":"316","messageId":"317","endLine":60,"endColumn":18},{"ruleId":"314","severity":1,"message":"320","line":63,"column":18,"nodeType":"316","messageId":"317","endLine":63,"endColumn":27},{"ruleId":"314","severity":1,"message":"321","line":72,"column":17,"nodeType":"316","messageId":"317","endLine":72,"endColumn":25},{"ruleId":"322","severity":1,"message":"323","line":80,"column":6,"nodeType":"324","endLine":80,"endColumn":8,"suggestions":"325"},{"ruleId":"314","severity":1,"message":"326","line":92,"column":9,"nodeType":"316","messageId":"317","endLine":92,"endColumn":12},{"ruleId":"322","severity":1,"message":"327","line":196,"column":6,"nodeType":"324","endLine":196,"endColumn":19,"suggestions":"328"},{"ruleId":"314","severity":1,"message":"329","line":214,"column":18,"nodeType":"316","messageId":"317","endLine":214,"endColumn":34},{"ruleId":"314","severity":1,"message":"330","line":6,"column":8,"nodeType":"316","messageId":"317","endLine":6,"endColumn":22},{"ruleId":"331","severity":1,"message":"332","line":131,"column":21,"nodeType":"333","endLine":138,"endColumn":22},{"ruleId":"314","severity":1,"message":"334","line":18,"column":5,"nodeType":"316","messageId":"317","endLine":18,"endColumn":22},{"ruleId":"314","severity":1,"message":"335","line":2,"column":8,"nodeType":"316","messageId":"317","endLine":2,"endColumn":13},{"ruleId":"314","severity":1,"message":"336","line":16,"column":30,"nodeType":"316","messageId":"317","endLine":16,"endColumn":36},{"ruleId":"314","severity":1,"message":"337","line":16,"column":38,"nodeType":"316","messageId":"317","endLine":16,"endColumn":45},{"ruleId":"314","severity":1,"message":"338","line":18,"column":28,"nodeType":"316","messageId":"317","endLine":18,"endColumn":33},{"ruleId":"314","severity":1,"message":"318","line":12,"column":19,"nodeType":"316","messageId":"317","endLine":12,"endColumn":29},{"ruleId":"314","severity":1,"message":"339","line":14,"column":10,"nodeType":"316","messageId":"317","endLine":14,"endColumn":23},{"ruleId":"314","severity":1,"message":"340","line":15,"column":10,"nodeType":"316","messageId":"317","endLine":15,"endColumn":24},{"ruleId":"322","severity":1,"message":"341","line":36,"column":6,"nodeType":"324","endLine":36,"endColumn":33,"suggestions":"342"},{"ruleId":"314","severity":1,"message":"343","line":4,"column":8,"nodeType":"316","messageId":"317","endLine":4,"endColumn":12},{"ruleId":"314","severity":1,"message":"344","line":33,"column":5,"nodeType":"316","messageId":"317","endLine":33,"endColumn":16},{"ruleId":"314","severity":1,"message":"345","line":34,"column":5,"nodeType":"316","messageId":"317","endLine":34,"endColumn":22},{"ruleId":"314","severity":1,"message":"346","line":35,"column":5,"nodeType":"316","messageId":"317","endLine":35,"endColumn":20},{"ruleId":"314","severity":1,"message":"320","line":39,"column":18,"nodeType":"316","messageId":"317","endLine":39,"endColumn":27},{"ruleId":"314","severity":1,"message":"347","line":44,"column":10,"nodeType":"316","messageId":"317","endLine":44,"endColumn":15},{"ruleId":"314","severity":1,"message":"338","line":46,"column":28,"nodeType":"316","messageId":"317","endLine":46,"endColumn":33},{"ruleId":"348","severity":1,"message":"349","line":118,"column":20,"nodeType":"350","messageId":"351","endLine":118,"endColumn":22},{"ruleId":"322","severity":1,"message":"352","line":124,"column":6,"nodeType":"324","endLine":124,"endColumn":23,"suggestions":"353"},{"ruleId":"314","severity":1,"message":"354","line":8,"column":17,"nodeType":"316","messageId":"317","endLine":8,"endColumn":21},{"ruleId":"314","severity":1,"message":"355","line":8,"column":37,"nodeType":"316","messageId":"317","endLine":8,"endColumn":43},{"ruleId":"314","severity":1,"message":"356","line":10,"column":10,"nodeType":"316","messageId":"317","endLine":10,"endColumn":20},{"ruleId":"314","severity":1,"message":"357","line":10,"column":22,"nodeType":"316","messageId":"317","endLine":10,"endColumn":32},{"ruleId":"314","severity":1,"message":"358","line":10,"column":34,"nodeType":"316","messageId":"317","endLine":10,"endColumn":42},{"ruleId":"314","severity":1,"message":"359","line":10,"column":44,"nodeType":"316","messageId":"317","endLine":10,"endColumn":52},{"ruleId":"348","severity":1,"message":"349","line":33,"column":53,"nodeType":"350","messageId":"351","endLine":33,"endColumn":55},{"ruleId":"314","severity":1,"message":"360","line":36,"column":9,"nodeType":"316","messageId":"317","endLine":36,"endColumn":12},{"ruleId":"314","severity":1,"message":"361","line":37,"column":10,"nodeType":"316","messageId":"317","endLine":37,"endColumn":21},{"ruleId":"314","severity":1,"message":"362","line":37,"column":23,"nodeType":"316","messageId":"317","endLine":37,"endColumn":37},{"ruleId":"314","severity":1,"message":"363","line":41,"column":19,"nodeType":"316","messageId":"317","endLine":41,"endColumn":29},{"ruleId":"314","severity":1,"message":"364","line":48,"column":10,"nodeType":"316","messageId":"317","endLine":48,"endColumn":26},{"ruleId":"314","severity":1,"message":"365","line":51,"column":19,"nodeType":"316","messageId":"317","endLine":51,"endColumn":29},{"ruleId":"314","severity":1,"message":"366","line":52,"column":10,"nodeType":"316","messageId":"317","endLine":52,"endColumn":17},{"ruleId":"322","severity":1,"message":"367","line":102,"column":6,"nodeType":"324","endLine":102,"endColumn":16,"suggestions":"368"},{"ruleId":"322","severity":1,"message":"369","line":123,"column":6,"nodeType":"324","endLine":123,"endColumn":24,"suggestions":"370"},{"ruleId":"314","severity":1,"message":"371","line":151,"column":9,"nodeType":"316","messageId":"317","endLine":151,"endColumn":20},{"ruleId":"322","severity":1,"message":"372","line":222,"column":6,"nodeType":"324","endLine":222,"endColumn":32,"suggestions":"373"},{"ruleId":"322","severity":1,"message":"374","line":283,"column":6,"nodeType":"324","endLine":283,"endColumn":23,"suggestions":"375"},{"ruleId":"314","severity":1,"message":"376","line":284,"column":9,"nodeType":"316","messageId":"317","endLine":284,"endColumn":21},{"ruleId":"314","severity":1,"message":"377","line":301,"column":9,"nodeType":"316","messageId":"317","endLine":301,"endColumn":18},{"ruleId":"314","severity":1,"message":"378","line":29,"column":5,"nodeType":"316","messageId":"317","endLine":29,"endColumn":12},{"ruleId":"314","severity":1,"message":"345","line":30,"column":5,"nodeType":"316","messageId":"317","endLine":30,"endColumn":22},{"ruleId":"314","severity":1,"message":"379","line":34,"column":21,"nodeType":"316","messageId":"317","endLine":34,"endColumn":33},{"ruleId":"348","severity":1,"message":"349","line":95,"column":25,"nodeType":"350","messageId":"351","endLine":95,"endColumn":27},{"ruleId":"322","severity":1,"message":"380","line":100,"column":6,"nodeType":"324","endLine":100,"endColumn":38,"suggestions":"381"},{"ruleId":"322","severity":1,"message":"382","line":140,"column":6,"nodeType":"324","endLine":140,"endColumn":37,"suggestions":"383"},{"ruleId":"322","severity":1,"message":"384","line":148,"column":6,"nodeType":"324","endLine":148,"endColumn":8,"suggestions":"385"},{"ruleId":"348","severity":1,"message":"386","line":162,"column":31,"nodeType":"350","messageId":"351","endLine":162,"endColumn":33},{"ruleId":"322","severity":1,"message":"387","line":224,"column":6,"nodeType":"324","endLine":224,"endColumn":44,"suggestions":"388"},{"ruleId":"348","severity":1,"message":"349","line":856,"column":38,"nodeType":"350","messageId":"351","endLine":856,"endColumn":40},{"ruleId":"348","severity":1,"message":"349","line":862,"column":32,"nodeType":"350","messageId":"351","endLine":862,"endColumn":34},{"ruleId":"389","severity":1,"message":"390","line":884,"column":36,"nodeType":"391","messageId":"392","endLine":884,"endColumn":38},{"ruleId":"389","severity":1,"message":"390","line":904,"column":36,"nodeType":"391","messageId":"392","endLine":904,"endColumn":38},{"ruleId":"314","severity":1,"message":"393","line":5,"column":18,"nodeType":"316","messageId":"317","endLine":5,"endColumn":22},{"ruleId":"314","severity":1,"message":"354","line":5,"column":24,"nodeType":"316","messageId":"317","endLine":5,"endColumn":28},{"ruleId":"314","severity":1,"message":"394","line":5,"column":3,"nodeType":"316","messageId":"317","endLine":5,"endColumn":8},{"ruleId":"314","severity":1,"message":"354","line":6,"column":3,"nodeType":"316","messageId":"317","endLine":6,"endColumn":7},{"ruleId":"314","severity":1,"message":"395","line":7,"column":3,"nodeType":"316","messageId":"317","endLine":7,"endColumn":9},{"ruleId":"314","severity":1,"message":"393","line":8,"column":3,"nodeType":"316","messageId":"317","endLine":8,"endColumn":7},{"ruleId":"314","severity":1,"message":"355","line":9,"column":3,"nodeType":"316","messageId":"317","endLine":9,"endColumn":9},{"ruleId":"314","severity":1,"message":"337","line":17,"column":20,"nodeType":"316","messageId":"317","endLine":17,"endColumn":27},{"ruleId":"322","severity":1,"message":"396","line":41,"column":6,"nodeType":"324","endLine":41,"endColumn":13,"suggestions":"397"},{"ruleId":"322","severity":1,"message":"398","line":32,"column":9,"nodeType":"324","endLine":32,"endColumn":16,"suggestions":"399"},{"ruleId":"389","severity":1,"message":"390","line":95,"column":48,"nodeType":"391","messageId":"392","endLine":95,"endColumn":50},{"ruleId":"389","severity":1,"message":"390","line":110,"column":40,"nodeType":"391","messageId":"392","endLine":110,"endColumn":42},{"ruleId":"314","severity":1,"message":"400","line":2,"column":17,"nodeType":"316","messageId":"317","endLine":2,"endColumn":22},{"ruleId":"314","severity":1,"message":"395","line":2,"column":24,"nodeType":"316","messageId":"317","endLine":2,"endColumn":30},{"ruleId":"314","severity":1,"message":"401","line":17,"column":10,"nodeType":"316","messageId":"317","endLine":17,"endColumn":19},{"ruleId":"314","severity":1,"message":"402","line":17,"column":21,"nodeType":"316","messageId":"317","endLine":17,"endColumn":33},{"ruleId":"314","severity":1,"message":"403","line":18,"column":10,"nodeType":"316","messageId":"317","endLine":18,"endColumn":24},{"ruleId":"314","severity":1,"message":"404","line":18,"column":26,"nodeType":"316","messageId":"317","endLine":18,"endColumn":43},{"ruleId":"314","severity":1,"message":"405","line":134,"column":7,"nodeType":"316","messageId":"317","endLine":134,"endColumn":30},{"ruleId":"314","severity":1,"message":"406","line":229,"column":7,"nodeType":"316","messageId":"317","endLine":229,"endColumn":17},{"ruleId":"314","severity":1,"message":"407","line":5,"column":66,"nodeType":"316","messageId":"317","endLine":5,"endColumn":75},{"ruleId":"314","severity":1,"message":"343","line":4,"column":8,"nodeType":"316","messageId":"317","endLine":4,"endColumn":12},{"ruleId":"314","severity":1,"message":"408","line":1,"column":38,"nodeType":"316","messageId":"317","endLine":1,"endColumn":48},{"ruleId":"314","severity":1,"message":"409","line":7,"column":37,"nodeType":"316","messageId":"317","endLine":7,"endColumn":42},{"ruleId":"322","severity":1,"message":"410","line":67,"column":6,"nodeType":"324","endLine":67,"endColumn":28,"suggestions":"411"},{"ruleId":"412","severity":1,"message":"413","line":132,"column":41,"nodeType":"414","messageId":"415","endLine":132,"endColumn":42,"suggestions":"416"},{"ruleId":"412","severity":1,"message":"417","line":132,"column":49,"nodeType":"414","messageId":"415","endLine":132,"endColumn":50,"suggestions":"418"},{"ruleId":"412","severity":1,"message":"413","line":132,"column":65,"nodeType":"414","messageId":"415","endLine":132,"endColumn":66,"suggestions":"419"},{"ruleId":"412","severity":1,"message":"417","line":132,"column":73,"nodeType":"414","messageId":"415","endLine":132,"endColumn":74,"suggestions":"420"},{"ruleId":"412","severity":1,"message":"417","line":132,"column":82,"nodeType":"414","messageId":"415","endLine":132,"endColumn":83,"suggestions":"421"},{"ruleId":"412","severity":1,"message":"417","line":132,"column":86,"nodeType":"414","messageId":"415","endLine":132,"endColumn":87,"suggestions":"422"},{"ruleId":"412","severity":1,"message":"413","line":132,"column":102,"nodeType":"414","messageId":"415","endLine":132,"endColumn":103,"suggestions":"423"},{"ruleId":"412","severity":1,"message":"417","line":132,"column":110,"nodeType":"414","messageId":"415","endLine":132,"endColumn":111,"suggestions":"424"},{"ruleId":"412","severity":1,"message":"413","line":132,"column":127,"nodeType":"414","messageId":"415","endLine":132,"endColumn":128,"suggestions":"425"},{"ruleId":"412","severity":1,"message":"417","line":132,"column":135,"nodeType":"414","messageId":"415","endLine":132,"endColumn":136,"suggestions":"426"},{"ruleId":"412","severity":1,"message":"413","line":181,"column":64,"nodeType":"414","messageId":"415","endLine":181,"endColumn":65,"suggestions":"427"},{"ruleId":"314","severity":1,"message":"428","line":16,"column":9,"nodeType":"316","messageId":"317","endLine":16,"endColumn":17},{"ruleId":"314","severity":1,"message":"338","line":29,"column":28,"nodeType":"316","messageId":"317","endLine":29,"endColumn":33},{"ruleId":"314","severity":1,"message":"429","line":2,"column":8,"nodeType":"316","messageId":"317","endLine":2,"endColumn":11},{"ruleId":"314","severity":1,"message":"430","line":1,"column":10,"nodeType":"316","messageId":"317","endLine":1,"endColumn":25},{"ruleId":"314","severity":1,"message":"431","line":4,"column":3,"nodeType":"316","messageId":"317","endLine":4,"endColumn":10},{"ruleId":"314","severity":1,"message":"400","line":4,"column":12,"nodeType":"316","messageId":"317","endLine":4,"endColumn":17},{"ruleId":"314","severity":1,"message":"432","line":6,"column":8,"nodeType":"316","messageId":"317","endLine":6,"endColumn":14},{"ruleId":"314","severity":1,"message":"337","line":11,"column":20,"nodeType":"316","messageId":"317","endLine":11,"endColumn":27},{"ruleId":"314","severity":1,"message":"433","line":12,"column":10,"nodeType":"316","messageId":"317","endLine":12,"endColumn":19},{"ruleId":"314","severity":1,"message":"434","line":14,"column":9,"nodeType":"316","messageId":"317","endLine":14,"endColumn":19},{"ruleId":"322","severity":1,"message":"396","line":35,"column":6,"nodeType":"324","endLine":35,"endColumn":13,"suggestions":"435"},{"ruleId":"436","severity":1,"message":"437","line":267,"column":18,"nodeType":"316","messageId":"438","endLine":267,"endColumn":21},{"ruleId":"439","severity":1,"message":"440","line":131,"column":9,"nodeType":"441","messageId":"442","endLine":131,"endColumn":39},"no-native-reassign",["443"],"no-negated-in-lhs",["444"],"no-unused-vars","'getLastLocation' is defined but never used.","Identifier","unusedVar","'setAccount' is assigned a value but never used.","'password' is assigned a value but never used.","'setOrders' is assigned a value but never used.","'setLogin' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'onLogin'. Either include them or remove the dependency array.","ArrayExpression",["445"],"'loc' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'metaUrl'. Either include it or remove the dependency array.",["446"],"'chngLastLocation' is defined but never used.","'WidgetOnRamper' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getAvatarFromBack' is assigned a value but never used.","'Meta1' is defined but never used.","'assets' is assigned a value but never used.","'account' is assigned a value but never used.","'error' is assigned a value but never used.","'readyToCreate' is assigned a value but never used.","'accountChecked' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'portfolioReceiver'. Either include it or remove the dependency array.",["447"],"'user' is defined but never used.","'accountName' is assigned a value but never used.","'portfolioReceiver' is assigned a value but never used.","'setFullPorfolio' is assigned a value but never used.","'check' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'currencyValue' and 'totalSum'. Either include them or remove the dependency array.",["448"],"'Icon' is defined but never used.","'Header' is defined but never used.","'helpSendTo' is defined but never used.","'helpAmount' is defined but never used.","'helpMax1' is defined but never used.","'helpSwap' is defined but never used.","'pre' is assigned a value but never used.","'chosenCrypt' is assigned a value but never used.","'setChosenCrypt' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'accountIsLoading' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'newOptions'. Either include it or remove the dependency array.",["449"],"React Hook useEffect has missing dependencies: 'balance' and 'clickedInputs'. Either include them or remove the dependency array.",["450"],"'setSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'balance', 'clickedInputs', 'portfolioReceiver', 'receiver', and 'sender'. Either include them or remove the dependency array.",["451"],"React Hook useEffect has a missing dependency: 'portfolio'. Either include it or remove the dependency array.",["452"],"'PasswordForm' is assigned a value but never used.","'ariaLabel' is assigned a value but never used.","'metaUrl' is assigned a value but never used.","'setPortfolio' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clickedInputs', 'portfolio', and 'userCurrency'. Either include them or remove the dependency array.",["453"],"React Hook useEffect has missing dependencies: 'asset', 'assets', 'options', 'selectedFrom.value', and 'selectedTo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedFrom' needs the current value of 'selectedFrom.value'.",["454"],"React Hook useEffect has a missing dependency: 'isMobile'. Either include it or remove the dependency array.",["455"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'handleCalculateSelectedFrom' and 'handleCalculateSelectedTo'. Either include them or remove the dependency array.",["456"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Grid' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'fetcher'. Either include it or remove the dependency array.",["457"],"React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.",["458"],"'Input' is defined but never used.","'openModal' is assigned a value but never used.","'setOpenModal' is assigned a value but never used.","'openVideoModal' is assigned a value but never used.","'setOpenVideoModal' is assigned a value but never used.","'ModalWalletInstructions' is assigned a value but never used.","'VideoModal' is assigned a value but never used.","'portfolio' is assigned a value but never used.","'useContext' is defined but never used.","'Popup' is defined but never used.","React Hook useEffect has a missing dependency: 'accountName'. Either include it or remove the dependency array.",["459"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["460","461"],"Unnecessary escape character: \\\".",["462","463"],["464","465"],["466","467"],["468","469"],["470","471"],["472","473"],["474","475"],["476","477"],["478","479"],["480","481"],"'isMobile' is assigned a value but never used.","'env' is defined but never used.","'CopyToClipboard' is defined but never used.","'Message' is defined but never used.","'QRCode' is defined but never used.","'isLoading' is assigned a value but never used.","'canDeposit' is assigned a value but never used.",["482"],"no-redeclare","'key' is already defined.","redeclared","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation",{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"messageId":"513","fix":"514","desc":"515"},{"messageId":"516","fix":"517","desc":"518"},{"messageId":"513","fix":"519","desc":"515"},{"messageId":"516","fix":"520","desc":"518"},{"messageId":"513","fix":"521","desc":"515"},{"messageId":"516","fix":"522","desc":"518"},{"messageId":"513","fix":"523","desc":"515"},{"messageId":"516","fix":"524","desc":"518"},{"messageId":"513","fix":"525","desc":"515"},{"messageId":"516","fix":"526","desc":"518"},{"messageId":"513","fix":"527","desc":"515"},{"messageId":"516","fix":"528","desc":"518"},{"messageId":"513","fix":"529","desc":"515"},{"messageId":"516","fix":"530","desc":"518"},{"messageId":"513","fix":"531","desc":"515"},{"messageId":"516","fix":"532","desc":"518"},{"messageId":"513","fix":"533","desc":"515"},{"messageId":"516","fix":"534","desc":"518"},{"messageId":"513","fix":"535","desc":"515"},{"messageId":"516","fix":"536","desc":"518"},{"messageId":"513","fix":"537","desc":"515"},{"messageId":"516","fix":"538","desc":"518"},{"desc":"507","fix":"539"},"Update the dependencies array to be: [login, onLogin]",{"range":"540","text":"541"},"Update the dependencies array to be: [accountName, metaUrl]",{"range":"542","text":"543"},"Update the dependencies array to be: [debouncedAccount, account, portfolioReceiver]",{"range":"544","text":"545"},"Update the dependencies array to be: [portfolio, data, totalSum, currencyValue]",{"range":"546","text":"547"},"Update the dependencies array to be: [newOptions, receiver]",{"range":"548","text":"549"},"Update the dependencies array to be: [amount, balance, clickedInputs, receiver]",{"range":"550","text":"551"},"Update the dependencies array to be: [debouncedAccount, amount, clickedInputs, balance, portfolioReceiver, receiver, sender]",{"range":"552","text":"553"},"Update the dependencies array to be: [assetCh, assets, portfolio]",{"range":"554","text":"555"},"Update the dependencies array to be: [selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrency]",{"range":"556","text":"557"},"Update the dependencies array to be: [asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",{"range":"558","text":"559"},"Update the dependencies array to be: [isMobile]",{"range":"560","text":"561"},"Update the dependencies array to be: [handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",{"range":"562","text":"563"},"Update the dependencies array to be: [asset, fetcher]",{"range":"564","text":"565"},"Update the dependencies array to be: [delay, value]",{"range":"566","text":"567"},"Update the dependencies array to be: [accountName, debouncedAccountName]",{"range":"568","text":"569"},"removeEscape",{"range":"570","text":"571"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"572","text":"573"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"574","text":"571"},{"range":"575","text":"573"},{"range":"576","text":"571"},{"range":"577","text":"573"},{"range":"578","text":"571"},{"range":"579","text":"573"},{"range":"580","text":"571"},{"range":"581","text":"573"},{"range":"582","text":"571"},{"range":"583","text":"573"},{"range":"584","text":"571"},{"range":"585","text":"573"},{"range":"586","text":"571"},{"range":"587","text":"573"},{"range":"588","text":"571"},{"range":"589","text":"573"},{"range":"590","text":"571"},{"range":"591","text":"573"},{"range":"592","text":"571"},{"range":"593","text":"573"},{"range":"594","text":"565"},[3251,3253],"[login, onLogin]",[6578,6591],"[accountName, metaUrl]",[1298,1325],"[debouncedAccount, account, portfolioReceiver]",[3575,3592],"[portfolio, data, totalSum, currencyValue]",[3612,3622],"[newOptions, receiver]",[4190,4208],"[amount, balance, clickedInputs, receiver]",[6914,6940],"[debouncedAccount, amount, clickedInputs, balance, portfolioReceiver, receiver, sender]",[8359,8376],"[assetCh, assets, portfolio]",[3465,3497],"[selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrency]",[4683,4714],"[asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",[4877,4879],"[isMobile]",[7004,7042],"[handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",[1131,1138],"[asset, fetcher]",[1489,1496],"[delay, value]",[2458,2480],"[accountName, debouncedAccountName]",[4462,4463],"",[4462,4462],"\\",[4470,4471],[4470,4470],[4486,4487],[4486,4486],[4494,4495],[4494,4494],[4503,4504],[4503,4503],[4507,4508],[4507,4507],[4523,4524],[4523,4523],[4531,4532],[4531,4531],[4548,4549],[4548,4548],[4556,4557],[4556,4556],[6488,6489],[6488,6488],[1073,1080]]