[{"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/index.js":"1","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/App.js":"2","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js":"3","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/SendWithPassword.js":"4","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/Portfolio.js":"5","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js":"6","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/API/API.js":"7","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js":"8","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Settings/Settings.js":"9","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js":"10","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Footer/Footer.js":"11","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js":"12","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js":"13","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js":"14","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/UI/loader/Loader.js":"15","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/index.js":"16","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SendForm/index.js":"17","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js":"18","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/index.js":"19","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/DepositForm/index.js":"20","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchHistory.js":"21","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js":"22","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js":"23","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js":"24","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/useDebounce.js":"25","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js":"26","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx":"27","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js":"28","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js":"29","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js":"30","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js":"31","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js":"32","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js":"33","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js":"34","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/config/help.js":"35","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js":"36","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/AccountApi.js":"37"},{"size":538,"mtime":1648864532000,"results":"38","hashOfConfig":"39"},{"size":24924,"mtime":1648917022589,"results":"40","hashOfConfig":"39"},{"size":610,"mtime":1648917022595,"results":"41","hashOfConfig":"39"},{"size":709,"mtime":1648912407448,"results":"42","hashOfConfig":"39"},{"size":2386,"mtime":1648912407447,"results":"43","hashOfConfig":"39"},{"size":798,"mtime":1648912407448,"results":"44","hashOfConfig":"39"},{"size":1212,"mtime":1648917022588,"results":"45","hashOfConfig":"39"},{"size":6252,"mtime":1648917022592,"results":"46","hashOfConfig":"39"},{"size":10348,"mtime":1648917022592,"results":"47","hashOfConfig":"39"},{"size":4471,"mtime":1648864532000,"results":"48","hashOfConfig":"39"},{"size":17391,"mtime":1648917022590,"results":"49","hashOfConfig":"39"},{"size":3679,"mtime":1648864532000,"results":"50","hashOfConfig":"39"},{"size":4926,"mtime":1648864532000,"results":"51","hashOfConfig":"39"},{"size":7329,"mtime":1648864532000,"results":"52","hashOfConfig":"39"},{"size":1348,"mtime":1648864532000,"results":"53","hashOfConfig":"39"},{"size":12429,"mtime":1648912708428,"results":"54","hashOfConfig":"39"},{"size":22459,"mtime":1648864532000,"results":"55","hashOfConfig":"39"},{"size":33225,"mtime":1648864532000,"results":"56","hashOfConfig":"39"},{"size":3554,"mtime":1648864532000,"results":"57","hashOfConfig":"39"},{"size":3999,"mtime":1648864532000,"results":"58","hashOfConfig":"39"},{"size":2434,"mtime":1648912407449,"results":"59","hashOfConfig":"39"},{"size":2226,"mtime":1648864532000,"results":"60","hashOfConfig":"39"},{"size":546,"mtime":1648864532000,"results":"61","hashOfConfig":"39"},{"size":4262,"mtime":1648917022595,"results":"62","hashOfConfig":"39"},{"size":2141,"mtime":1648912407449,"results":"63","hashOfConfig":"39"},{"size":4021,"mtime":1648778734000,"results":"64","hashOfConfig":"39"},{"size":9746,"mtime":1648917022591,"results":"65","hashOfConfig":"39"},{"size":2698,"mtime":1648864532000,"results":"66","hashOfConfig":"39"},{"size":6449,"mtime":1648864532000,"results":"67","hashOfConfig":"39"},{"size":2111,"mtime":1648864532000,"results":"68","hashOfConfig":"39"},{"size":9794,"mtime":1648864532000,"results":"69","hashOfConfig":"39"},{"size":3308,"mtime":1648864532000,"results":"70","hashOfConfig":"39"},{"size":7846,"mtime":1648917063108,"results":"71","hashOfConfig":"39"},{"size":464,"mtime":1648778734000,"results":"72","hashOfConfig":"39"},{"size":1293,"mtime":1648778734000,"results":"73","hashOfConfig":"39"},{"size":3796,"mtime":1648917022592,"results":"74","hashOfConfig":"39"},{"size":526,"mtime":1648912407447,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1veouaz",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/index.js",[],["166","167"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/App.js",["168","169","170","171","172","173","174","175","176"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchDepositAddress.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/SendWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/Portfolio.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/TradeWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/API/API.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/Navbar.js",["177"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Settings/Settings.js",["178"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/OrdersTable.js",["179","180","181","182"],"import { useQuery } from \"react-query\";\nimport Meta1 from \"meta1dex\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport Paper from \"@mui/material/Paper\";\nimport { getAsset, getFullName } from \"./cryptoChooser\";\nimport getHistory from \"../../lib/fetchHistory\";\n\nexport const OrdersTable = (props) => {\n  const { column, direction, assets, account } = props;\n\n  const { data, isLoading, error } = useQuery(\"history\", getHistory, {\n    refetchInterval: 1500,\n  });\n\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.common.black,\n      fontWeight: 600,\n      fontSize: 15,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n      padding: 8,\n      color: \"#240000\",\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    \"&:last-child td, &:last-child th\": {\n      border: 0,\n    },\n  }));\n\n  if (isLoading) return <MetaLoader size={\"small\"} />;\n\n  return (\n    <>\n      <TableContainer style={{ overflow: \"auto\" }} component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow style={{ display: \"table-row\" }}>\n              <StyledTableCell\n                sorted={column === \"id\" ? direction : null}\n                onClick={() => {}}\n                align=\"left\"\n              >\n                Assets\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">Type</StyledTableCell>\n              <StyledTableCell align=\"center\">\n                Sender / Receiver\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">Volume</StyledTableCell>\n              <StyledTableCell align=\"left\">Status</StyledTableCell>\n              <StyledTableCell align=\"left\">Time</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.map((el, index) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell\n                  component=\"th\"\n                  style={{ width: \"20%\" }}\n                  scope=\"row\"\n                >\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                    }}\n                  >\n                    {getAsset(el.asset.abbr)}\n                    <div style={{ marginLeft: \".5rem\" }}>\n                      <p style={{ margin: 0, fontSize: \"1rem\" }}>\n                        {el.asset.abbr}\n                      </p>\n                      <p style={{ margin: 0, fontSize: \".7rem\" }}>\n                        {getFullName(el.asset.abbr)}\n                      </p>\n                    </div>\n                  </div>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.type}</h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <h6 style={{ margin: \"0\" }}>{el.usersData}</h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <h6 style={{ margin: \"0\" }}>\n                    <strong>{Number(el.volume)}</strong>\n                  </h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6\n                    style={\n                      el.status === \"Done\"\n                        ? { margin: \"0\", color: \"#00aa08\" }\n                        : { margin: \"0\", color: \"rgb(248, 0, 0)\" }\n                    }\n                  >\n                    {el.status}\n                  </h6>\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  <h6 style={{ margin: \"0\" }}>{el.time}</h6>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Footer/Footer.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/PaperWalletLogin.js",["183","184","185","186"],"/* eslint-disable array-callback-return */\nimport React, { useEffect, useState } from \"react\";\nimport { generateKeyFromPassword } from \"../../lib/createAccountWithPassword\";\nimport { Button, Form, FormField } from \"semantic-ui-react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { PrivateKey } from \"meta1js\";\nimport { createPaperWalletAsPDF } from \"./CreatePdfWallet\";\nimport Meta1 from \"meta1dex\";\nimport \"./style.css\";\n\nexport default function PaperWalletLogin({ portfolioReceiver, accountName }) {\n  const [account, setAccount] = useState(accountName);\n  const [password, setPassword] = useState(\"\");\n  const [readyToCreate, setReadyToCreate] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(true);\n  const [check, setCheck] = useState(false);\n  const debouncedAccount = useDebounce(account, 500);\n  useEffect(() => {\n    if (account?.length > 0) {\n      async function fetchAccount(debouncedAccount) {\n        // Сделать запрос к АП\n        try {\n          await portfolioReceiver.fetch(debouncedAccount);\n          setAccountChecked(true);\n        } catch (e) {\n          setAccountChecked(false);\n        }\n      }\n\n      if (debouncedAccount) {\n        fetchAccount(debouncedAccount);\n      } else {\n        setAccountChecked(false);\n      }\n    }\n  }, [debouncedAccount, account]);\n\n  // getting the privateKey\n  const getPrivateKey = (password) => PrivateKey.fromSeed(password).toWif();\n\n  const handleSubmit = () => {\n    setReadyToCreate(true);\n  };\n\n  // Generate owner, memo and active Key\n  let { privKey: owner_private } = generateKeyFromPassword(\n    account,\n    \"owner\",\n    password\n  );\n  let { privKey: active_private } = generateKeyFromPassword(\n    account,\n    \"active\",\n    password\n  );\n  let { privKey: memo_private } = generateKeyFromPassword(\n    account,\n    \"memo\",\n    password\n  );\n\n  let privateKey = getPrivateKey(password);\n  let ownerKey = owner_private.toPublicKey().toPublicKeyString();\n  let activeKey = active_private.toPublicKey().toPublicKeyString();\n  let memoKey = memo_private.toPublicKey().toPublicKeyString();\n  const handleCreatePaperWallet = async () => {\n    try {\n      await Meta1.login(localStorage.getItem(\"login\"), password);\n      createPaperWalletAsPDF(\n        localStorage.getItem(\"login\"),\n        ownerKey,\n        activeKey,\n        memoKey,\n        privateKey\n      );\n    } catch {\n      setCheck(true);\n    }\n  };\n\n  return (\n    <div className=\"login-width\">\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Login With\n          </label>\n          <input disabled value={\"Account Name (Cloud Wallet)\"} />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Account Name\n          </label>\n          <input\n            value={localStorage.getItem(\"login\") || accountName}\n            disabled\n            placeholder={\"Account Name\"}\n          />\n        </FormField>\n        <FormField>\n          <label basic className=\"paper_wallet_login_label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          {check !== false && <p style={{ color: \"red\" }}>Invalid Password</p>}\n        </FormField>\n        <Button\n          color=\"yellow\"\n          type=\"submit\"\n          fluid\n          onClick={handleCreatePaperWallet}\n          disabled={!password}\n        >\n          {\" \"}\n          Create Paper Wallet\n        </Button>\n      </Form>\n    </div>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuSecondType/RightSideHelpMenuSecondType.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanel/LeftPanel.js",["187"],"import * as React from \"react\";\nimport styles from \"./LeftPanel.module.scss\";\nimport { useEffect } from \"react\";\nimport user from \"../../images/default-pic1.png\";\nimport firstPart from \"../../images/assetsForSidebar/Shape 2.png\";\nimport secondPart from \"../../images/assetsForSidebar/Shape 2 copy.png\";\nimport homeIcon from \"../../images/assetsForSidebar/Shape 5.png\";\n\nconst LeftPanel = (props) => {\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name,\n    activeScreen,\n    userIcon,\n  } = props;\n\n  useEffect(() => {\n    if (name && portfolio) {\n      setTimeout(() => {\n        let allEvents = document.getElementsByClassName(\"event\");\n        for (let i = 0; i < allEvents.length; i++) {\n          allEvents[i].addEventListener(\"mouseover\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"block\";\n          });\n          allEvents[i].addEventListener(\"mouseout\", () => {\n            document.getElementById(\"modalBlock\").style.display = \"none\";\n          });\n        }\n      }, 25);\n    }\n  }, [name, portfolio]);\n\n  return (\n    <ul id={\"mainBlock\"} className={styles.mainBlock + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              src={userIcon}\n              id=\"leftAvatar\"\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <img style={{ padding: \".47rem .5rem\" }} src={homeIcon} alt=\"\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"login\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <div\n        id={\"modalBlock\"}\n        style={{ display: \"none\" }}\n        className={styles.modalBlock + \" event\"}\n      >\n        <div className={styles.modalContent + \" event\"}>\n          <h1 className={\"event\"}>Portfolio</h1>\n          <ul className={\"event\"}>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPortfolioHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Show All Balance\n            </li>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickOrderTableHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Open Orders\n            </li>\n            <li\n              className={\"event\"}\n              onClick={portfolio ? onClickPaperWalletHandler : null}\n              style={{ cursor: \"pointer\" }}\n            >\n              Paper Wallet\n            </li>\n          </ul>\n        </div>\n      </div>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item event\"\n            : styles.LiDisabled + \" nav-item event\"\n        }\n        onClick={portfolio ? onClickPortfolioHandler : null}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div\n              className={styles.textSpan + \" event\"}\n              style={\n                activeScreen === \"portfolio\" ||\n                activeScreen === \"sendFunds\" ||\n                activeScreen === \"deposit\" ||\n                activeScreen === \"wallet\" ||\n                activeScreen === \"paperWallet\"\n                  ? { color: \"#FFC000\" }\n                  : null\n              }\n            >\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickExchangeHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <div\n              style={{ position: \"relative\", width: \"30px\", height: \"30px\" }}\n            >\n              <img\n                src={firstPart}\n                style={{ position: \"absolute\", top: \"10px\", left: \"6.5px\" }}\n                alt=\"\"\n              />\n              <img\n                src={secondPart}\n                style={{ position: \"absolute\", top: \"14px\", left: \"14.5px\" }}\n                alt=\"\"\n              />\n            </div>\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"exchange\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickHistoryHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"orderTable\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={\n          name && portfolio\n            ? styles.Li + \" nav-item\"\n            : styles.LiDisabled + \" nav-item\"\n        }\n        onClick={portfolio ? onClickSettingsHandler : null}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div\n            className={styles.textSpan}\n            style={activeScreen === \"settings\" ? { color: \"#FFC000\" } : null}\n          >\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanel;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/UI/loader/Loader.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/index.js",["188","189","190","191","192","193","194","195"],"import MetaLoader from \"../../UI/loader/Loader\";\n// import ReactTooltip from 'react-tooltip'\nimport React, { useState, useEffect } from \"react\";\nimport getAllByOne from \"../requests/compareCrypto\";\nimport Switch from \"@mui/material/Switch\";\nimport fiatIcon from \"../../images/4292332.png\";\nimport { Loader } from \"semantic-ui-react\";\nimport \"./Wallet.css\";\nimport Meta1 from \"meta1dex\";\nimport { useQuery } from \"react-query\";\n\nimport PortfolioTable from \"./PortfolioTable\";\n\n// Трансферы между мета1 аккаунтами\n// вместо BitShares ставь Meta1\n// https://gist.github.com/bogdyak/e0172e95\"large\"db21f41ccd98c67dfaa7\n\n// Вывод на внешний аккаунт\n// вместо BitShares ставь Meta1\n// https://gist.github.com/bogdyak/087bf94c61fffc947d94e4dbbd24d692\n// обрати внимание что для EOS и XLM нужен мемо это типо доп айдишника\n\n// сначала надо залогиниться в сдк\n\nfunction Wallet(props) {\n  const {\n    portfolio,\n    onDepositClick,\n    onAssetSelect,\n    onSendClick,\n    assets,\n    accountName,\n    portfolioReceiver,\n    setFullPorfolio,\n    userCurrency,\n  } = props;\n  const [currentCurrency, setCurrentCurrency] = useState(0);\n  const [orders, setOrders] = useState(null);\n  const [hideZero, setHideZero] = useState(true);\n  const [totalChange, setTotalChange] = useState(\"0\");\n  const [totalSum, setTotalSum] = useState(0);\n  const [loader, setLoader] = useState(true);\n  const [check, setCheck] = useState(false);\n\n  const { data, isLoading, error } = useQuery(\"cryptos\", getDatas);\n\n  async function getDatas() {\n    const cryptoArray = [\"META1\", \"ETH\", \"BTC\", \"BNB\", \"EOS\", \"XLM\", \"LTC\"];\n    let fetchedCryptos = {};\n    for (let i = 0; i < cryptoArray.length; i++) {\n      fetchedCryptos[cryptoArray[i]] = await Meta1.ticker(\n        \"USDT\",\n        cryptoArray[i]\n      );\n    }\n    fetchedCryptos[\"USDT\"] = { latest: 1, percent_change: 0 };\n    return fetchedCryptos;\n  }\n\n  useEffect(() => {\n    function check() {\n      if (!check) {\n        setCheck(true);\n      }\n    }\n    check();\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoader(false);\n    }, 1500);\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      document.getElementById(\"mainBlock\").style.height = \"92vh\";\n    }, 50);\n  }, []);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const openDrop = () => {\n    document.getElementById(\"switchContainer\").style.display === \"none\"\n      ? (document.getElementById(\"switchContainer\").style.display = \"block\")\n      : (document.getElementById(\"switchContainer\").style.display = \"none\");\n  };\n\n  function currencyValue(datas) {\n    let assetValue = data[datas.name].latest;\n    if (datas.name === \"META1\") {\n      return (data[\"META1\"].latest * datas?.qty).toFixed(datas.pre);\n    } else if (assetValue * datas?.qty === 0) {\n      return \"0.00\";\n    } else {\n      return (assetValue * datas?.qty).toFixed(datas.pre);\n    }\n  }\n\n  useEffect(() => {\n    if (data && portfolio) {\n      let summTik = 0,\n        percentage = 0,\n        totSum = 0,\n        lastChange = 0;\n      for (let i of portfolio) {\n        if (Number(i.qty) > 0) {\n          percentage = Number(data[i.name].percent_change);\n          summTik = Number(currencyValue(i));\n          lastChange += ((100 - percentage) * summTik) / 100;\n          totSum += summTik;\n        }\n      }\n      let ch = Number(100 - (lastChange * 100) / totSum);\n      setTotalSum(totSum.toFixed(2));\n      if (totalSum == 0) {\n        setTotalChange(\"0.00\");\n      } else {\n        setTotalChange(ch.toFixed(2).toString());\n      }\n    }\n  }, [portfolio, data]);\n\n  const changeCurrencyToFiat = async () => {\n    document.getElementById(\"switchContainer\").style.display = \"none\";\n    setCurrentCurrency(currentCurrency + 1);\n    document.getElementById(\"forCheck\").innerText = userCurrency.split(\" \")[1];\n  };\n\n  const changeCryptoCurrency = async (e) => {\n    let chosen = document.getElementById(\"forCheck\").innerText;\n    document.getElementById(\"switchContainer\").style.display = \"none\";\n    let crypto = null;\n    switch (e.target.nodeName) {\n      case \"LI\":\n        crypto = e.target.outerText;\n        break;\n      case \"SPAN\":\n        crypto = e.target.outerText;\n        break;\n      case \"IMG\":\n        crypto = e.target.nextSibling.outerText;\n        break;\n      default:\n        break;\n    }\n    if (crypto !== \"META1\") {\n      if (document.getElementById(\"forCheck\").innerText === \"META1\") {\n        chosen = userCurrency.split(\" \")[1];\n        let data = await getAllByOne(chosen, crypto);\n        setCurrentCurrency(currentCurrency + 1);\n        setTimeout(() => {\n          let values = document.getElementsByClassName(\"currencyValues\");\n          let prices = document.getElementsByClassName(\"currencyPrices\");\n          for (let i = 0; i < values.length; i++) {\n            values[i].innerText = Number(\n              values[i].innerText * data[crypto]\n            ).toFixed(7);\n            prices[i].innerText = Number(\n              prices[i].innerText * data[crypto]\n            ).toFixed(7);\n          }\n          document.getElementById(\"valueTitle\").innerText = `VALUE (${crypto})`;\n          document.getElementById(\"priceTitle\").innerText = `PRICE (${crypto})`;\n          document.getElementById(\"forCheck\").innerText = crypto;\n        }, 2000);\n      } else {\n        let data = await getAllByOne(chosen, crypto);\n        let values = document.getElementsByClassName(\"currencyValues\");\n        let prices = document.getElementsByClassName(\"currencyPrices\");\n        for (let i = 0; i < values.length; i++) {\n          values[i].innerText = Number(values[i].innerText * data[crypto])\n            .toFixed(7)\n            .toString();\n          prices[i].innerText = Number(prices[i].innerText * data[crypto])\n            .toFixed(7)\n            .toString();\n        }\n        document.getElementById(\"valueTitle\").innerText = `VALUE (${crypto})`;\n        document.getElementById(\"priceTitle\").innerText = `PRICE (${crypto})`;\n        document.getElementById(\"forCheck\").innerText = crypto;\n      }\n    } else {\n      setCurrentCurrency(currentCurrency + 1);\n      setTimeout(() => {\n        let crypto = \"META1\";\n        let values = document.getElementsByClassName(\"currencyValues\");\n        let prices = document.getElementsByClassName(\"currencyPrices\");\n        for (let i = 0; i < values.length; i++) {\n          values[i].innerText = Number(\n            Number(values[i].innerText) / Number(data[\"META1\"].latest)\n          )\n            .toFixed(7)\n            .toString();\n          prices[i].innerText = Number(\n            Number(prices[i].innerText) / Number(data[\"META1\"].latest)\n          )\n            .toFixed(7)\n            .toString();\n        }\n        document.getElementById(\"valueTitle\").innerText = `VALUE (${crypto})`;\n        document.getElementById(\"priceTitle\").innerText = `PRICE (${crypto})`;\n        document.getElementById(\"forCheck\").innerText = crypto;\n      }, 2000);\n    }\n  };\n\n  function Portfolio(props) {\n    if (portfolio == null || portfolio.length === 0)\n      return <MetaLoader size={\"small\"} />;\n    const filteredPortfolio = hideZero\n      ? portfolio.filter((p) => p.qty > 0)\n      : portfolio;\n\n    return (\n      <PortfolioTable\n        assets={assets}\n        history={orders}\n        filteredPortfolio={filteredPortfolio}\n        onSendClick={onSendClick}\n        onDepositClick={onDepositClick}\n        onAssetSelect={props.onAssetSelect}\n        onSetHideZero={setHideZero}\n        hideZero={hideZero}\n        data={data}\n        isLoading={isLoading}\n        userCurrency={props.userCurrency}\n      />\n    );\n  }\n  return (\n    <>\n      <div style={{ marginLeft: \"3rem\" }} className={\"totalSumBlock\"}>\n        <h4\n          style={{ color: \"#505361\", fontSize: \".9rem\", marginBottom: \".3rem\" }}\n        >\n          Portfolio Balance\n        </h4>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div\n            className={\"blockSumAndPercentage\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <h2 style={{ color: \"#FFC000\", fontSize: \"2rem\", margin: \"0\" }}>\n              <strong className={\"adaptAmountMain\"}>\n                {loader && isLoading ? (\n                  <Loader size=\"mini\" active inline=\"centered\" />\n                ) : (\n                  userCurrency.split(\" \")[0] +\n                  \" \" +\n                  (totalSum * userCurrency.split(\" \")[2]).toFixed(2)\n                )}\n              </strong>\n            </h2>\n            <h5\n              style={{\n                margin: \".3rem 0 .5rem 1rem\",\n                fontSize: \".8rem\",\n                height: \"55%\",\n                padding: \".3rem\",\n                borderRadius: \"3px\",\n                boxShadow: \"0 4px 9px 5px rgba(0,0,0,.11)\",\n              }}\n              className={Number(totalChange) > 0 ? \"plusFirst\" : \"minusFirst\"}\n            >\n              {Number(totalChange) > 0 ? (\n                <i\n                  className=\"far fa-arrow-up fa-xs\"\n                  style={{ color: \"#fff\", marginRight: \".2rem\" }}\n                />\n              ) : (\n                <i\n                  className=\"far fa-arrow-down fa-xs \"\n                  style={{ color: \"#fff\", marginRight: \".2rem\" }}\n                />\n              )}\n              {loader && isLoading ? null : totalChange.replace(\"-\", \"\")} %\n            </h5>\n          </div>\n          <div className=\"rightSideBlock\">\n            <div className={\"blockChoose\"}>\n              <noscript id={\"forCheck\"}>{userCurrency.split(\" \")[1]}</noscript>\n              <div className={\"blockChoosen\"} onClick={openDrop}>\n                <span style={{ textAlign: \"center\" }}>\n                  Select currency to display...\n                </span>\n                <i\n                  className=\"fas fa-chevron-down\"\n                  style={{ marginTop: \".2rem\" }}\n                />\n              </div>\n              <div\n                id={\"switchContainer\"}\n                style={{ position: \"relative\", display: \"none\" }}\n              >\n                <ul className={\"chooseContainer\"}>\n                  <li\n                    className={\"choosenContainerItem\"}\n                    onClick={changeCurrencyToFiat}\n                  >\n                    <img\n                      src={fiatIcon}\n                      alt=\"cryptoImage\"\n                      className=\"imgContainer\"\n                    />\n                    <span className=\"spanDrop\">\n                      Fiat ({userCurrency.split(\" \")[0]})\n                    </span>\n                  </li>\n                  {assets.map((el, index) => (\n                    <li\n                      onClick={changeCryptoCurrency}\n                      className={\"choosenContainerItem\"}\n                      key={index}\n                    >\n                      <img\n                        src={el.image}\n                        style={{ width: \"35px\" }}\n                        alt=\"cryptoImage\"\n                        className=\"imgContainer\"\n                      />\n                      <span className=\"spanDrop\">{el.symbol}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n            <hr\n              style={\n                isMobile\n                  ? { display: \"block\", width: \"100%\" }\n                  : { display: \"none\", width: \"100%\" }\n              }\n            />\n            <div className={\"switcher\"} style={{ paddingTop: \"1.4rem\" }}>\n              <span>Hide Zero Balances</span>\n              <Switch\n                className={\"switch\"}\n                checked={hideZero}\n                onChange={() => {\n                  setHideZero(!hideZero);\n                }}\n                inputProps={{ \"aria-label\": \"controlled\" }}\n                color={\"warning\"}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"portfolio-table\">\n        <div className=\"portfolio-table\">\n          <Portfolio\n            onAssetSelect={onAssetSelect}\n            userCurrency={userCurrency}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Wallet;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SendForm/index.js",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216"],"import MetaLoader from \"../../UI/loader/Loader\";\nimport React, { useState, useEffect } from \"react\";\nimport useDebounce from \"../../lib/useDebounce\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport styles from \"./SendForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport { Modal, Icon, Button, Grid, Header, Popup } from \"semantic-ui-react\";\nimport Input from \"@mui/material/Input\";\nimport { helpSendTo, helpAmount, helpMax1, helpSwap } from \"../../config/help\";\nimport \"./style.css\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport Meta1 from \"meta1dex\";\n\nconst FEE = 0.0035;\n\nconst SendForm = React.memo((props) => {\n  const {\n    portfolio,\n    onBackClick,\n    sender,\n    sendApi,\n    asset,\n    onSuccessTransfer,\n    portfolioReceiver,\n    assets,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    userCurrency,\n  } = props;\n  const feeAsset = portfolio.find((asset) => asset.name === \"META1\");\n  const amountHold =\n    portfolio.find((cur) => cur.name === asset).qty == undefined\n      ? 0\n      : portfolio.find((cur) => cur.name === asset).qty;\n  const pre = assets.find((el) => el.symbol === asset).precision;\n  const [chosenCrypt, setChosenCrypt] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [assetCh, setAssetCh] = useState(asset);\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [repeat, setRepeat] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [askForPassword, setAskForPassword] = useState(false);\n  const [inProgress, setInProgress] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [accountChecked, setAccountChecked] = useState(false);\n  const [accountIsLoading, setAccountIsLoading] = useState(false);\n  const debouncedAccount = useDebounce(receiver, 500);\n  const [assetData, setAssetData] = useState({});\n  const [balance, setBalance] = useState(amountHold);\n  const [options, setOptions] = useState([]);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState(0);\n  const [precisionAssets, setPrecisionAssets] = useState();\n  const [password, setPassword] = useState(\"\");\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [feeAlert, setFeeAlert] = useState(false);\n\n  useEffect(() => {\n    async function getData() {\n      if (asset !== \"USDT\" && asset !== \"META1\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        await setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"META1\") {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      } else {\n        setPriceForAsset(1);\n      }\n    }\n    getData();\n  }, [asset]);\n\n  useEffect(() => {\n    function filterPrec() {\n      let preObj = {};\n      for (let i = 0; i < assets.length; i++) {\n        preObj[assets[i].symbol] = assets[i].precision;\n      }\n      setPrecisionAssets(preObj);\n    }\n    filterPrec();\n  }, [assets]);\n\n  useEffect(() => {\n    if (parseFloat(feeAsset?.qty) < FEE && feeAsset) {\n      setError(\"Not enough FEE\");\n    }\n  }, [feeAsset]);\n\n  useEffect(() => {\n    if (receiver.length > 0) {\n      setError(\"\");\n      setAccountIsLoading(true);\n      setAccountChecked(false);\n    }\n    setOptions(newOptions.sort((a, b) => (a.name > b.name ? 1 : -1)));\n  }, [receiver]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      let allInputs = document.getElementsByClassName(\n        \"css-1pw81iq-MuiInputBase-root-MuiFilledInput-root\"\n      );\n      for (let i = 0; i < allInputs.length; i++) {\n        allInputs[i].style.borderRadius = \"8px\";\n      }\n    }, 50);\n  }, []);\n\n  useEffect(() => {\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [amount, receiver]);\n\n  const RedditTextField = React.memo(\n    styled((props) => (\n      <TextField InputProps={{ disableUnderline: true }} {...props} />\n    ))(({ theme }) => ({\n      \"& .MuiFilledInput-root\": {\n        border: \"1px solid #e2e2e1\",\n        overflow: \"hidden\",\n        backgroundColor: theme.palette.mode === \"light\" ? \"#fcfcfb\" : \"#2b2b2b\",\n        borderRadius: \"8px !important\",\n        transition: theme.transitions.create([\n          \"border-color\",\n          \"background-color\",\n          \"box-shadow\",\n        ]),\n        \"&:hover\": {\n          backgroundColor: \"transparent\",\n        },\n        \"&.Mui-focused\": {\n          backgroundColor: \"transparent\",\n          boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n          borderColor: theme.palette.primary.main,\n        },\n      },\n    }))\n  );\n\n  const setSelected = (value) => {\n    setAssetCh(value.value);\n    portfolio.map((el) =>\n      el.name === value.value\n        ? setAssetData({\n            balance: el.qty,\n            image: el.image,\n            label: el.name,\n            value: el.name,\n          })\n        : null\n    );\n  };\n  const calculateUsdPriceHandler = (e) => {\n    let priceForOne = Number(e.target.value) * priceForAsset;\n    setBlockPrice(\n      Number(priceForOne).toFixed(precisionAssets[asset]) *\n        Number(userCurrency.split(\" \")[2])\n    );\n  };\n\n  const newOptions = portfolio.map((asset) => {\n    return {\n      image: asset.image,\n      value: asset.name,\n      label: asset.name,\n      balance: asset.qty || 0,\n    };\n  });\n\n  const calculateCryptoPriceHandler = (e) => {\n    let priceForOne = (\n      Number(e.target.value.split(\"$\")[0]) /\n      priceForAsset /\n      Number(userCurrency.split(\" \")[2])\n    ).toFixed(precisionAssets[asset]);\n    setAmount(priceForOne);\n    setBlockPrice(e.target.value);\n  };\n\n  useEffect(() => {\n    async function fetchAccount(debouncedAccount) {\n      // Сделать запрос к АП\n      try {\n        await portfolioReceiver.fetch(debouncedAccount);\n        setAccountChecked(true);\n        setAccountIsLoading(false);\n        if (receiver === sender) {\n          setError(\"Can't transfer to self\");\n        }\n      } catch (e) {\n        setAccountChecked(false);\n        setAccountIsLoading(false);\n        setError(\"Invalid receiver\");\n      }\n    }\n\n    if (debouncedAccount) {\n      fetchAccount(debouncedAccount);\n    } else {\n      setAccountChecked(false);\n      setAccountIsLoading(false);\n    }\n\n    if (Number(amount) <= 0 && clickedInputs) {\n      setError(\"Amount can't be 0, Please update it\");\n    } else if (Number(amount) > Number(balance)) {\n      setError(\"You don't have enough crypto\");\n    } else {\n      setError(\"\");\n    }\n  }, [debouncedAccount, amount]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const performTransfer = async (params) => {\n    let asset = assetCh;\n    setError(null);\n    setInProgress(true);\n    const { password, to, amount, message } = params;\n    const result = await sendApi.perform({\n      password,\n      to,\n      amount,\n      message,\n      asset,\n    });\n    if (result.error) {\n      if (result.error === \"Invalid credentials\") {\n        setError(result.error);\n      } else if ((asset === \"META1\" && feeAsset.qty === amount) || !feeAsset) {\n        setError(\"You don't have enough cryptocurrency to pay FEE\");\n      } else {\n        setError(\"Invalid Receiver\");\n      }\n      setRepeat(true);\n    } else {\n      setModalOpened(true);\n    }\n    setInProgress(false);\n  };\n\n  const setAssetMax = () => {\n    setAmount(assetData.balance);\n    setBlockPrice(\n      Number(assetData.balance * priceForAsset).toFixed(\n        precisionAssets[asset]\n      ) * Number(userCurrency.split(\" \")[2])\n    );\n  };\n\n  useEffect(() => {\n    if (repeat) {\n      setTimeout(() => {\n        setError(null);\n        setRepeat(false);\n      }, 2000);\n    }\n  }, [repeat]);\n\n  useEffect(() => {\n    portfolio.map((el) =>\n      el.name === assetCh\n        ? setAssetData({\n            balance: el.qty,\n            image: el.image,\n            label: el.name,\n            value: el.name,\n          })\n        : null\n    );\n  }, [assetCh, assets]);\n  const PasswordForm = (props) => {\n    const [password, setPassword] = useState(\"\");\n    return (\n      <div class=\"ui large fluid labeled input action\">\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value.trim())}\n        />\n        <Button color=\"yellow\" onClick={(e) => props.onSubmit(password)}>\n          {\" \"}\n          Send{\" \"}\n        </Button>\n      </div>\n    );\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  return (\n    <>\n      <div>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the send of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Send</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"tiny\"\n          id={\"modal\"}\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n          }}\n        >\n          <Modal.Header>Transfer Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={1}>\n                <Grid.Column>\n                  <h3>\n                    {amount} of {assetCh} sent to {receiver}\n                  </h3>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              positive\n              onClick={() => {\n                setModalOpened(false);\n                onSuccessTransfer();\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"justFlexAndDirect\"}>\n          <div className={\"widthh100\"}>\n            <div className={styles.containerMain}>\n              <div className={styles.mainBlock}>\n                <div className={styles.leftBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Send</h2>\n                  <RedditTextField\n                    label=\"From\"\n                    defaultValue={sender}\n                    className={styles.input}\n                    disabled\n                    id=\"reddit-input\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div\n                    className={styles.inputForAmount}\n                    style={{ marginBottom: \"1rem\" }}\n                  >\n                    <span\n                      style={{\n                        fontSize: \".8rem\",\n                        color: \"#505361\",\n                        marginBottom: \".3rem\",\n                      }}\n                    >\n                      Amount {assetData.label}\n                    </span>\n                    <Input\n                      id={\"inputForAmount\"}\n                      type=\"number\"\n                      value={amount ? amount : \"\"}\n                      min=\"0\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          {assetData.label}\n                        </InputAdornment>\n                      }\n                      onChange={(e) => {\n                        const amountOut = e.target.value;\n                        if (\n                          e.target.value.length < 11 &&\n                          /[-+]?[0-9]*\\.?[0-9]*/.test(e.target.value) &&\n                          Number(e.target.value) >= 0\n                        ) {\n                          setClickedInputs(true);\n                          setAmount(amountOut);\n                          calculateUsdPriceHandler(e);\n                        }\n                      }}\n                      placeholder={balance}\n                    />\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        marginTop: \".1rem\",\n                        fontSize: \"1rem\",\n                        color: \"#505361\",\n                      }}\n                    >\n                      <input\n                        type=\"number\"\n                        className={styles.inputDollars}\n                        min=\"0\"\n                        inputmode=\"numeric\"\n                        pattern=\"\\d*\"\n                        onChange={(e) => {\n                          if (Number(e.target.value) >= 0) {\n                            setClickedInputs(true);\n                            calculateCryptoPriceHandler(e);\n                          }\n                        }}\n                        placeholder={`Amount ${userCurrency.split(\" \")[1]}`}\n                        value={amount ? blockPrice : \"\"}\n                      />\n                      <span>{userCurrency.split(\" \")[0]}</span>\n                    </div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        position: \"relative\",\n                      }}\n                    >\n                      <span style={{ color: \"#505361\", paddingTop: \"2rem\" }}>\n                        FEE: 0.00035 META1\n                      </span>\n                      <div\n                        className=\"max-button-new\"\n                        style={{\n                          position: \"absolute\",\n                          right: \"0\",\n                          bottom: \"-3px\",\n                        }}\n                      >\n                        <Popup\n                          content={`Click this button to sell all your ${assetData.label}`}\n                          position={isMobile ? \"bottom left\" : \"bottom center\"}\n                          trigger={\n                            <Button\n                              className={\"btn\"}\n                              secondary\n                              onClick={setAssetMax}\n                              floated=\"right\"\n                              size=\"mini\"\n                            >\n                              MAX\n                            </Button>\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <Grid.Column>\n                    <TextField\n                      InputProps={{ disableUnderline: true }}\n                      label=\"Password\"\n                      className={styles.input}\n                      type={\"password\"}\n                      id=\"reddit-input pass\"\n                      variant=\"filled\"\n                      style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                      value={password}\n                      onChange={({ target }) => setPassword(target.value)}\n                    />\n                  </Grid.Column>\n                </div>\n                <div\n                  style={{\n                    marginTop: \"4rem\",\n                    marginLeft: \".3rem\",\n                    width: \"40px\",\n                    height: \"40px\",\n                    background: \"#fdc000\",\n                    borderRadius: \"40px\",\n                    padding: \".7rem .85rem\",\n                  }}\n                  className=\"text-center-s\"\n                >\n                  <i\n                    style={{ color: \"#fff\" }}\n                    className={\n                      isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                    }\n                  />\n                </div>\n                <div className={styles.rightBlockSend}>\n                  <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                  <TextField\n                    InputProps={{ disableUnderline: true }}\n                    label=\"To\"\n                    value={receiver}\n                    onChange={(e) => {\n                      setReceiver(e.target.value);\n                    }}\n                    className={styles.input}\n                    id=\"reddit-input receiver\"\n                    variant=\"filled\"\n                    style={{ marginBottom: \"1rem\", borderRadius: \"8px\" }}\n                  />\n                  <div className={styles.blockInfoCrypto}>\n                    <img\n                      style={{ width: \"60px\", height: \"60px\" }}\n                      src={assetData.image}\n                      alt=\"cryptImg\"\n                    />\n                    <div className={styles.blockInfoText}>\n                      <span>You will Send {assetData.label} Coin</span>\n                      <h3>\n                        {Number(amount) ? amount : 0} {assetData.label}\n                      </h3>\n                      <span>\n                        {blockPrice || 0} {userCurrency.split(\" \")[1]}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {!askForPassword && !inProgress && (\n                <Grid.Row className={\"buttonSend\"} columns={1}>\n                  <Popup\n                    disabled\n                    trigger={\n                      <button\n                        className={\"btnSend ui button yellow buttSend\"}\n                        style={{\n                          marginLeft: \"2rem\",\n                          marginTop: \"1rem\",\n                          boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, .11)\",\n                        }}\n                        disabled={\n                          !accountChecked ||\n                          amount === \"\" ||\n                          password === \"\" ||\n                          error\n                        }\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (Number(amount) > Number(amountHold)) {\n                            setAskForPassword(false);\n                            setError(`your balance is not enough `);\n                            setRepeat(true);\n                          } else {\n                            let password =\n                              document.getElementById(\n                                \"reddit-input pass\"\n                              ).value;\n                            if (receiver !== \"\" && password !== \"\" && amount) {\n                              if (parseFloat(feeAsset?.qty) < FEE) {\n                                setError(\"Not enough FEE\");\n                              } else {\n                                if (\n                                  assetCh === \"META1\" &&\n                                  Number(amount) === Number(feeAsset.qty)\n                                ) {\n                                  setFeeAlert(true);\n                                } else {\n                                  performTransfer({\n                                    ...{ to: receiver },\n                                    ...{\n                                      password,\n                                      amount,\n                                      assetCh,\n                                      message,\n                                    },\n                                  });\n                                }\n                              }\n                            } else {\n                              setError(\n                                \"You have entered incorrect data, please check it.\"\n                              );\n                            }\n                          }\n                        }}\n                      >\n                        Confirm\n                      </button>\n                    }\n                  />\n                </Grid.Row>\n              )}\n\n              {inProgress && <MetaLoader size={\"small\"} />}\n\n              {error && (\n                <Grid>\n                  <Grid.Row centered>\n                    <h5 style={{ color: \"red\" }}>{error}</h5>\n                  </Grid.Row>\n                </Grid>\n              )}\n            </div>\n          </div>\n          <div className={\"bottomBlockAdapt\"}>\n            <RightSideHelpMenuSecondType\n              onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n              onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default SendForm;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/index.js",["217","218","219","220","221","222","223","224","225","226","227","228","229"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"./ExchangeForm.module.scss\";\nimport RightSideHelpMenuSecondType from \"../RightSideHelpMenuSecondType/RightSideHelpMenuSecondType\";\nimport ExchangeSelect from \"./ExchangeSelect.js\";\nimport {\n  Image,\n  Modal,\n  Button,\n  Grid,\n  Icon,\n  Label,\n  Popup,\n} from \"semantic-ui-react\";\nimport { helpInput, helpMax1, helpSwap } from \"../../config/help\";\nimport Input from \"@mui/material/Input\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport \"./ExchangeForm.css\";\nimport Meta1 from \"meta1dex\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport leftArrow from \"../../images/exchangeAssets/Shape Left.png\";\nimport rightArrow from \"../../images/exchangeAssets/Shape 2 copy 2.png\";\n\nexport default function ExchangeForm(props) {\n  const {\n    onSuccessModal,\n    trader,\n    asset,\n    onBackClick,\n    metaUrl,\n    portfolioReceiver,\n    onSuccessTrade,\n    userCurrency,\n  } = props;\n  const [portfolio, setPortfolio] = useState(props.portfolio);\n  const [passwordShouldBeProvided, setPasswordShouldBeProvided] =\n    useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [assets, setAssets] = useState(props.assets);\n  const [options, setOptions] = useState([]);\n  const [selectedFrom, setSelectedFrom] = useState(props.selectedFrom);\n  const [selectedTo, setSelectedTo] = useState(props.selectedTo);\n  const [selectedFromAmount, setSelectedFromAmount] = useState(\"\");\n  const [selectedToAmount, setSelectedToAmount] = useState(0);\n  const [pair, setPair] = useState(null);\n  const [invalidEx, setInvalidEx] = useState(false);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [tradeError, setTradeError] = useState(null);\n  const [tradeInProgress, setTradeInProgress] = useState(false);\n  const [priceForAsset, setPriceForAsset] = useState(0);\n  const [blockPrice, setBlockPrice] = useState();\n  const [clickedInputs, setClickedInputs] = useState(false);\n  const [error, setError] = useState();\n  const [feeAlert, setFeeAlert] = useState(false);\n\n  useEffect(() => {\n    console.log(pair);\n  }, [pair]);\n\n  useEffect(() => {\n    async function getPriceForAsset() {\n      if (asset !== \"META1\" && asset !== \"USDT\") {\n        const response = await fetch(\n          `https://api.binance.com/api/v3/ticker/24hr?symbol=${asset}USDT`\n        );\n        setPriceForAsset((await response.json()).lastPrice);\n      } else if (asset === \"USDT\") {\n        setPriceForAsset(1);\n      } else {\n        Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n          setPriceForAsset(Number(res.latest).toFixed(2))\n        );\n      }\n    }\n    getPriceForAsset();\n  }, [asset, portfolio]);\n\n  useEffect(() => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    if (Number(selectedFromAmount) <= 0 && clickedInputs) {\n      setError(\n        `The amount must be greater than ${(\n          0.003 * Number(userCurrency.split(\" \")[2])\n        ).toFixed(4)} ${userCurrency.split(\" \")[1]}`\n      );\n    } else {\n      setError(\"\");\n    }\n    if (Number(blockPrice) < 0.003 * Number(userCurrency.split(\" \")[2])) {\n      setError(\n        `The amount must be greater than ${Number(\n          (0.003 * Number(userCurrency.split(\" \")[2])).toFixed(4)\n        )} ${userCurrency.split(\" \")[1]}`\n      );\n      console.log(feeAsset);\n    } else if (feeAsset == undefined) {\n      setError(\"Not enough FEE\");\n    } else {\n      setError(\"\");\n    }\n  }, [selectedFromAmount, blockPrice]);\n\n  useEffect(() => {\n    const currentPortfolio = props.portfolio || [];\n    setAssets(props.assets);\n    const getBalance = (symbol) => {\n      const assetInWallet = currentPortfolio.find((el) => el.name === symbol);\n      if (assetInWallet) {\n        return assetInWallet.qty;\n      } else {\n        return 0;\n      }\n    };\n    const newOptions = assets.map((asset) => {\n      return {\n        image: asset.image,\n        value: asset.symbol,\n        label: asset.symbol,\n        pre: asset.precision,\n        balance: getBalance(asset.symbol) || 0,\n      };\n    });\n\n    setOptions(newOptions);\n    if (selectedTo == null && options !== []) {\n      const from = asset\n        ? newOptions.find((el) => el.value === asset)\n        : newOptions[0];\n      let to = asset\n        ? newOptions.find((el) => el.value === \"META1\")\n        : newOptions[1];\n      if (asset === \"META1\") {\n        to = newOptions.find((el) => el.value === \"USDT\");\n      }\n      setSelectedTo(to);\n      setSelectedFrom(from);\n    } else {\n      setSelectedTo(newOptions.find((o) => o.value === selectedTo.value));\n      setSelectedFrom(newOptions.find((o) => o.value === selectedFrom.value));\n    }\n  }, [props.assets, props.portfolio]);\n\n  useEffect(() => {\n    if (!isMobile) {\n      setTimeout(() => {\n        document.getElementById(\"mainBlock\").style.height = \"92vh\";\n      }, 25);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n  }, [pair]);\n\n  const calculateUsdPriceHandler = (e) => {\n    if (e.target.value.length != 0) {\n      let priceForOne = (Number(e.target.value) * priceForAsset).toFixed(2);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    } else {\n      setBlockPrice(NaN);\n    }\n  };\n\n  const calculateCryptoPriceHandler = (e) => {\n    setBlockPrice(e.target.value);\n    let priceForOne = (\n      Number(e.target.value) /\n      priceForAsset /\n      Number(userCurrency.split(\" \")[2])\n    ).toFixed(selectedFrom.label === \"USDT\" ? 3 : selectedFrom.pre);\n    setSelectedFromAmount(priceForOne);\n  };\n\n  const handleCalculateSelectedTo = () => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedToAmount(NaN);\n      setSelectedFromAmount(NaN);\n      setBlockPrice(NaN);\n      return;\n    }\n    setInvalidEx(false);\n    if (selectedFromAmount !== \"\" && selectedFromAmount) {\n      const amount =\n        (selectedFromAmount / pair.lowest_ask).toString().substr(0, 11) * 1;\n      setSelectedToAmount(amount);\n    } else {\n      setSelectedToAmount(0);\n    }\n  };\n  const handleCalculateSelectedFrom = () => {\n    if (pair == null) return;\n    if (pair.lowest_ask === \"0\" || parseFloat(pair.lowest_ask) === 0.0) {\n      setInvalidEx(true);\n      setSelectedFromAmount(0);\n      setBlockPrice(\"\");\n      return;\n    }\n    setInvalidEx(false);\n    const amount = selectedToAmount * pair.lowest_ask;\n    setSelectedFromAmount(amount);\n  };\n\n  useEffect(() => {\n    if (selectedFromAmount > 0) {\n      setSelectedToAmount(0);\n    }\n    if (selectedFromAmount?.length) {\n      handleCalculateSelectedTo();\n    }\n    if (selectedToAmount?.length) {\n      handleCalculateSelectedFrom();\n    }\n    if (selectedToAmount === \"\") {\n      setSelectedFromAmount(\"\");\n    }\n  }, [selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    setPasswordShouldBeProvided(false);\n  }, [selectedFrom, selectedTo, selectedFromAmount, selectedToAmount]);\n\n  useEffect(() => {\n    async function fetchPair(selectedTo, selectedFrom) {\n      if (\n        selectedTo != null &&\n        selectedFrom != null &&\n        selectedFrom.value !== undefined\n      ) {\n        const newPair = await Meta1.ticker(\n          selectedFrom.value,\n          selectedTo.value\n        );\n        setPair(newPair);\n      }\n    }\n    fetchPair(selectedTo, selectedFrom);\n  }, [selectedFrom, selectedTo]);\n\n  const changeAssetHandler = async (val) => {\n    if (val !== \"META1\" && val !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      );\n    }\n  };\n\n  const changeAssetHandlerSwap = async (val) => {\n    if (val.label !== \"META1\" && val.label !== \"USDT\") {\n      const response = await fetch(\n        `https://api.binance.com/api/v3/ticker/24hr?symbol=${val.label}USDT`\n      );\n      await setPriceForAsset((await response.json()).lastPrice);\n    } else if (val.label === \"USDT\") {\n      setPriceForAsset(1);\n    } else {\n      Meta1.ticker(\"USDT\", \"META1\").then((res) =>\n        setPriceForAsset(Number(res.latest).toFixed(2))\n      );\n    }\n  };\n\n  const swapAssets = (e) => {\n    e.preventDefault();\n    const oldFrom = selectedFrom;\n    setSelectedFrom(selectedTo);\n    setSelectedTo(oldFrom);\n  };\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const prepareTrade = () => {\n    const feeAsset = portfolio?.find((asset) => asset.name === \"META1\");\n    localStorage.setItem(\"selectFrom\", selectedFromAmount);\n    localStorage.setItem(\"selectTo\", selectedToAmount);\n    if (\n      selectedFrom.label === \"META1\" &&\n      Number(selectedFromAmount) === Number(feeAsset.qty)\n    ) {\n      setFeeAlert(true);\n    } else {\n      setPasswordShouldBeProvided(true);\n    }\n  };\n\n  const performTrade = async () => {\n    try {\n      setTradeInProgress(true);\n      setPassword(\"\");\n      setPasswordShouldBeProvided(false);\n\n      const buyResult = await trader.perform({\n        from: selectedFrom.value,\n        to: selectedTo.value.trim(),\n        amount: selectedToAmount,\n        password: password,\n      });\n\n      if (buyResult.error) {\n        setTradeError(buyResult.error);\n      } else {\n        setModalOpened(true);\n      }\n\n      setTradeInProgress(false);\n    } catch (e) {\n      setTradeInProgress(false);\n    }\n  };\n\n  const setAssetMax = (e) => {\n    e.preventDefault();\n    setSelectedFromAmount(selectedFrom.balance);\n    handleCalculateSelectedTo();\n    setTimeout(() => {\n      let priceForOne = (\n        Number(document.getElementById(\"inputAmount\").value) * priceForAsset\n      ).toFixed(3);\n      setBlockPrice(priceForOne * Number(userCurrency.split(\" \")[2]));\n    }, 25);\n  };\n  const ariaLabel = { \"aria-label\": \"description\" };\n\n  // const getAssets = (except) => options.filter((el) => el.value !== except);\n  if (selectedFrom == null && selectedTo == null) return null;\n\n  const getAssets = (except) => options.filter((el) => el.value !== except);\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Exchange</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              onClick={onBackClick}\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n        <Modal\n          size=\"mini\"\n          open={tradeError !== null}\n          onClose={() => setTradeError(null)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Error occured</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={2}>\n                <Grid.Column width={4}>\n                  <Icon disabled name=\"warning sign\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column width={10}>\n                  <div className=\"trade-error\">{tradeError}</div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button positive onClick={() => setTradeError(null)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={feeAlert}\n          onClose={() => setFeeAlert(false)}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>All META1 transfer</Modal.Header>\n          <Modal.Content style={{ height: \"55%\" }}>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4 style={{ textAlign: \"center\" }}>\n                Insufficient Balance: prevented the swap of Max amount of META1.\n                <br />\n                META1 coin is required to pay network fees, otherwise your\n                account can become unusable\n              </h4>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button negative onClick={() => setFeeAlert(false)}>\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <Modal\n          size=\"mini\"\n          open={modalOpened}\n          onClose={() => {\n            setModalOpened(false);\n            onSuccessModal();\n            onSuccessTrade();\n          }}\n          id={\"modalExch\"}\n        >\n          <Modal.Header>Trade Completed</Modal.Header>\n          <Modal.Content>\n            <Grid verticalAlign=\"middle\" centered>\n              <Grid.Row centered columns={3}>\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedFrom.image} />\n                    <p>\n                      {\" \"}\n                      {(localStorage.getItem(\"selectFrom\") * 1).toFixed(\n                        selectedFrom.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n\n                <Grid.Column width={3}>\n                  <Icon disabled name=\"arrow right\" size=\"huge\" />\n                </Grid.Column>\n\n                <Grid.Column>\n                  <div className=\"asset-traded\">\n                    <Image size=\"tiny\" src={selectedTo.image} />\n                    <p>\n                      {(localStorage.getItem(\"selectTo\") * 1).toFixed(\n                        selectedTo.pre\n                      )}{\" \"}\n                    </p>\n                  </div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              style={{ backgroundColor: \"#fc0\", color: \"white\" }}\n              onClick={() => {\n                onSuccessModal();\n                setModalOpened(false);\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n        <div className={\"adaptForMainExchange\"}>\n          <div className={styles.mainBlock}>\n            <div className={styles.mainBlockExchange}>\n              <div className={styles.leftBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Exchange</h2>\n                <div id=\"from\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedFrom(val);\n                            changeAssetHandler(val.value);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedTo.value)}\n                          selectedValue={selectedFrom}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            content={helpInput(\n                              selectedFrom?.value,\n                              selectedTo?.value\n                            )}\n                            position=\"bottom center\"\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  placeholder=\"Amount crypto\"\n                                  value={selectedFromAmount}\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    console.log(e);\n                                    if (\n                                      e.target.value.length < 11 &&\n                                      /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                        e.target.value\n                                      ) &&\n                                      Number(e.target.value) >= 0\n                                    ) {\n                                      setSelectedFromAmount(e.target.value);\n                                      handleCalculateSelectedTo();\n                                      calculateUsdPriceHandler(e);\n                                      setClickedInputs(true);\n                                    }\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedFrom.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  id={\"inputAmount\"}\n                                  disabled={invalidEx}\n                                  min=\"0\"\n                                  inputmode=\"numeric\"\n                                  pattern=\"\\d*\"\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                  }}\n                                >\n                                  <input\n                                    className={styles.inputDollars}\n                                    onChange={(e) => {\n                                      if (\n                                        e.target.value.length < 11 &&\n                                        /[-+]?[0-9]*\\.?[0-9]*/.test(\n                                          e.target.value\n                                        ) &&\n                                        Number(e.target.value) >= 0\n                                      ) {\n                                        calculateCryptoPriceHandler(e);\n                                        setClickedInputs(true);\n                                      }\n                                    }}\n                                    min=\"0\"\n                                    inputmode=\"numeric\"\n                                    pattern=\"\\d*\"\n                                    type={\"number\"}\n                                    placeholder={`Amount ${\n                                      userCurrency.split(\" \")[1]\n                                    }`}\n                                    disabled={invalidEx}\n                                    style={\n                                      invalidEx ? { opacity: \"0.5\" } : null\n                                    }\n                                    value={blockPrice}\n                                  />\n                                  <span>{userCurrency.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                          <div className=\"max-button\">\n                            <Popup\n                              content={helpMax1(selectedFrom?.value)}\n                              position=\"bottom center\"\n                              trigger={\n                                <Button\n                                  secondary\n                                  className={\"btn\"}\n                                  onClick={setAssetMax}\n                                  floated=\"right\"\n                                  size=\"mini\"\n                                >\n                                  MAX\n                                </Button>\n                              }\n                            />\n                          </div>\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n              <div\n                style={{ marginTop: \"2.3rem\", marginLeft: \".3rem\" }}\n                className=\"padding-y-large text-center-s\"\n              >\n                <Popup\n                  content={helpSwap(selectedFrom?.value, selectedTo?.value)}\n                  position=\"top center\"\n                  trigger={\n                    <Button\n                      className={styles.button}\n                      style={{ width: \"3rem\", height: \"3rem\" }}\n                      onClick={(e) => {\n                        changeAssetHandlerSwap(selectedTo);\n                        setSelectedToAmount(NaN);\n                        setSelectedFromAmount(NaN);\n                        setBlockPrice(NaN);\n                        swapAssets(e);\n                      }}\n                    >\n                      <div className={styles.blockArrows}>\n                        <img\n                          src={leftArrow}\n                          className={styles.leftArrow}\n                          alt=\"\"\n                        />\n                        <img\n                          src={rightArrow}\n                          className={styles.rightArrow}\n                          alt=\"\"\n                        />\n                      </div>\n                    </Button>\n                  }\n                />\n              </div>\n              <div className={styles.rightBlockExchange}>\n                <h2 style={{ textAlign: \"center\" }}>Receive</h2>\n                <div id=\"to\">\n                  <Grid stackable>\n                    <Grid.Column columns={2} className=\"flex-middle\">\n                      <Grid.Column>\n                        <ExchangeSelect\n                          onChange={(val) => {\n                            setSelectedTo(val);\n                            setSelectedFromAmount(NaN);\n                            setSelectedToAmount(NaN);\n                            setBlockPrice(NaN);\n                            setInvalidEx(false);\n                          }}\n                          options={getAssets(selectedFrom.value)}\n                          selectedValue={selectedTo}\n                        />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div>\n                          <h1> </h1>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <div className=\"wallet-input\">\n                          <Popup\n                            wide\n                            content={helpInput(\n                              selectedTo?.value,\n                              selectedFrom?.value\n                            )}\n                            position=\"bottom center\"\n                            disabled\n                            trigger={\n                              <div className={styles.inputForAmount}>\n                                <Input\n                                  style={isMobile ? { width: \"100%\" } : null}\n                                  placeholder=\"Amount crypto\"\n                                  value={\n                                    selectedFromAmount ? selectedToAmount : 0\n                                  }\n                                  type={\"number\"}\n                                  onChange={(e) => {\n                                    setSelectedToAmount(\n                                      Number(e.target.value).toFixed(\n                                        selectedTo.pre\n                                      )\n                                    );\n                                    handleCalculateSelectedFrom();\n                                  }}\n                                  endAdornment={\n                                    <InputAdornment position=\"end\">\n                                      {selectedTo.label}\n                                    </InputAdornment>\n                                  }\n                                  inputProps={ariaLabel}\n                                  disabled\n                                />\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"space-between\",\n                                    marginTop: \".1rem\",\n                                    fontSize: \"1rem\",\n                                    color: \"#505361\",\n                                  }}\n                                >\n                                  <span>\n                                    {!invalidEx && selectedFromAmount\n                                      ? blockPrice\n                                      : 0}\n                                  </span>\n                                  <span>{userCurrency.split(\" \")[0]}</span>\n                                </div>\n                              </div>\n                            }\n                          />\n                        </div>\n                        <div style={{ marginTop: \"1px\" }}>\n                          {invalidEx && (\n                            <Label pointing color=\"red\">\n                              Trade is currently unavailable\n                            </Label>\n                          )}\n                        </div>\n                      </Grid.Column>\n                    </Grid.Column>\n                  </Grid>\n                </div>\n              </div>\n            </div>\n            <div className={styles.absoluteBottomBlock}>\n              <div className={styles.centeredBlock}>\n                <div className={styles.leftBlockCrypt}>\n                  <div\n                    className={styles.textBlockLeft}\n                    style={{ marginRight: \"1rem\" }}\n                  >\n                    <span>You are exchanging</span>\n                    <h4>\n                      {selectedFromAmount || 0} {selectedFrom.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrency.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedFrom.image}\n                      alt=\"\"\n                    />\n                  </div>\n                </div>\n                <div className={styles.centeredBlockCrypt}>\n                  <div className={styles.iconBlock}>\n                    <i\n                      style={{ color: \"#fff\" }}\n                      className={\n                        isMobile ? \"far fa-arrow-down\" : \"far fa-arrow-right\"\n                      }\n                    />\n                  </div>\n                </div>\n                <div className={styles.rightBlockCrypt}>\n                  <div className={\"imgToCenter\"} style={{ display: \"flex\" }}>\n                    <img\n                      style={{\n                        width: \"80px\",\n                        height: \"80px\",\n                        margin: \"0 auto\",\n                      }}\n                      src={selectedTo.image}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className={styles.textBlockRight}>\n                    <span>You will Receive</span>\n                    <h4>\n                      {selectedFromAmount ? selectedToAmount : 0}{\" \"}\n                      {selectedTo.label}\n                    </h4>\n                    <span>\n                      {!invalidEx && blockPrice\n                        ? `${blockPrice}${userCurrency.split(\" \")[0]}`\n                        : 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {error && !invalidEx && selectedFromAmount ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>{error}</h5>\n              </Grid.Row>\n            ) : null}\n            {Number(selectedFrom.balance) < Number(selectedFromAmount) ? (\n              <Grid.Row centered style={{ marginBottom: \"1rem\" }}>\n                <h5 style={{ color: \"red\", textAlign: \"center\" }}>\n                  You don't have enough crypto\n                </h5>\n              </Grid.Row>\n            ) : null}\n            <div className=\"hidden-pass ui input\">\n              {passwordShouldBeProvided && (\n                <>\n                  <Input\n                    size=\"medium\"\n                    type=\"password\"\n                    placeholder=\"password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                    value={password}\n                  />\n\n                  <Button\n                    disabled={password.length === 0}\n                    onClick={performTrade}\n                    size=\"medium\"\n                    color=\"yellow\"\n                    ui\n                  >\n                    Submit\n                  </Button>\n                </>\n              )}\n\n              {tradeInProgress && <MetaLoader size={\"small\"} />}\n\n              {!passwordShouldBeProvided && !tradeInProgress && (\n                <Button\n                  className={\"btnExch\"}\n                  disabled={\n                    tradeInProgress ||\n                    selectedToAmount == null ||\n                    selectedToAmount == 0 ||\n                    selectedToAmount === 0.0 ||\n                    selectedFrom.balance === 0 ||\n                    Number(selectedFrom.balance) < Number(selectedFromAmount) ||\n                    !selectedFromAmount ||\n                    !selectedToAmount ||\n                    blockPrice == 0 ||\n                    error\n                  }\n                  onClick={prepareTrade}\n                  color=\"yellow\"\n                  size=\"large\"\n                >\n                  Exchange\n                </Button>\n              )}\n            </div>\n          </div>\n          <div className={\"flexNeed\"}>\n            <RightSideHelpMenuSecondType\n              onClickExchangeEOSHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/EOS.fb40b8e0.svg\",\n                  value: \"EOS\",\n                  label: \"EOS\",\n                  pre: 4,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"EOS\") {\n                    setSelectedFrom({\n                      image: \"/static/media/EOS.fb40b8e0.svg\",\n                      value: \"EOS\",\n                      label: \"EOS\",\n                      pre: 4,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n              onClickExchangeUSDTHandler={() => {\n                setSelectedFrom({\n                  image: \"/static/media/USDT.004b5e55.svg\",\n                  value: \"USDT\",\n                  label: \"USDT\",\n                  pre: 2,\n                  balance: 0,\n                });\n                portfolio.map((el) => {\n                  if (el.name === \"USDT\") {\n                    setSelectedFrom({\n                      image: \"/static/media/USDT.004b5e55.svg\",\n                      value: \"USDT\",\n                      label: \"USDT\",\n                      pre: 2,\n                      balance: el.qty,\n                    });\n                  }\n                });\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/index.js",["230","231"],"import React, { useState } from \"react\";\nimport { UserInformationForm } from \"./UserInformationForm.js\";\nimport SubmitForm from \"./SubmitForm.js\";\nimport createAccountWithPassword from \"../../lib/createAccountWithPassword.js\";\nimport { Button, Grid, Icon } from \"semantic-ui-react\";\nimport RightSideHelpMenuFirstType from \"../RightSideHelpMenuFirstType/RightSideHelpMenuFirstType\";\n\nimport \"./SignUpForm.css\";\n\nexport default function SignUpForm(props) {\n  const {\n    onRegistration,\n    onClickExchangeEOSHandler,\n    onClickExchangeUSDTHandler,\n    portfolio,\n  } = props;\n  const [accountName, setAccountName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [step, setStep] = useState(1);\n\n  const stepFirstSubmit = (\n    accName,\n    pass,\n    newEmail,\n    newPhone,\n    newLastName,\n    newFirstName\n  ) => {\n    setAccountName(accName);\n    setFirstName(newFirstName);\n    setPassword(pass);\n    setEmail(newEmail);\n    setLastName(newLastName);\n    setPhone(newPhone);\n    setStep(2);\n  };\n\n  const stepSecondSubmit = async () => {\n    try {\n      await createAccountWithPassword(\n        accountName,\n        password,\n        false,\n        \"\",\n        1,\n        \"\",\n        phone,\n        email,\n        lastName,\n        firstName\n      );\n      localStorage.setItem(\"login\", accountName);\n      window.location.reload();\n      onRegistration(accountName, password, email);\n    } catch (e) {}\n  };\n\n  const stepForm =\n    step === 1 ? (\n      <UserInformationForm\n        {...props}\n        onSubmit={stepFirstSubmit}\n        accountName={accountName}\n        lastName={lastName}\n        firstName={firstName}\n        password={password}\n        email={email}\n        phone={phone}\n      />\n    ) : (\n      <SubmitForm onSubmit={stepSecondSubmit} password={password} />\n    );\n\n  return (\n    <>\n      <div>\n        <div\n          style={{\n            background: \"#fff\",\n            width: \"100%\",\n            height: \"3.7rem\",\n            padding: \"1.1rem 2rem\",\n            boxShadow: \"0 9px 10px 0 rgba(0,0,0,0.11)\",\n            fontSize: \"1.3rem\",\n            fontWeight: \"bold\",\n          }}\n        >\n          <span style={{ color: \"#240000\" }}>META Lite Wallet</span>\n        </div>\n        <div className={\"createWalletForm\"}>\n          <div className={\"justFlexAndDirect\"}>\n            <div className={\"regForm\"}>\n              <Button\n                onClick={step === 1 ? props.onBackClick : () => setStep(1)}\n                style={{ color: \"#fdc000\", fontSize: \".9rem\" }}\n                labelPosition=\"left\"\n              >\n                <i\n                  className=\"fal fa-arrow-left\"\n                  style={{ marginRight: \".5rem\" }}\n                />\n                <span\n                  style={{\n                    borderBottom: \"1px solid #fdc000\",\n                    color: \"#fdc000\",\n                  }}\n                >\n                  Back\n                </span>\n              </Button>\n              {stepForm}\n            </div>\n            <div className={\"adaptThing\"}>\n              <RightSideHelpMenuFirstType\n                onClickExchangeEOSHandler={onClickExchangeEOSHandler}\n                onClickExchangeUSDTHandler={onClickExchangeUSDTHandler}\n                portfolio={portfolio}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/DepositForm/index.js",["232","233","234","235","236","237","238"],"import { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Message,\n  Modal,\n  Icon,\n  Button,\n  Grid,\n  Header,\n  Input,\n} from \"semantic-ui-react\";\nimport QRCode from \"react-qr-code\";\n\nimport \"./style.css\";\n\nexport default function DepositForm(props) {\n  const { fetcher, account, onBackClick, asset } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [address, setAddress] = useState(props.address);\n  const canDeposit = address.length > 0;\n  useEffect(() => {\n    async function fetchAddress(asset) {\n      try {\n        setIsLoading(true);\n        const fetchedAsset = asset === \"USDT\" ? \"eth\" : asset;\n        const resp = await fetcher(fetchedAsset);\n        const body = await resp.body.getReader().read();\n        if (resp.status === 200) {\n          const addr = JSON.parse(\n            new TextDecoder(\"utf-8\").decode(body.value)\n          ).address;\n          setAddress(addr);\n        }\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n      }\n    }\n\n    if (asset !== undefined) fetchAddress(asset);\n  }, [asset]);\n\n  return (\n    <>\n      <div>\n        <div\n          className={\"headerTitle\"}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h2 className=\"headTl\">Deposit</h2>\n          <div style={{ marginRight: \"1rem\", cursor: \"pointer\" }}>\n            <i\n              className=\"far fa-arrow-left\"\n              style={{ color: \"#FFC000\", marginRight: \".5rem\" }}\n            />\n            <span\n              onClick={onBackClick}\n              style={{\n                color: \"#FFC000\",\n                borderBottom: \"1px solid #FFC000\",\n                height: \"40%\",\n                fontWeight: \"600\",\n              }}\n            >\n              Back to Portfolio\n            </span>\n          </div>\n        </div>\n\n        <div className=\"qr-section\">\n          <div\n            style={{\n              background: \"#F0F1F4\",\n              padding: \"1rem\",\n              width: \"96%\",\n              margin: \"0 auto\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <span\n              style={{\n                color: \"#000\",\n                fontWeight: \"bold\",\n                fontSize: \".8rem\",\n                margin: \"1rem\",\n              }}\n            >\n              DEPOSIT <span style={{ color: \"#FFC000\" }}>{asset}</span>\n            </span>\n            <div className={\"needAdaptToQR\"}>\n              {!isLoading && !canDeposit && <p> Cannot deposit </p>}\n              {!isLoading && canDeposit && (\n                <QRCode value={address} size={200} />\n              )}\n            </div>\n          </div>\n          <p\n            style={{\n              margin: \"1rem\",\n              color: \"#505361\",\n              fontWeight: \"600\",\n              fontSize: \".8rem\",\n            }}\n          >\n            Minimum deposit: 0.001 {asset}\n          </p>\n          <div>\n            {!isLoading && canDeposit && (\n              <CopyToClipboard text={address} onCopy={() => {}}>\n                <div style={{ width: \"100%\" }}>\n                  <Input\n                    style={{ width: \"100%\" }}\n                    action={{\n                      color: \"yellow\",\n                      labelPosition: \"right\",\n                      icon: \"copy\",\n                      content: \"Copy\",\n                    }}\n                    value={address}\n                  />\n                </div>\n              </CopyToClipboard>\n            )}\n          </div>\n\n          <Message\n            className={\"messageRed\"}\n            icon=\"attention\"\n            header=\"Important information\"\n            content={`Send only ${asset} to this address. Sending less than 0.001 ${asset} or any other currency to this address may result in the loss of your deposit`}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/fetchHistory.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/cryptoChooser.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Navbar/WidgetOnRamper.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/createAccountWithPassword.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/useDebounce.js",["239"],"import { useState, useEffect } from 'react'\n\n// Наш хук\nexport default function useDebounce(value, delay) {\n    // Состояние и сеттер для отложенного значения\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(\n        () => {\n            // Выставить debouncedValue равным value (переданное значение)\n            // после заданной задержки\n            const handler = setTimeout(() => {\n                setDebouncedValue(value)\n            }, delay)\n\n            // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n            // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n            // ... value будет изменено (смотри ниже массив зависимостей).\n            // Так мы избегаем изменений debouncedValue, если значение value ...\n            // ... поменялось в рамках интервала задержки.\n            // Таймаут очищается и стартует снова.\n            // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n            // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n            // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n            return () => {\n                clearTimeout(handler)\n            }\n        },\n        // Вызывается снова, только если значение изменится\n        // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n        // ... если вы собираетесь менять ее динамически.\n        [value]\n    )\n\n    return debouncedValue\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/PaperWalletLogin/CreatePdfWallet.js",["240","241"],"import jsPDF from 'jspdf'\nimport QRCode from 'qrcode'\n\nimport image from './img.png'\n\nconst isLocked = () => true\n\nconst _createPaperWalletAsPDF = function (\n    ownerkeys,\n    activeKeys,\n    memoKey,\n    accountName,\n    privateKey\n) {\n    const width = 300,\n        height = 450, //mm\n        lineMargin = 5,\n        qrSize = 50,\n        textMarginLeft = qrSize + 7,\n        qrMargin = 5,\n        qrRightPos = width - qrSize - qrMargin,\n        textWidth = width - qrSize * 2 - qrMargin * 2 - 3,\n        textHeight = 8,\n        logoWidth = (width * 3) / 4,\n        logoHeight = logoWidth / 2.8, //  logo original width/height=2.8\n        logoPositionX = (width - logoWidth) / 2\n    let rowHeight = logoHeight + 50\n    const keys = [activeKeys, ownerkeys, memoKey]\n    const keysName = ['Active Key', 'Owner Key', 'Memo Key']\n\n    let locked = isLocked()\n\n    const pdf = new jsPDF({\n        orientation: 'portrait',\n        format: [width, height],\n        compressPdf: true\n    })\n\n    const checkPageH = (pdfInstance, currentPageH, maxPageH) => {\n        if (currentPageH >= maxPageH) {\n            pdfInstance.addPage()\n            rowHeight = 10\n        }\n        return pdf.internal.getNumberOfPages()\n    }\n\n    const keyRow = (publicKey) => {\n        let currentPage = checkPageH(pdf, rowHeight, 400)\n        gQrcode(publicKey, qrMargin, rowHeight + 10, currentPage)\n        if (locked && !!privateKey) {\n            gQrcode(privateKey, qrRightPos, rowHeight + 10, currentPage)\n        }\n        pdf.text('PublicKey', textMarginLeft, rowHeight + 20)\n        pdf.text(publicKey, textMarginLeft, rowHeight + 30)\n        pdf.rect(textMarginLeft - 1, rowHeight + 24, textWidth, textHeight)\n        pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n        if (locked) {\n            pdf.text('PrivateKey', textMarginLeft, rowHeight + 40)\n            if (!!privateKey) {\n                pdf.text(privateKey, textMarginLeft, rowHeight + 50)\n            } else {\n                pdf.text('Not found.', textMarginLeft, rowHeight + 50)\n            }\n            pdf.rect(textMarginLeft - 1, rowHeight + 44, textWidth, textHeight)\n        }\n        rowHeight += 50\n    }\n\n    const gQrcode = (qrcode, rowWidth, rowHeight, currentPage) => {\n        QRCode.toDataURL(qrcode)\n            .then((url) => {\n                pdf.setPage(currentPage)\n                pdf.addImage(url, 'JPEG', rowWidth, rowHeight, qrSize, qrSize)\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n    }\n\n    let img = new Image()\n    img.src = image\n    pdf.addImage(\n        img,\n        'PNG',\n        logoPositionX,\n        30,\n        logoWidth,\n        logoHeight,\n        '',\n        'MEDIUM'\n    )\n    pdf.text('Account:', 18, rowHeight - 10)\n    pdf.text(accountName, 42, rowHeight - 10)\n\n    let content = keys.map((publicKeys, index) => {\n        if (index >= 1) {\n            rowHeight += 25 // add margin-top for block\n        }\n        checkPageH(pdf, rowHeight, 400)\n        pdf.text('Public', 22, rowHeight + 7)\n        pdf.text(keysName[index], 120, rowHeight + 7)\n        if (locked) {\n            pdf.text('Private', 260, rowHeight + 7)\n        }\n        pdf.line(lineMargin, rowHeight + 1, width - lineMargin, rowHeight + 1)\n        pdf.line(lineMargin, rowHeight + 9, width - lineMargin, rowHeight + 9)\n        if (typeof publicKeys === 'string') {\n            keyRow(publicKeys)\n        } else {\n            publicKeys.map((publicKey) => {\n                keyRow(publicKey)\n            })\n        }\n    })\n\n    Promise.all(content).then(() => {\n        pdf.save(\n            'meta' +\n                '-paper-wallet-' +\n                (locked ? 'public-' : 'private-') +\n                accountName +\n                '.pdf'\n        )\n    })\n}\n\nconst createPaperWalletAsPDF = function (\n    account,\n    ownerKey,\n    activeKey,\n    memoKey,\n    privateKey\n) {\n    _createPaperWalletAsPDF(ownerKey, activeKey, memoKey, account, privateKey)\n}\n\nexport { createPaperWalletAsPDF }\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LoginScreen/index.jsx",["242","243","244","245","246","247","248","249","250","251"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuThirdType/RightSideHelpMenuThirdType.js",["252"],"import * as React from \"react\";\nimport styles from \"./RightSideHelpMenuThirdType.module.scss\";\n\nconst RightSideHelpMenuSecondType = (props) => {\n  const { onClickExchangeEOSHandler, onClickExchangeUSDTHandler, portfolio } =\n    props;\n\n  const DateOfStartEOS = 1645998629;\n  const DateOfStartUSDT = 1646085029;\n\n  const calculateDate = (date) => {\n    return Math.floor((new Date() / 1000 - date) / 86400);\n  };\n\n  return (\n    <>\n      <div className={styles.newCrypto}>\n        <h5 style={{ fontWeight: \"bold\", fontSize: \"1rem\" }}>\n          New Crypto on META1\n        </h5>\n        <hr />\n        <div className={styles.newCryptoBlock}>\n          <div className={styles.crypto} onClick={onClickExchangeUSDTHandler}>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/Tether-USDT-icon.png\"\n                alt=\"usdt\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>USDT</h6>\n                <span>Added {calculateDate(DateOfStartUSDT)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n          <hr />\n          <div className={styles.crypto} onClick={onClickExchangeEOSHandler}>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <img\n                style={{ width: \"35px\", height: \"35px\", marginTop: \".3rem\" }}\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/1024/EOS-icon.png\"\n                alt=\"EOS\"\n              />\n              <div\n                className={styles.blockCryptText}\n                style={{ marginLeft: \".5rem\" }}\n              >\n                <h6>EOS</h6>\n                <span>Added {calculateDate(DateOfStartEOS)} days ago</span>\n              </div>\n            </div>\n            <div style={{ marginTop: \"1rem\", marginRight: \"1rem\" }}>\n              <i\n                style={{ color: \"#240000\" }}\n                className=\"fas fa-chevron-right event\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RightSideHelpMenuSecondType;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/LeftPanelAdapt/LeftPanelAdapt.js",["253"],"import * as React from \"react\";\nimport styles from \"./LeftPanelAdapt.module.scss\";\nimport \"./LeftPanelAdapt.css\";\nimport user from \"../../images/default-pic1.png\";\n\nconst LeftPanelAdapt = (props) => {\n  const {\n    onClickHomeHandler,\n    onClickPortfolioHandler,\n    onClickExchangeHandler,\n    onClickPaperWalletHandler,\n    onClickOrderTableHandler,\n    onClickSettingsHandler,\n    onClickHistoryHandler,\n    portfolio,\n    name,\n    userIcon,\n  } = props;\n\n  return (\n    <ul className={styles.mainBlockAdapt + \" nav flex-column\"}>\n      <li className=\"nav-item\">\n        <div className={styles.userinfo}>\n          <div>\n            <img\n              className={styles.imageUser}\n              id=\"leftAvatarAdapt\"\n              src={userIcon}\n              alt=\"user\"\n            />\n          </div>\n          <span\n            style={{\n              textAlign: \"center\",\n              margin: \"1.4rem 0 0 .7rem\",\n              fontWeight: \"bold\",\n              fontSize: \".8rem\",\n            }}\n          >\n            {name && portfolio ? name : \"Unlinked user\"}\n          </span>\n        </div>\n      </li>\n      <li\n        style={{ marginTop: \"1rem\" }}\n        onClick={portfolio ? onClickHomeHandler : null}\n        className={styles.Li + \" nav-item\"}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i\n              style={{ margin: \".55rem .5rem\" }}\n              className=\"fas fa-home-lg-alt\"\n            />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Home</span>\n          </div>\n        </div>\n      </li>\n      <li className={styles.Li + \" nav-item dropdown\"}>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"row\",\n          }}\n          id=\"navbarDropdown\"\n          role=\"button\"\n          data-bs-toggle=\"dropdown\"\n          aria-expanded=\"false\"\n          className={styles.containerLi + \" event\"}\n        >\n          <div\n            className={\"event\"}\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n          >\n            <div className={styles.circle + \" event\"}>\n              <i\n                style={{ margin: \".6rem .54rem\" }}\n                className=\"far fa-briefcase event\"\n              />\n            </div>\n            <div className={styles.textSpan + \" event\"}>\n              <span className={\"event\"}>Portfolio</span>\n            </div>\n          </div>\n          <div\n            className={\"event\"}\n            style={{ marginTop: \"1.4rem\", marginRight: \"1rem\" }}\n          >\n            <i\n              style={{ color: \"#240000\" }}\n              className=\"fas fa-chevron-right event\"\n            />\n          </div>\n        </div>\n        <ul\n          className={\"event dropdown-menu needToBeYellow\"}\n          aria-labelledby=\"navbarDropdown\"\n        >\n          <h1\n            style={{\n              fontSize: \"1.5rem\",\n              fontWeight: \"300\",\n              color: \"#d59900\",\n              textAlign: \"center\",\n            }}\n          >\n            Portfolio\n          </h1>\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPortfolioHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Show All Balance\n          </li>\n          <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickOrderTableHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Open Orders\n          </li>\n          <hr />\n          <li\n            className={\"event dropdown-item\"}\n            onClick={portfolio ? onClickPaperWalletHandler : null}\n            style={{ cursor: \"pointer\", textAlign: \"center\", color: \"#fff\" }}\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n          >\n            Paper Wallet\n          </li>\n        </ul>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickExchangeHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fad fa-exchange\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Exchange</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickHistoryHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"fas fa-history\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Transfer History</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={portfolio ? onClickSettingsHandler : null}\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarSupportedContent\"\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .54rem\" }} className=\"far fa-cog\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Settings</span>\n          </div>\n        </div>\n      </li>\n      <li\n        className={styles.Li + \" nav-item\"}\n        onClick={() => {\n          localStorage.removeItem(\"login\");\n          sessionStorage.setItem(\"location\", \"wallet\");\n          window.location.reload();\n        }}\n      >\n        <div className={styles.containerLi}>\n          <div className={styles.circle}>\n            <i style={{ margin: \".6rem .62rem\" }} className=\"fa fa-sign-out\" />\n          </div>\n          <div className={styles.textSpan}>\n            <span>Log Out</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default LeftPanelAdapt;\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/ExchangeForm/ExchangeSelect.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/UserInformationForm.js",["254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { key, ChainValidation } from \"meta1js\";\nimport AccountApi from \"../../lib/AccountApi\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"./SignUpForm.css\";\n\nimport { Button, Form, Grid, Input, Popup } from \"semantic-ui-react\";\n\nconst useDebounce = (value, timeout) => {\n  const [state, setState] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => setState(value), timeout);\n\n    return () => clearTimeout(handler);\n  }, [value, timeout]);\n\n  return state;\n};\n\nconst UserInformationForm = (props) => {\n  const [generatedPassword, setGeneratedPassword] = useState(\"\");\n  useEffect(() => {\n    if (generatedPassword === \"\") {\n      setGeneratedPassword(`P${key.get_random_key().toWif().toString()}`);\n    }\n  }, [generatedPassword]);\n\n  const [accountName, setAccountName] = useState(props.accountName || \"\");\n  const debouncedAccountName = useDebounce(accountName, 100);\n  const [accountNameErrors, setAccountNameErrors] = useState(null);\n  const [email, setEmail] = useState(props.email || \"\");\n  const [firstName, setFirstName] = useState(props.firstName || \"\");\n  const [lastName, setLastName] = useState(props.lastName || \"\");\n  const [phone, setPhone] = useState(props.phone || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [searchAccount, setSearchAccount] = useState([[\"PM\", \"\"]]);\n  const [touchedAccountName, setTouchedAccountName] = useState(false);\n  const [phoneError, setPhoneError] = useState(null);\n  const [emailError, setEmailError] = useState(null);\n  const [firstNameError, setFirstNameError] = useState(null);\n  const [lastNameError, setLastNameError] = useState(null);\n  useEffect(() => {\n    if (accountName) {\n      AccountApi.lookupAccounts(accountName, 1)\n        .then((res) => setSearchAccount(res))\n        .catch((err) => console.log(err));\n    }\n  }, [accountName]);\n\n  useEffect(() => {\n    const error = ChainValidation.is_account_name_error(debouncedAccountName);\n    if (error) {\n      setAccountNameErrors({\n        content: error,\n        pointing: \"below\",\n      });\n    } else if (!accountName.includes(\"-\") && !/^.*\\d.*$/.test(accountName)) {\n      setAccountNameErrors({\n        content:\n          \"This is a premium name which is more expensive than a name containing a dash (-) or a number.\",\n        pointing: \"below\",\n      });\n    } else {\n      setAccountNameErrors(null);\n    }\n  }, [debouncedAccountName]);\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (isSubmitted) {\n      props.onSubmit(\n        accountName,\n        generatedPassword,\n        email,\n        phone,\n        lastName,\n        firstName\n      );\n    }\n    return () => setIsSubmitted(false);\n  }, [\n    firstName,\n    isSubmitted,\n    accountName,\n    generatedPassword,\n    props,\n    email,\n    lastName,\n    phone,\n  ]);\n\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n  return (\n    <>\n      <h2 className=\"head-title\">Create META Wallet</h2>\n      <Grid>\n        <Grid.Column width={16} className=\"singup-grid\">\n          <Form autoComplete=\"off\" onSubmit={setIsSubmitted}>\n            <div className=\"field\">\n              <Grid stackable>\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>First Name</label>\n                    <input\n                      value={firstName}\n                      onChange={(event) => {\n                        setFirstName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setFirstNameError(\n                            \"Your First Name must not contain special characters\"\n                          );\n                        } else {\n                          setFirstNameError(null);\n                        }\n                      }}\n                      placeholder=\"First Name\"\n                      required\n                    />\n                    {firstNameError && (\n                      <p style={{ color: \"red\" }}> {firstNameError}</p>\n                    )}\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Email</label>\n                    <input\n                      onChange={(event) => {\n                        setEmail(event.target.value);\n                        if (\n                          !/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(\n                            event.target.value\n                          )\n                        ) {\n                          setEmailError(\"Invalid Email\");\n                        } else {\n                          setEmailError(null);\n                        }\n                      }}\n                      value={email}\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      required\n                    />\n                    {emailError && (\n                      <p style={{ color: \"red\" }}> {emailError}</p>\n                    )}\n                  </Form.Field>\n                </Grid.Column>\n\n                <Grid.Column width={isMobile ? 16 : 8}>\n                  <Form.Field>\n                    <label>Last Name</label>\n                    <input\n                      value={lastName}\n                      onChange={(event) => {\n                        setLastName(event.target.value);\n                        if (!/^[A-Za-z]{0,63}$/.test(event.target.value)) {\n                          setLastNameError(\n                            \"Your Last Name must not contain special characters\"\n                          );\n                        } else {\n                          setLastNameError(null);\n                        }\n                      }}\n                      placeholder=\"Last Name\"\n                      required\n                    />\n                    {lastNameError && (\n                      <p style={{ color: \"red\" }}> {lastNameError}</p>\n                    )}\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Phone Number</label>\n                    <input\n                      value={phone}\n                      onChange={(event) => {\n                        setPhone(event.target.value);\n                        if (\n                          !/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/g.test(\n                            event.target.value\n                          )\n                        ) {\n                          setPhoneError(\"Invalid Phone\");\n                        } else {\n                          setPhoneError(null);\n                        }\n                      }}\n                      title=\"+1-234-567-8900\"\n                      placeholder=\"Phone Number\"\n                      pattern=\"+[0-9]{2}-[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                      type=\"tel\"\n                      required\n                    />\n                    {phoneError && (\n                      <p style={{ color: \"red\" }}> {phoneError}</p>\n                    )}\n                  </Form.Field>\n                </Grid.Column>\n              </Grid>\n            </div>\n\n            <Form.Field>\n              <label>Account Name</label>\n              <input\n                control={Input}\n                value={accountName}\n                type=\"text\"\n                error={accountNameErrors}\n                placeholder=\"Account Name\"\n                onChange={({ target }) => {\n                  setAccountName(target.value.toLocaleLowerCase());\n                  setTouchedAccountName(true);\n                }}\n              />\n              {accountNameErrors?.content && touchedAccountName ? (\n                <p style={{ color: \"red\" }}> {accountNameErrors?.content}</p>\n              ) : null}\n            </Form.Field>\n\n            <Form.Field>\n              <label>Password test</label>\n              <div className=\"ui action input\">\n                <input value={generatedPassword} type=\"text\" disabled />\n                <CopyToClipboard text={generatedPassword} onCopy={() => {}}>\n                  <div\n                    name=\"copyToken\"\n                    className=\"ui yellow right icon button brown\"\n                  >\n                    <i className=\"fal fa-copy\" />\n                  </div>\n                </CopyToClipboard>\n              </div>\n            </Form.Field>\n\n            <Form.Field>\n              <label>Password Confirmation</label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </Form.Field>\n            {searchAccount[0][0] === accountName && (\n              <p style={{ color: \"red\" }}>Account is already used </p>\n            )}\n            <Form.Field>\n              <Button\n                // onClick={() => setIsSubmitted(true)}\n                className=\"yellow\"\n                style={{ color: \"#240000\" }}\n                type=\"submit\"\n                disabled={\n                  firstName === \"\" ||\n                  lastName === \"\" ||\n                  email === \"\" ||\n                  phone === \"\" ||\n                  accountNameErrors ||\n                  password !== generatedPassword ||\n                  searchAccount[0][0] === accountName ||\n                  emailError ||\n                  phoneError ||\n                  firstNameError ||\n                  lastNameError\n                }\n              >\n                Submit\n              </Button>\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n};\n\nexport { UserInformationForm };\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/SignUpForm/SubmitForm.js",["268"],"import React, { useState } from \"react\";\nimport MetaLoader from \"../../UI/loader/Loader\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport {\n  Button,\n  Message,\n  Checkbox,\n  Form,\n  Popup,\n  Grid,\n} from \"semantic-ui-react\";\n\nexport default function SubmitForm(props) {\n  const { innerWidth: width } = window;\n  const isMobile = width <= 600;\n\n  const [access, setAccess] = useState(false);\n  const [recover, setRecover] = useState(false);\n  const [stored, setStored] = useState(false);\n  const [living, setLiving] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const isAllChecked = access && recover && stored && living;\n\n  return (\n    <Grid>\n      <Grid.Column style={{ marginTop: \"1rem\" }} width={16}>\n        <Form>\n          <Form.Field>\n            <label>Password</label>\n            <div className=\"ui action input\">\n              <input value={props.password} type=\"text\" disabled />\n              <Popup\n                content=\"Copy to Clipboard.\"\n                trigger={\n                  <CopyToClipboard text={props.password} onCopy={() => {}}>\n                    <button\n                      name=\"copyToken\"\n                      style={{ color: \"#240000\" }}\n                      class=\"ui yellow right icon button\"\n                    >\n                      <i class=\"copy icon\" />\n                    </button>\n                  </CopyToClipboard>\n                }\n              />\n            </div>\n          </Form.Field>\n\n          <Message\n            className={\"messageRed\"}\n            icon=\"attention\"\n            header=\"Important information\"\n            content=\"If you forget your password phrase you will be unable to access your account and your funds. We cannot reset or restore your password! Memorize or write down your username and password!\"\n          />\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setAccess(!access)}\n              checked={access}\n              label=\"I understand that I will lose access to my funds if I lose my password\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setRecover(!recover)}\n              checked={recover}\n              label=\"I understand that no one can recover my password if I lose or forget it\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setStored(!stored)}\n              checked={stored}\n              label=\"I have written down or otherwise stored my password\"\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <Checkbox\n              onChange={(e) => setLiving(!living)}\n              checked={living}\n              label=\" I am a living man or woman hence a living being\"\n            />\n          </Form.Field>\n\n          {isSubmitted && <MetaLoader size={\"small\"} />}\n          {!isSubmitted && (\n            <Button\n              className=\"sbBtn\"\n              onClick={() => {\n                setIsSubmitted(true);\n                props.onSubmit();\n              }}\n              disabled={!isAllChecked}\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          )}\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/Wallet/PortfolioTable.js",["269"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/requests/compareCrypto.js",["270"],"import axios from 'axios'\nimport env from \"react-dotenv\";\n\nexport const compareCrypto = async (coin) => {\n    const { data } = await axios.get(\n        `https://min-api.cryptocompare.com/data/price?fsym=${coin}&tsyms=USDT`\n    )\n    return data;\n}\n\nexport default async function getAllByOne(tokenNow, tokenFor) {\n    const {data} = await axios.get(\n        `https://min-api.cryptocompare.com/data/price?fsym=${tokenNow}&tsyms=${tokenFor}`\n    )\n    return data;\n}\n","/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/config/help.js",[],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/components/RightSideHelpMenuFirstType/RightSideHelpMenuFirstType.js",["271","272"],"/Users/kok/Desktop/meta1/litewallet/meta-1-litewallet-2.0/src/lib/AccountApi.js",[],{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":8,"column":43,"nodeType":"279","messageId":"280","endLine":8,"endColumn":58},{"ruleId":"277","severity":1,"message":"281","line":51,"column":19,"nodeType":"279","messageId":"280","endLine":51,"endColumn":29},{"ruleId":"277","severity":1,"message":"282","line":59,"column":10,"nodeType":"279","messageId":"280","endLine":59,"endColumn":18},{"ruleId":"277","severity":1,"message":"283","line":62,"column":18,"nodeType":"279","messageId":"280","endLine":62,"endColumn":27},{"ruleId":"277","severity":1,"message":"284","line":71,"column":17,"nodeType":"279","messageId":"280","endLine":71,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":79,"column":6,"nodeType":"287","endLine":79,"endColumn":8,"suggestions":"288"},{"ruleId":"277","severity":1,"message":"289","line":91,"column":9,"nodeType":"279","messageId":"280","endLine":91,"endColumn":12},{"ruleId":"285","severity":1,"message":"290","line":196,"column":6,"nodeType":"287","endLine":196,"endColumn":19,"suggestions":"291"},{"ruleId":"277","severity":1,"message":"292","line":214,"column":18,"nodeType":"279","messageId":"280","endLine":214,"endColumn":34},{"ruleId":"293","severity":1,"message":"294","line":121,"column":21,"nodeType":"295","endLine":128,"endColumn":22},{"ruleId":"277","severity":1,"message":"296","line":18,"column":5,"nodeType":"279","messageId":"280","endLine":18,"endColumn":22},{"ruleId":"277","severity":1,"message":"297","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":13},{"ruleId":"277","severity":1,"message":"298","line":16,"column":30,"nodeType":"279","messageId":"280","endLine":16,"endColumn":36},{"ruleId":"277","severity":1,"message":"299","line":16,"column":38,"nodeType":"279","messageId":"280","endLine":16,"endColumn":45},{"ruleId":"277","severity":1,"message":"300","line":18,"column":28,"nodeType":"279","messageId":"280","endLine":18,"endColumn":33},{"ruleId":"277","severity":1,"message":"281","line":12,"column":19,"nodeType":"279","messageId":"280","endLine":12,"endColumn":29},{"ruleId":"277","severity":1,"message":"301","line":14,"column":10,"nodeType":"279","messageId":"280","endLine":14,"endColumn":23},{"ruleId":"277","severity":1,"message":"302","line":15,"column":10,"nodeType":"279","messageId":"280","endLine":15,"endColumn":24},{"ruleId":"285","severity":1,"message":"303","line":36,"column":6,"nodeType":"287","endLine":36,"endColumn":33,"suggestions":"304"},{"ruleId":"277","severity":1,"message":"305","line":4,"column":8,"nodeType":"279","messageId":"280","endLine":4,"endColumn":12},{"ruleId":"277","severity":1,"message":"306","line":32,"column":5,"nodeType":"279","messageId":"280","endLine":32,"endColumn":16},{"ruleId":"277","severity":1,"message":"307","line":33,"column":5,"nodeType":"279","messageId":"280","endLine":33,"endColumn":22},{"ruleId":"277","severity":1,"message":"308","line":34,"column":5,"nodeType":"279","messageId":"280","endLine":34,"endColumn":20},{"ruleId":"277","severity":1,"message":"283","line":38,"column":18,"nodeType":"279","messageId":"280","endLine":38,"endColumn":27},{"ruleId":"277","severity":1,"message":"309","line":43,"column":10,"nodeType":"279","messageId":"280","endLine":43,"endColumn":15},{"ruleId":"277","severity":1,"message":"300","line":45,"column":28,"nodeType":"279","messageId":"280","endLine":45,"endColumn":33},{"ruleId":"310","severity":1,"message":"311","line":117,"column":20,"nodeType":"312","messageId":"313","endLine":117,"endColumn":22},{"ruleId":"285","severity":1,"message":"314","line":123,"column":6,"nodeType":"287","endLine":123,"endColumn":23,"suggestions":"315"},{"ruleId":"277","severity":1,"message":"316","line":8,"column":17,"nodeType":"279","messageId":"280","endLine":8,"endColumn":21},{"ruleId":"277","severity":1,"message":"317","line":8,"column":37,"nodeType":"279","messageId":"280","endLine":8,"endColumn":43},{"ruleId":"277","severity":1,"message":"318","line":10,"column":10,"nodeType":"279","messageId":"280","endLine":10,"endColumn":20},{"ruleId":"277","severity":1,"message":"319","line":10,"column":22,"nodeType":"279","messageId":"280","endLine":10,"endColumn":32},{"ruleId":"277","severity":1,"message":"320","line":10,"column":34,"nodeType":"279","messageId":"280","endLine":10,"endColumn":42},{"ruleId":"277","severity":1,"message":"321","line":10,"column":44,"nodeType":"279","messageId":"280","endLine":10,"endColumn":52},{"ruleId":"310","severity":1,"message":"311","line":33,"column":53,"nodeType":"312","messageId":"313","endLine":33,"endColumn":55},{"ruleId":"277","severity":1,"message":"322","line":36,"column":9,"nodeType":"279","messageId":"280","endLine":36,"endColumn":12},{"ruleId":"277","severity":1,"message":"323","line":37,"column":10,"nodeType":"279","messageId":"280","endLine":37,"endColumn":21},{"ruleId":"277","severity":1,"message":"324","line":37,"column":23,"nodeType":"279","messageId":"280","endLine":37,"endColumn":37},{"ruleId":"277","severity":1,"message":"325","line":41,"column":19,"nodeType":"279","messageId":"280","endLine":41,"endColumn":29},{"ruleId":"277","severity":1,"message":"326","line":48,"column":10,"nodeType":"279","messageId":"280","endLine":48,"endColumn":26},{"ruleId":"277","severity":1,"message":"327","line":51,"column":19,"nodeType":"279","messageId":"280","endLine":51,"endColumn":29},{"ruleId":"277","severity":1,"message":"328","line":52,"column":10,"nodeType":"279","messageId":"280","endLine":52,"endColumn":17},{"ruleId":"285","severity":1,"message":"329","line":102,"column":6,"nodeType":"287","endLine":102,"endColumn":16,"suggestions":"330"},{"ruleId":"285","severity":1,"message":"331","line":123,"column":6,"nodeType":"287","endLine":123,"endColumn":24,"suggestions":"332"},{"ruleId":"277","severity":1,"message":"333","line":151,"column":9,"nodeType":"279","messageId":"280","endLine":151,"endColumn":20},{"ruleId":"285","severity":1,"message":"334","line":222,"column":6,"nodeType":"287","endLine":222,"endColumn":32,"suggestions":"335"},{"ruleId":"285","severity":1,"message":"336","line":283,"column":6,"nodeType":"287","endLine":283,"endColumn":23,"suggestions":"337"},{"ruleId":"277","severity":1,"message":"338","line":284,"column":9,"nodeType":"279","messageId":"280","endLine":284,"endColumn":21},{"ruleId":"277","severity":1,"message":"339","line":301,"column":9,"nodeType":"279","messageId":"280","endLine":301,"endColumn":18},{"ruleId":"277","severity":1,"message":"340","line":29,"column":5,"nodeType":"279","messageId":"280","endLine":29,"endColumn":12},{"ruleId":"277","severity":1,"message":"307","line":30,"column":5,"nodeType":"279","messageId":"280","endLine":30,"endColumn":22},{"ruleId":"277","severity":1,"message":"341","line":34,"column":21,"nodeType":"279","messageId":"280","endLine":34,"endColumn":33},{"ruleId":"310","severity":1,"message":"311","line":95,"column":25,"nodeType":"312","messageId":"313","endLine":95,"endColumn":27},{"ruleId":"285","severity":1,"message":"342","line":100,"column":6,"nodeType":"287","endLine":100,"endColumn":38,"suggestions":"343"},{"ruleId":"285","severity":1,"message":"344","line":140,"column":6,"nodeType":"287","endLine":140,"endColumn":37,"suggestions":"345"},{"ruleId":"285","severity":1,"message":"346","line":148,"column":6,"nodeType":"287","endLine":148,"endColumn":8,"suggestions":"347"},{"ruleId":"310","severity":1,"message":"348","line":162,"column":31,"nodeType":"312","messageId":"313","endLine":162,"endColumn":33},{"ruleId":"285","severity":1,"message":"349","line":224,"column":6,"nodeType":"287","endLine":224,"endColumn":44,"suggestions":"350"},{"ruleId":"310","severity":1,"message":"311","line":856,"column":38,"nodeType":"312","messageId":"313","endLine":856,"endColumn":40},{"ruleId":"310","severity":1,"message":"311","line":862,"column":32,"nodeType":"312","messageId":"313","endLine":862,"endColumn":34},{"ruleId":"351","severity":1,"message":"352","line":884,"column":36,"nodeType":"353","messageId":"354","endLine":884,"endColumn":38},{"ruleId":"351","severity":1,"message":"352","line":904,"column":36,"nodeType":"353","messageId":"354","endLine":904,"endColumn":38},{"ruleId":"277","severity":1,"message":"355","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":22},{"ruleId":"277","severity":1,"message":"316","line":5,"column":24,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"356","line":5,"column":3,"nodeType":"279","messageId":"280","endLine":5,"endColumn":8},{"ruleId":"277","severity":1,"message":"316","line":6,"column":3,"nodeType":"279","messageId":"280","endLine":6,"endColumn":7},{"ruleId":"277","severity":1,"message":"357","line":7,"column":3,"nodeType":"279","messageId":"280","endLine":7,"endColumn":9},{"ruleId":"277","severity":1,"message":"355","line":8,"column":3,"nodeType":"279","messageId":"280","endLine":8,"endColumn":7},{"ruleId":"277","severity":1,"message":"317","line":9,"column":3,"nodeType":"279","messageId":"280","endLine":9,"endColumn":9},{"ruleId":"277","severity":1,"message":"299","line":17,"column":20,"nodeType":"279","messageId":"280","endLine":17,"endColumn":27},{"ruleId":"285","severity":1,"message":"358","line":41,"column":6,"nodeType":"287","endLine":41,"endColumn":13,"suggestions":"359"},{"ruleId":"285","severity":1,"message":"360","line":32,"column":9,"nodeType":"287","endLine":32,"endColumn":16,"suggestions":"361"},{"ruleId":"351","severity":1,"message":"352","line":95,"column":48,"nodeType":"353","messageId":"354","endLine":95,"endColumn":50},{"ruleId":"351","severity":1,"message":"352","line":110,"column":40,"nodeType":"353","messageId":"354","endLine":110,"endColumn":42},{"ruleId":"277","severity":1,"message":"362","line":2,"column":17,"nodeType":"279","messageId":"280","endLine":2,"endColumn":22},{"ruleId":"277","severity":1,"message":"357","line":2,"column":24,"nodeType":"279","messageId":"280","endLine":2,"endColumn":30},{"ruleId":"277","severity":1,"message":"363","line":17,"column":10,"nodeType":"279","messageId":"280","endLine":17,"endColumn":19},{"ruleId":"277","severity":1,"message":"364","line":17,"column":21,"nodeType":"279","messageId":"280","endLine":17,"endColumn":33},{"ruleId":"277","severity":1,"message":"365","line":18,"column":10,"nodeType":"279","messageId":"280","endLine":18,"endColumn":24},{"ruleId":"277","severity":1,"message":"366","line":18,"column":26,"nodeType":"279","messageId":"280","endLine":18,"endColumn":43},{"ruleId":"293","severity":1,"message":"367","line":53,"column":15,"nodeType":"295","endLine":57,"endColumn":16},{"ruleId":"293","severity":1,"message":"367","line":61,"column":15,"nodeType":"295","endLine":65,"endColumn":16},{"ruleId":"277","severity":1,"message":"368","line":149,"column":7,"nodeType":"279","messageId":"280","endLine":149,"endColumn":30},{"ruleId":"277","severity":1,"message":"369","line":244,"column":7,"nodeType":"279","messageId":"280","endLine":244,"endColumn":17},{"ruleId":"277","severity":1,"message":"370","line":5,"column":66,"nodeType":"279","messageId":"280","endLine":5,"endColumn":75},{"ruleId":"277","severity":1,"message":"305","line":4,"column":8,"nodeType":"279","messageId":"280","endLine":4,"endColumn":12},{"ruleId":"277","severity":1,"message":"371","line":1,"column":38,"nodeType":"279","messageId":"280","endLine":1,"endColumn":48},{"ruleId":"277","severity":1,"message":"372","line":7,"column":37,"nodeType":"279","messageId":"280","endLine":7,"endColumn":42},{"ruleId":"285","severity":1,"message":"373","line":67,"column":6,"nodeType":"287","endLine":67,"endColumn":28,"suggestions":"374"},{"ruleId":"375","severity":1,"message":"376","line":132,"column":41,"nodeType":"377","messageId":"378","endLine":132,"endColumn":42,"suggestions":"379"},{"ruleId":"375","severity":1,"message":"380","line":132,"column":49,"nodeType":"377","messageId":"378","endLine":132,"endColumn":50,"suggestions":"381"},{"ruleId":"375","severity":1,"message":"376","line":132,"column":65,"nodeType":"377","messageId":"378","endLine":132,"endColumn":66,"suggestions":"382"},{"ruleId":"375","severity":1,"message":"380","line":132,"column":73,"nodeType":"377","messageId":"378","endLine":132,"endColumn":74,"suggestions":"383"},{"ruleId":"375","severity":1,"message":"380","line":132,"column":82,"nodeType":"377","messageId":"378","endLine":132,"endColumn":83,"suggestions":"384"},{"ruleId":"375","severity":1,"message":"380","line":132,"column":86,"nodeType":"377","messageId":"378","endLine":132,"endColumn":87,"suggestions":"385"},{"ruleId":"375","severity":1,"message":"376","line":132,"column":102,"nodeType":"377","messageId":"378","endLine":132,"endColumn":103,"suggestions":"386"},{"ruleId":"375","severity":1,"message":"380","line":132,"column":110,"nodeType":"377","messageId":"378","endLine":132,"endColumn":111,"suggestions":"387"},{"ruleId":"375","severity":1,"message":"376","line":132,"column":127,"nodeType":"377","messageId":"378","endLine":132,"endColumn":128,"suggestions":"388"},{"ruleId":"375","severity":1,"message":"380","line":132,"column":135,"nodeType":"377","messageId":"378","endLine":132,"endColumn":136,"suggestions":"389"},{"ruleId":"375","severity":1,"message":"376","line":181,"column":64,"nodeType":"377","messageId":"378","endLine":181,"endColumn":65,"suggestions":"390"},{"ruleId":"277","severity":1,"message":"391","line":16,"column":9,"nodeType":"279","messageId":"280","endLine":16,"endColumn":17},{"ruleId":"277","severity":1,"message":"300","line":28,"column":28,"nodeType":"279","messageId":"280","endLine":28,"endColumn":33},{"ruleId":"277","severity":1,"message":"392","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":11},{"ruleId":"293","severity":1,"message":"367","line":22,"column":13,"nodeType":"295","endLine":26,"endColumn":14},{"ruleId":"293","severity":1,"message":"367","line":31,"column":13,"nodeType":"295","endLine":35,"endColumn":14},"no-native-reassign",["393"],"no-negated-in-lhs",["394"],"no-unused-vars","'getLastLocation' is defined but never used.","Identifier","unusedVar","'setAccount' is assigned a value but never used.","'password' is assigned a value but never used.","'setOrders' is assigned a value but never used.","'setLogin' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'onLogin'. Either include them or remove the dependency array.","ArrayExpression",["395"],"'loc' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'metaUrl'. Either include it or remove the dependency array.",["396"],"'chngLastLocation' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getAvatarFromBack' is assigned a value but never used.","'Meta1' is defined but never used.","'assets' is assigned a value but never used.","'account' is assigned a value but never used.","'error' is assigned a value but never used.","'readyToCreate' is assigned a value but never used.","'accountChecked' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'portfolioReceiver'. Either include it or remove the dependency array.",["397"],"'user' is defined but never used.","'accountName' is assigned a value but never used.","'portfolioReceiver' is assigned a value but never used.","'setFullPorfolio' is assigned a value but never used.","'check' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'currencyValue' and 'totalSum'. Either include them or remove the dependency array.",["398"],"'Icon' is defined but never used.","'Header' is defined but never used.","'helpSendTo' is defined but never used.","'helpAmount' is defined but never used.","'helpMax1' is defined but never used.","'helpSwap' is defined but never used.","'pre' is assigned a value but never used.","'chosenCrypt' is assigned a value but never used.","'setChosenCrypt' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'accountIsLoading' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'newOptions'. Either include it or remove the dependency array.",["399"],"React Hook useEffect has missing dependencies: 'balance' and 'clickedInputs'. Either include them or remove the dependency array.",["400"],"'setSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'balance', 'clickedInputs', 'portfolioReceiver', 'receiver', and 'sender'. Either include them or remove the dependency array.",["401"],"React Hook useEffect has a missing dependency: 'portfolio'. Either include it or remove the dependency array.",["402"],"'PasswordForm' is assigned a value but never used.","'ariaLabel' is assigned a value but never used.","'metaUrl' is assigned a value but never used.","'setPortfolio' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clickedInputs', 'portfolio', and 'userCurrency'. Either include them or remove the dependency array.",["403"],"React Hook useEffect has missing dependencies: 'asset', 'assets', 'options', 'selectedFrom.value', and 'selectedTo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedFrom' needs the current value of 'selectedFrom.value'.",["404"],"React Hook useEffect has a missing dependency: 'isMobile'. Either include it or remove the dependency array.",["405"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'handleCalculateSelectedFrom' and 'handleCalculateSelectedTo'. Either include them or remove the dependency array.",["406"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Grid' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'fetcher'. Either include it or remove the dependency array.",["407"],"React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.",["408"],"'Input' is defined but never used.","'openModal' is assigned a value but never used.","'setOpenModal' is assigned a value but never used.","'openVideoModal' is assigned a value but never used.","'setOpenVideoModal' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'ModalWalletInstructions' is assigned a value but never used.","'VideoModal' is assigned a value but never used.","'portfolio' is assigned a value but never used.","'useContext' is defined but never used.","'Popup' is defined but never used.","React Hook useEffect has a missing dependency: 'accountName'. Either include it or remove the dependency array.",["409"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["410","411"],"Unnecessary escape character: \\\".",["412","413"],["414","415"],["416","417"],["418","419"],["420","421"],["422","423"],["424","425"],["426","427"],["428","429"],["430","431"],"'isMobile' is assigned a value but never used.","'env' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"messageId":"462","fix":"463","desc":"464"},{"messageId":"465","fix":"466","desc":"467"},{"messageId":"462","fix":"468","desc":"464"},{"messageId":"465","fix":"469","desc":"467"},{"messageId":"462","fix":"470","desc":"464"},{"messageId":"465","fix":"471","desc":"467"},{"messageId":"462","fix":"472","desc":"464"},{"messageId":"465","fix":"473","desc":"467"},{"messageId":"462","fix":"474","desc":"464"},{"messageId":"465","fix":"475","desc":"467"},{"messageId":"462","fix":"476","desc":"464"},{"messageId":"465","fix":"477","desc":"467"},{"messageId":"462","fix":"478","desc":"464"},{"messageId":"465","fix":"479","desc":"467"},{"messageId":"462","fix":"480","desc":"464"},{"messageId":"465","fix":"481","desc":"467"},{"messageId":"462","fix":"482","desc":"464"},{"messageId":"465","fix":"483","desc":"467"},{"messageId":"462","fix":"484","desc":"464"},{"messageId":"465","fix":"485","desc":"467"},{"messageId":"462","fix":"486","desc":"464"},{"messageId":"465","fix":"487","desc":"467"},"Update the dependencies array to be: [login, onLogin]",{"range":"488","text":"489"},"Update the dependencies array to be: [accountName, metaUrl]",{"range":"490","text":"491"},"Update the dependencies array to be: [debouncedAccount, account, portfolioReceiver]",{"range":"492","text":"493"},"Update the dependencies array to be: [portfolio, data, totalSum, currencyValue]",{"range":"494","text":"495"},"Update the dependencies array to be: [newOptions, receiver]",{"range":"496","text":"497"},"Update the dependencies array to be: [amount, balance, clickedInputs, receiver]",{"range":"498","text":"499"},"Update the dependencies array to be: [debouncedAccount, amount, clickedInputs, balance, portfolioReceiver, receiver, sender]",{"range":"500","text":"501"},"Update the dependencies array to be: [assetCh, assets, portfolio]",{"range":"502","text":"503"},"Update the dependencies array to be: [selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrency]",{"range":"504","text":"505"},"Update the dependencies array to be: [asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",{"range":"506","text":"507"},"Update the dependencies array to be: [isMobile]",{"range":"508","text":"509"},"Update the dependencies array to be: [handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",{"range":"510","text":"511"},"Update the dependencies array to be: [asset, fetcher]",{"range":"512","text":"513"},"Update the dependencies array to be: [delay, value]",{"range":"514","text":"515"},"Update the dependencies array to be: [accountName, debouncedAccountName]",{"range":"516","text":"517"},"removeEscape",{"range":"518","text":"519"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"520","text":"521"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"522","text":"519"},{"range":"523","text":"521"},{"range":"524","text":"519"},{"range":"525","text":"521"},{"range":"526","text":"519"},{"range":"527","text":"521"},{"range":"528","text":"519"},{"range":"529","text":"521"},{"range":"530","text":"519"},{"range":"531","text":"521"},{"range":"532","text":"519"},{"range":"533","text":"521"},{"range":"534","text":"519"},{"range":"535","text":"521"},{"range":"536","text":"519"},{"range":"537","text":"521"},{"range":"538","text":"519"},{"range":"539","text":"521"},{"range":"540","text":"519"},{"range":"541","text":"521"},[3193,3195],"[login, onLogin]",[6529,6542],"[accountName, metaUrl]",[1298,1325],"[debouncedAccount, account, portfolioReceiver]",[3554,3571],"[portfolio, data, totalSum, currencyValue]",[3612,3622],"[newOptions, receiver]",[4190,4208],"[amount, balance, clickedInputs, receiver]",[6914,6940],"[debouncedAccount, amount, clickedInputs, balance, portfolioReceiver, receiver, sender]",[8359,8376],"[assetCh, assets, portfolio]",[3465,3497],"[selectedFromAmount, blockPrice, portfolio, clickedInputs, userCurrency]",[4683,4714],"[asset, assets, options, props.assets, props.portfolio, selectedFrom.value, selectedTo]",[4877,4879],"[isMobile]",[7004,7042],"[handleCalculateSelectedFrom, handleCalculateSelectedTo, selectedFromAmount, selectedToAmount]",[1131,1138],"[asset, fetcher]",[1489,1496],"[delay, value]",[2458,2480],"[accountName, debouncedAccountName]",[4462,4463],"",[4462,4462],"\\",[4470,4471],[4470,4470],[4486,4487],[4486,4486],[4494,4495],[4494,4494],[4503,4504],[4503,4503],[4507,4508],[4507,4507],[4523,4524],[4523,4523],[4531,4532],[4531,4531],[4548,4549],[4548,4548],[4556,4557],[4556,4556],[6488,6489],[6488,6488]]